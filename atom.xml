<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tit1e</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Tit1e/"/>
  <updated>2021-05-06T14:59:26.586Z</updated>
  <id>https://github.com/Tit1e/</id>
  
  <author>
    <name>Tit1e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>生活再次趋于平稳</title>
    <link href="https://github.com/Tit1e/2021/05/06/156-2021-new-life/"/>
    <id>https://github.com/Tit1e/2021/05/06/156-2021-new-life/</id>
    <published>2021-05-06T14:32:04.000Z</published>
    <updated>2021-05-06T14:59:26.586Z</updated>
    
    <content type="html"><![CDATA[<p>很久没更新博客，一是确实没什么可以写；另一个是从三月开始，生活一直比较动荡，今年二月底辞去了工作，三月正式开始找工作，有点蠢的给自己安排了满满当当一周的面试，以至于面试到后面已经精疲力尽，开始放飞自我。</p><p>三月十六日入职了新公司，然后一直住在杭州的朋友家里。后面的找房子也是曲折，好在结果还算满意。</p><p>这些动荡的日子中，脑子里想了很多东西，对新公司的担心，对房子着落的担心，我都想过最坏的打算。但运气这事儿总是这样，不会太好，也不会太差，租房上亏了点押金，但找到的房子还算满意。新公司的话，不知道以后，目前看来并没有什么问题，总之打铁还需自身硬，空余时间多提升自己。有时候需要给自己一些鸡血，对每件事都抱着消极的念头，会影响整个人的状态的吧。</p><p>这周日打算在网上挂广告，得把次卧租出去。现在一个人，一天 100 多的房租还是挺心疼，虽然一个住着真的好爽。</p><p>到今天，东西已经收拾得差不多了，等把投影的幕布跟架子装好，生活又算是恢复之前状态了。这两个月“耽误”了不少时间，后面得加把劲把这两个月落下的进度补回来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很久没更新博客，一是确实没什么可以写；另一个是从三月开始，生活一直比较动荡，今年二月底辞去了工作，三月正式开始找工作，有点蠢的给自己安排了满满当当一周的面试，以至于面试到后面已经精疲力尽，开始放飞自我。&lt;/p&gt;
&lt;p&gt;三月十六日入职了新公司，然后一直住在杭州的朋友家里。后面
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/Tit1e/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0 新特性学习（二）</title>
    <link href="https://github.com/Tit1e/2021/01/29/155-learn-vue3-2/"/>
    <id>https://github.com/Tit1e/2021/01/29/155-learn-vue3-2/</id>
    <published>2021-01-29T05:16:22.000Z</published>
    <updated>2021-01-29T08:01:53.562Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://evolly.one/2021/01/28/154-learn-vue3-1/" target="_blank" rel="noopener">Vue3.0 新特性学习（一）</a></p><p><code>setup</code> 内部也可以调用生命周期钩子，但是 Vue3 并没有提供 <code>beforeCreate</code> 和 <code>created</code> 对应的钩子，由上篇文章可知，<code>setup</code> 是早于这两个钩子执行的，因此 <code>setup</code> 本身就可以胜任这两个钩子的工作，并且官方也是这么说的：</p><blockquote><p>因为 <code>setup</code> 是围绕 <code>beforeCreate</code> 和 <code>created</code> 生命周期钩子运行的，所以不需要显式地定义它们。换句话说，在这些钩子中编写的任何代码都应该直接在 <code>setup</code> 函数中编写。</p></blockquote><p>其他的钩子名称有所改变，<code>beforeMount</code> 变成了 <code>onBeforeMount</code>，其他钩子的命名规则都与这个相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Vue.createApp(&#123;</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    Vue.onBeforeMount(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    Vue.onMounted(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeMount() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">4</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-29-053700.png" alt></p><p>同样的钩子，<code>setup</code> 内部的钩子调用早于外部的钩子。</p><h4 id="computed"><a href="#computed" class="headerlink" title="computed"></a>computed</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    <span class="keyword">const</span> a = Vue.ref(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">const</span> b = Vue.computed(<span class="function"><span class="params">()</span> =&gt;</span> a.value * <span class="number">2</span>)</span><br><span class="line">    <span class="keyword">const</span> c = Vue.computed(&#123;</span><br><span class="line">      <span class="keyword">get</span>: () =&gt; a.value * 3,</span><br><span class="line">      <span class="keyword">set</span>:val =&gt; a.value = val + 3</span><br><span class="line">    &#125;)</span><br><span class="line">    console.log(a.value) // 1</span><br><span class="line">    console.log(+ b.value) // 2</span><br><span class="line">    console.log(c.value) // 3</span><br><span class="line">    c.value = 2</span><br><span class="line">    console.log(c.value) // 15</span><br><span class="line">    console.log(a.value) // 5</span><br><span class="line">    console.log(b.value) // 10</span><br><span class="line">    console.log(c.value) // 15</span><br><span class="line">    return &#123;</span><br><span class="line">      a,</span><br><span class="line">      b,</span><br><span class="line">      c</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>computed 用法与之前没什么差别。</p><h4 id="watch"><a href="#watch" class="headerlink" title="watch"></a>watch</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    <span class="comment">// 侦听 ref</span></span><br><span class="line">    <span class="keyword">const</span> a = Vue.ref(<span class="number">1</span>)</span><br><span class="line">    Vue.watch(a, (val, prevVal) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`a 被改变了：新值为<span class="subst">$&#123;val&#125;</span>，旧值为<span class="subst">$&#123;prevVal&#125;</span>`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    a.value = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 侦听 getter</span></span><br><span class="line">    <span class="keyword">const</span> b = Vue.reactive(&#123;</span><br><span class="line">      x: <span class="number">1</span>,</span><br><span class="line">      y: <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">    Vue.watch(<span class="function"><span class="params">()</span> =&gt;</span> b.x, (val, prevVal) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`b.x 被改变了：新值为<span class="subst">$&#123;val&#125;</span>，旧值为<span class="subst">$&#123;prevVal&#125;</span>`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    b.x = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听多个源</span></span><br><span class="line">    <span class="keyword">const</span> &#123; c, d &#125; = Vue.toRefs(Vue.reactive(&#123; <span class="attr">c</span>: <span class="number">3</span>, <span class="attr">d</span>: <span class="number">4</span> &#125;))</span><br><span class="line">    Vue.watch([c, d], (newValArr, preValArr) =&gt; &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(newValArr, preValArr)</span><br><span class="line">    &#125;)</span><br><span class="line">    c.value = <span class="number">7</span></span><br><span class="line">    d.value = <span class="number">7</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      a,</span><br><span class="line">      b</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-29-060414.png" alt></p><h4 id="watchEffect"><a href="#watchEffect" class="headerlink" title="watchEffect"></a>watchEffect</h4><p><code>watchEffect</code> 接受一个回调函数，在这个回调函数中用到的<strong>任意一个响应式数据</strong>更新时，这个回调函数都会被执行，也就是说它可以监听多个响应式数据。它与 <code>watch</code> 很相似，但也有需要注意的地方：</p><ul><li><code>watchEffect</code> 无需指定要监听的属性，它自动会收集依赖，而 <code>watch</code> 必须指定。</li><li><code>watchEffect</code> 因为需要收集依赖。所以它在组件初始化的时候就会运行一遍，而 <code>watch</code> 默认不会运行，除非手动配置 <code>immediate: true</code>。</li><li><code>watchEffect</code> 无法知道是哪个值被更新，因此获取不到变化的新值与旧值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="comment">// 响应式</span></span><br><span class="line">    <span class="keyword">const</span> a = Vue.ref(<span class="number">0</span>)</span><br><span class="line">    <span class="comment">// 非响应式</span></span><br><span class="line">    <span class="keyword">let</span> b = <span class="number">1</span></span><br><span class="line">    Vue.watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">`有值更新了！a：<span class="subst">$&#123;a.value&#125;</span>；b：<span class="subst">$&#123;b&#125;</span>。`</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 不触发 watchEffect</span></span><br><span class="line">      b = <span class="number">5</span></span><br><span class="line">    &#125;, <span class="number">1000</span>)</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// 触发 watchEffect</span></span><br><span class="line">      a.value ++</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      listLoading,</span><br><span class="line">      toggleLoading</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-29-070553.png" alt></p><p><code>watch</code> 与 <code>watchEffect</code> 都返回了一个 unwatch 方法用于取消侦听</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="keyword">const</span> unWatch = Vue.watch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">    <span class="comment">// 取消侦听</span></span><br><span class="line">    unWatch()</span><br><span class="line">    <span class="keyword">const</span> unWatchEffect = Vue.watchEffect(<span class="function"><span class="params">()</span> =&gt;</span> &#123;&#125;)</span><br><span class="line">    <span class="comment">// 取消侦听</span></span><br><span class="line">    unWatchEffect()</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><h4 id="组合式函数"><a href="#组合式函数" class="headerlink" title="组合式函数"></a>组合式函数</h4><p>以前我们需要在组件之间共享代码时，一般使用 <code>mixins</code> 或作用域插槽。但它们都有一些硬伤：</p><ul><li><code>mixins</code> 多了之后变量会十分混乱，在引用文件中根本无法区分哪个变量或方法来自哪个 <code>mixins</code>。</li><li>作用域插槽没有变量混乱的问题，因为它的数据<strong>只能在模板中访问</strong>，但这恰好也是它的缺点。</li></ul><p>在 Vue3 中，我们配合<strong>组合式 API</strong>可以编写<strong>组合式函数</strong>，可以清楚地知道该变量来自哪个组合式函数。</p><p>下面是两个简单的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123;listLoading&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toggleLoading"</span>&gt;</span>改变状态<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    &#123;&#123;count&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"addCount"</span>&gt;</span>+1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// listLoading 状态的切换</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useToggleLoading</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> listLoading = Vue.ref(<span class="literal">false</span>)</span><br><span class="line">  <span class="keyword">const</span> toggleLoading = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    listLoading.value = !listLoading.value</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    listLoading,</span><br><span class="line">    toggleLoading</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// count 计数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">useAddCount</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> count = Vue.ref(<span class="number">0</span>)</span><br><span class="line">  <span class="keyword">const</span> addCount = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    count.value++</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    count,</span><br><span class="line">    addCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;</span><br><span class="line">  setup(props, context) &#123;</span><br><span class="line">    <span class="comment">// 来自 useToggleLoading</span></span><br><span class="line">    <span class="keyword">const</span> &#123; listLoading, toggleLoading &#125; = useToggleLoading()</span><br><span class="line">    <span class="comment">//来自 useAddCount</span></span><br><span class="line">    <span class="keyword">const</span> &#123; count, addCount &#125; = useAddCount()</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      listLoading,</span><br><span class="line">      toggleLoading,</span><br><span class="line">      count,</span><br><span class="line">      addCount</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-29-155-learn-vue3-22.gif" alt></p><p>Vue2 与 Vue3 的主要区别就写到这里，还有其他很多我觉得用得相对较少的 API 文章中就不多介绍。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://evolly.one/2021/01/28/154-learn-vue3-1/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue3.0 新特性学习（一）&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;setup&lt;/code&gt; 内部
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue3.0 新特性学习（一）</title>
    <link href="https://github.com/Tit1e/2021/01/28/154-learn-vue3-1/"/>
    <id>https://github.com/Tit1e/2021/01/28/154-learn-vue3-1/</id>
    <published>2021-01-28T12:13:08.000Z</published>
    <updated>2021-01-29T08:12:03.569Z</updated>
    
    <content type="html"><![CDATA[<p>Vue3 出来已经有一段时间了，昨天翻了一遍官方文档，今天尝试了一下，顺便做个与 Vue2 的差异记录。</p><p>关于 Vue3 包的体积，性能上的区别我就不再多说，因为这对我们使用者来说是没得选的，性能有提升更好，没提升之前 Vue2 的版本不也照样用嘛。所以这篇文章主要说开发体验上的区别。</p><h3 id="创建应用"><a href="#创建应用" class="headerlink" title="创建应用"></a>创建应用</h3><p>我们从创建应用说起，Vue2 使用的是 <code>new Vue</code> 的方式创建应用，而 Vue3 使用的是调用 Vue 实例上的  <code>Vue.createApp</code> 方法创建。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.x</span></span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  <span class="comment">//...options</span></span><br><span class="line">&#125;)</span><br><span class="line">vm.$mount(<span class="string">'#app'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.x</span></span><br><span class="line"><span class="keyword">const</span> vm = Vue.createApp(&#123;</span><br><span class="line">  <span class="comment">//...options</span></span><br><span class="line">&#125;)</span><br><span class="line">vm.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>Vue3 中一些全局的方法可以链式调用了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class="line">app.component(<span class="string">'component'</span>, component)</span><br><span class="line">  .directive(<span class="string">'directive'</span>, directive)</span><br><span class="line">  .use(plugin)</span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p><strong>⚠️注意别这么用：</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 错误用法</span></span><br><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;).mount(<span class="string">'#app'</span>)</span><br><span class="line">app.component(<span class="string">'component'</span>, component)</span><br><span class="line">  .directive(<span class="string">'directive'</span>, directive)</span><br><span class="line">  .use(plugin)</span><br></pre></td></tr></table></figure><p>因为 <code>moun</code> 返回的是<strong>根组件实例</strong>，而不是<strong>应用实例</strong>。</p><h4 id="扩展属性区别"><a href="#扩展属性区别" class="headerlink" title="扩展属性区别"></a>扩展属性区别</h4><p>Vue3 中 ，全局 confg 中新增了一个 globalProperties 属性，它是一个对象，对象里面的属性全局都可以访问到。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue2 中在 Vue 上挂载 axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line">Vue.prototype.$axios = axios</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3 中在 Vue 上挂载 axios</span></span><br><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class="line">app.config.globalProperties.$axios = axios</span><br></pre></td></tr></table></figure><h4 id="注册组件区别"><a href="#注册组件区别" class="headerlink" title="注册组件区别"></a>注册组件区别</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue2 中注册组件</span></span><br><span class="line">Vue.component(<span class="string">'component-name'</span>, &#123; ...options &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Vue3 中注册组件</span></span><br><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class="line">app.component(<span class="string">'component-name'</span>, &#123; ...options &#125;)</span><br></pre></td></tr></table></figure><p>Vue3 的组件注册方式解决了 Vue2 的全局组件污染问题。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">test</span>&gt;</span><span class="tag">&lt;/<span class="name">test</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Vue2</span></span><br><span class="line">Vue.component(<span class="string">'test'</span>,&#123;<span class="attr">template</span>: <span class="string">'&lt;div&gt;test-component&lt;/div&gt;'</span>&#125;)</span><br><span class="line"><span class="keyword">const</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app2'</span>,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-29-025748.png" alt></p><p>可以看到 <code>test</code> 组件只注册了一次，但是 <code>vm</code> 与 <code>vm2</code> 都可以使用 <code>test</code> 组件。这可能会不经意导致组件名称冲突组件被覆盖。</p><p>而 Vue3 则不会出现这种情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> app = Vue.createApp(&#123;&#125;)</span><br><span class="line">app.component(<span class="string">'test'</span>,&#123;<span class="attr">template</span>: <span class="string">'&lt;div&gt;app1&lt;/div&gt;'</span>&#125;)</span><br><span class="line">app.mount(<span class="string">'#app'</span>)</span><br><span class="line"><span class="keyword">const</span> app2 = Vue.createApp(&#123;&#125;)</span><br><span class="line">app2.component(<span class="string">'test'</span>,&#123;<span class="attr">template</span>: <span class="string">'&lt;div&gt;app2&lt;/div&gt;'</span>&#125;)</span><br><span class="line">app2.mount(<span class="string">'#app2'</span>)</span><br></pre></td></tr></table></figure><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-29-031004.png" alt></p><p><code>Vue.component</code> 只是一个代表，其实类似这样的 API，比如<code>Vue.directive</code>， <code>Vue.mixin</code> 都存在这样的问题。Vue3 已经全都规避掉了。</p><p><strong>接下来其实你完全可以按照 Vue2 的习惯来编写代码，Vue3 并没有抛弃 Vue2 的写法，不过有一点需要注意的是，Vue2 和 Vue3 的生命周期钩子有所区别：</strong></p><ul><li>Vue2 中的 <strong>beforeDestroy</strong> 变成了 <strong>beforeUnmount</strong></li><li>VUe2 中的 <strong>destroyed</strong> 变成了 <strong>unmounted</strong></li><li>Vue3 中新增了为了方便调试的 <strong>renderTracked</strong> 和 <strong>renderTriggered</strong> 钩子</li></ul><p><u><strong>还有个新特性，就是Vue3 终于不限制单一跟节点了！！！</strong></u></p><h3 id="组合式-API"><a href="#组合式-API" class="headerlink" title="组合式 API"></a>组合式 API</h3><p>Vue3 对开发者来说最大的区别应该就是 <strong>组合式 API</strong> 了吧（至少对我来说是的）。</p><h4 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h4><p>Vue3 中新增了一个 <code>setup()</code> 选项，官方文档上是这样定义它的：</p><blockquote><p>一个组件选项，在创建组件<strong>之前</strong>执行，一旦 <code>props</code> 被解析，并作为组合式 API 的入口点</p></blockquote><p><code>setup</code> 接受两个参数，第一个为 <code>props</code>， 第二个是 <code>context</code>，<code>props</code> 很好理解，这个 <code>context</code> 包含的内容我们打印看下：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-29-060904.png" alt></p><p><code>props</code> 解析后 <code>setup</code> 就会被调用，那么这么说来，它应该比 <strong>beforeCreate</strong> 钩子早执行，验证一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// html 省略</span></span><br><span class="line"><span class="keyword">const</span> vm = Vue.createApp(&#123;</span><br><span class="line">  setup(props, context)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">3</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  beforeCreate() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  created() &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="number">2</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line">vm.mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-28-130150.png" alt></p><p>没有猜错，早于 <strong>beforeCreate</strong> 钩子执行。</p><h4 id="在-setup-内部创建响应式数据"><a href="#在-setup-内部创建响应式数据" class="headerlink" title="在 setup 内部创建响应式数据"></a>在 setup 内部创建响应式数据</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;v&#125;&#125;&#123;&#123;c.a&#125;&#125;&#123;&#123;obj.a&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在 <code>setup</code> 内部<strong>使用或修改</strong>响应式数据，不能单纯地使用直接用变量名，而是需要用 <code>.value</code> 的方式取值。但是在外部使用的时候，Vue 会自动帮你展开，所以在模板或其他地方使用的时候，直接使用变量就行了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  setup()&#123;</span><br><span class="line">    <span class="comment">// 创建响应式数据</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 单个</span></span><br><span class="line">    <span class="keyword">const</span> v = Vue.ref(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(v.value) <span class="comment">// 0</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用 ref 创建的响应式对象</span></span><br><span class="line">    <span class="keyword">const</span> c = Vue.ref(&#123;<span class="attr">a</span>: <span class="number">1</span>&#125;)</span><br><span class="line">    <span class="built_in">console</span>.log(c.value.a) <span class="comment">// 1</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 响应式对象，外部可通过 obj.a 修改 obj的属性</span></span><br><span class="line">    <span class="keyword">const</span> obj = Vue.reactive(&#123;</span><br><span class="line">      a: <span class="number">1</span>,</span><br><span class="line">      b: <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      v,</span><br><span class="line">      c,</span><br><span class="line">      obj</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">    <span class="comment">// 修改 v 与 obj.a 的值</span></span><br><span class="line">    <span class="keyword">this</span>.v = <span class="number">3</span></span><br><span class="line">    <span class="keyword">this</span>.c.a = <span class="number">2</span></span><br><span class="line">    <span class="keyword">this</span>.obj.a = <span class="number">0</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Vue.createApp(options).mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>上面主要说的是 <strong>ref</strong> 与 <strong>reactive</strong>，下面说 <strong>toRef</strong> 与 <strong>toRefs</strong>。</p><p><strong>toRef</strong> 用于为为源响应式对象上的 property 新创建一个 <strong>ref</strong>。它接受两个参数，第一个是响应式对象，第二个是要提出来的属性名。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  setup()&#123;</span><br><span class="line">    <span class="keyword">const</span> obj = Vue.reactive(&#123;</span><br><span class="line">      a: <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> obja = Vue.toRef(obj, <span class="string">'a'</span>)</span><br><span class="line">    <span class="keyword">const</span> b_obja = obj.a</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      obj,</span><br><span class="line">      obja,</span><br><span class="line">      b_obja</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.obja)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.obj.a)</span><br><span class="line">    <span class="keyword">this</span>.obja = <span class="number">2</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.obja)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.obj.a)</span><br><span class="line">    <span class="keyword">this</span>.obj.a = <span class="number">3</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.obja)</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.obj.a)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">Vue.createApp(options).mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>运行结果：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-28-142417.png" alt></p><p>由此可见，虽然将 a 从 obj 中剥离了出来，但是它们之间还是保持着响应式连接，因此当改变 obja 或 obj.a 的值的时候，双方的值都会相应改变。</p><p><strong>toRefs</strong> 则是将一个响应式对象转换为普通对象，其中结果对象的每个属性都是指向原始对象相应属性的 ref。说白了就是 <strong>toRef</strong> 的一个批量快捷操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">  setup(props) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123;name, age&#125; = Vue.toRefs(props)</span><br><span class="line">    <span class="keyword">const</span> obj = Vue.reactive(&#123;</span><br><span class="line">      a: <span class="number">1</span>,</span><br><span class="line">      b: <span class="number">2</span></span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> b_obj = Vue.toRefs(obj)</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      ...b_obj, name, age, obj</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  created()&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a, <span class="keyword">this</span>.b, <span class="keyword">this</span>.name, <span class="keyword">this</span>.age, <span class="keyword">this</span>.obj)</span><br><span class="line">    <span class="keyword">this</span>.obj.a = <span class="number">3</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a, <span class="keyword">this</span>.obj.a)</span><br><span class="line">    <span class="keyword">this</span>.a = <span class="number">4</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.a, <span class="keyword">this</span>.obj.a)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在这传入 props</span></span><br><span class="line">Vue.createApp(options, &#123; <span class="attr">name</span>: <span class="string">'张三'</span>, <span class="attr">age</span>: <span class="number">3</span> &#125;).mount(<span class="string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>执行结果：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-28-144705.png" alt></p><p>可以看出 a 与 obj.a 也依旧保持着响应式连接。</p><p><a href="https://evolly.one/2021/01/29/155-learn-vue3-2/" target="_blank" rel="noopener">Vue3.0 新特性学习（二）</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Vue3 出来已经有一段时间了，昨天翻了一遍官方文档，今天尝试了一下，顺便做个与 Vue2 的差异记录。&lt;/p&gt;
&lt;p&gt;关于 Vue3 包的体积，性能上的区别我就不再多说，因为这对我们使用者来说是没得选的，性能有提升更好，没提升之前 Vue2 的版本不也照样用嘛。所以这篇文
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Mac 时间机器 Time Machine 备份提速</title>
    <link href="https://github.com/Tit1e/2021/01/26/153-time-machine-speed/"/>
    <id>https://github.com/Tit1e/2021/01/26/153-time-machine-speed/</id>
    <published>2021-01-26T11:36:42.000Z</published>
    <updated>2021-01-26T11:48:53.313Z</updated>
    
    <content type="html"><![CDATA[<p>Time Machine（时间机器）是 Mac 的一大杀器。它的存在让不少人的数据失而复得，但是备份的时候速度不是特别理想，特别是第一次备份或者很长一段时间没有备份，电脑中文件改动较多的时候。那有没有方法可以让传输速度变快点呢？当然是有的，打开终端，输入下面的命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl debug.lowpri_throttle_enabled=0</span><br></pre></td></tr></table></figure><p>要注意的是：</p><p><strong>1. 上面的命令只会加快备份文件传输至备份硬盘，并不会缩短时间机器分析文件、清理旧备份的时间。</strong></p><p><strong>2. 因为解除了限制，所以时间机器占用的资源、硬盘使用率会相应的升高，在此期间使用 Mac 可能会感觉到 Mac 变卡。</strong></p><p>所以最好空闲的时候解除限制，以免影响正常使用，备份完毕就关闭该模式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo sysctl debug.lowpri_throttle_enabled=1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Time Machine（时间机器）是 Mac 的一大杀器。它的存在让不少人的数据失而复得，但是备份的时候速度不是特别理想，特别是第一次备份或者很长一段时间没有备份，电脑中文件改动较多的时候。那有没有方法可以让传输速度变快点呢？当然是有的，打开终端，输入下面的命令：&lt;/p&gt;
      
    
    </summary>
    
    
      <category term="Mac" scheme="https://github.com/Tit1e/tags/Mac/"/>
    
      <category term="技巧" scheme="https://github.com/Tit1e/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Notion 分享页面使用自定义域名</title>
    <link href="https://github.com/Tit1e/2021/01/21/152-notion-custom-domain/"/>
    <id>https://github.com/Tit1e/2021/01/21/152-notion-custom-domain/</id>
    <published>2021-01-21T13:27:59.000Z</published>
    <updated>2021-01-21T14:17:15.258Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.notion.so/" target="_blank" rel="noopener">Notion</a> 近几年突然火了起来，我也试用了一下，的确非常厉害，但是对我来说好像过于笨重，all in one 是它的优点，也是它的缺点。它的特点我就不过多介绍了，网上一搜一大堆，因为它天生的模块化与自适应的特点，很多人直接使用它来作为博客，但是有个缺点，就是域名只能使用官方的 notion.so，官方说日后会支持自定义域名，不过现在不是还没出来么，所以先自己折腾一下，网上搜了一圈，终于搞定了，记录一下：</p><p>用的方案是使用 <a href="https://dash.cloudflare.com/" target="_blank" rel="noopener">Cloudflare</a> 的 Web Workers 为 Notion 的 HTTP 请求进行手动改写。</p><p>首先我们需要将域名的域名服务器设置为 Cloudflare 的域名服务器，这样就可以使用 Cloudflare 的 DNS 服务了。</p><p>注册 Cloudflare ，然后在这里添加自己的域名：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-21-134634.png" alt></p><p>添加后下方就会显示已添加的域名，点击已添加的域名进入设置页面。</p><p>切换到 dns 页面，添加一条 CNAME 记录，如果你自己的二级域名为 blog.xxx.com，那么名称那就填 blog，目标填 Notion 的域名，保存。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-21-134938.png" alt></p><p>在这个页面的下方有 <strong>Cloudflare 名称服务器</strong></p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-21-135438.png" alt></p><p>我们需要把原本的域名服务器替换为这个，我的域名服务商为 <a href="https://sg.godaddy.com/zh" target="_blank" rel="noopener">godaddy</a>，在 DNS 管理页面会有设置域名服务器的入口，设置好就可以了。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-21-135559.png" alt></p><p>设置完后我们回到 Cloudflare，切换到 Workers。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-21-135710.png" alt></p><p>点击管理 Workers。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-21-135820.png" alt></p><p>创建 Worker。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-21-135920.png" alt></p><p>然后打开 <a href="https://fruitionsite.com/" target="_blank" rel="noopener">https://fruitionsite.com</a>，按图片填上信息，然后一键复制代码。这位老哥的页面其实也是 Notion 的公开页。</p><p>使用这个脚本是因为它生成的脚本访问自定义域名的时候不会有后缀，我一开始找的脚本在访问自己的域名时，后面还有一串后缀。用这个就不会有。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-21-140400.png" alt></p><p>打个岔，Notion 地址获取方法：</p><p><img src="/Users/tit1e/Library/Application Support/typora-user-images/image-20210121220539670.png" alt="image-20210121220539670"></p><p>然后将复制的脚本代码粘贴到创建的 Worker 中，部署并保存。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-21-140814.png" alt></p><p>然后回到 Workers 页面，添加路由。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-21-140913.png" alt></p><p>按下图填写，保存。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-21-141119.png" alt></p><p>这时候你再去访问自己的域名，看到的就是你 Notion 的页面了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.notion.so/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Notion&lt;/a&gt; 近几年突然火了起来，我也试用了一下，的确非常厉害，但是对我来说好像过于笨重，all in one 是它的优点，也是它的缺点。
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>el-table 自定义 header 中 el-input 绑定失效问题</title>
    <link href="https://github.com/Tit1e/2021/01/16/151-el-table-header/"/>
    <id>https://github.com/Tit1e/2021/01/16/151-el-table-header/</id>
    <published>2021-01-16T05:19:31.000Z</published>
    <updated>2021-01-16T06:41:15.909Z</updated>
    
    <content type="html"><![CDATA[<p>之前有个需要在 element 的 table 的表头进行搜索，这个例子在 element 的文档上是有的，所以我写的时候也就没想太多，直接就按着官网上的例子写，代码很简单，类似这样：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">"name"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">"header"</span> <span class="attr">slot-scope</span>=<span class="string">"scope"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span></span></span><br><span class="line"><span class="tag"><span class="attr">v-model</span>=<span class="string">"search"</span></span></span><br><span class="line"><span class="tag"><span class="attr">size</span>=<span class="string">"mini"</span></span></span><br><span class="line"><span class="tag"><span class="attr">placeholder</span>=<span class="string">"输入关键字搜索"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br></pre></td></tr></table></figure><p>但是因为我开了 eslint，上面我写了 <code>slot-scope=&quot;scope&quot;</code> 但是下面我并没有用到 scope ，所以编辑器就有波浪线提醒我，我看着别扭，并且想着这行代码删了应该也没有影响，因为 search 是现在当前页面的，于是就把这段代码删了，然后去测试，结果发现文字怎么也输入不上去，而且控制台也不报错，我仔仔细细看了一遍，看是不是拼写什么的有没有问题，但一圈检查下来发现也没问题。</p><p>最后我只能跟官网的代码去对比，发现差了 <code>slot-scope=&quot;scope&quot;</code> 这个属性，我把这个属性加上，果然就正常了。</p><p>查看 <a href="https://evolly.one/demos/151-el-table-header/" target="_blank" rel="noopener">demo</a>。</p><p>翻阅了element 跟 vue 的文档也并没有这方面的说明。因为之前也在 slot 中写过类似功能的代码，但是并没有出什么问题，因为代码中用到的绑定值，要筛选的列表值都是定义在当前页面并且完全没有用到 scope 中的值。所以原因我目前也还不知道，只能先把这个坑记录下来。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前有个需要在 element 的 table 的表头进行搜索，这个例子在 element 的文档上是有的，所以我写的时候也就没想太多，直接就按着官网上的例子写，代码很简单，类似这样：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
      <category term="element" scheme="https://github.com/Tit1e/tags/element/"/>
    
  </entry>
  
  <entry>
    <title>计算不透明度对应的十六进制数值</title>
    <link href="https://github.com/Tit1e/2021/01/15/150-compute-opacity/"/>
    <id>https://github.com/Tit1e/2021/01/15/150-compute-opacity/</id>
    <published>2021-01-15T13:49:49.000Z</published>
    <updated>2021-01-27T10:07:50.899Z</updated>
    
    <content type="html"><![CDATA[<p>最近在写钉钉小程序，过程中遇到了不少的坑，不过坑后面再总结，今天要讲的是关于十六进制透明度计算。</p><p>在这次的设计稿上我发现了这样的 <code>tag</code> 样式：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-15-140059.png" alt></p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-15-140134.png" alt></p><p>其实一眼就能看出来实现的思路，背景色其实就是跟着文字的颜色做个淡化。</p><p>封装组件的话，主要思路就是：写个 <code>&lt;view&gt;</code>，然后留个 <code>&lt;slot&gt;</code> 插槽用于传入文本，然后写一些样式，最后有个 <code>prop</code> 用于接受一个颜色值，给文字直接设置传入的颜色，然后给 <code>tag</code> 背景色设一个传入颜色一定透明度的色值。我的设计稿中，这个不透明度为 10%。</p><p>主要问题是：<strong>这个一定透明度的色值怎么计算？</strong></p><p>首先，前端的颜色格式有两种，一种是 RGB 格式：rgb(255, 255, 255)；另一种是十六进制：#ffffff。</p><p>如果给这两种颜色加上透明度，那么 RGB 格式的会变成 rgba(255, 255, 255, 1)，这个 a 就是 alpha 通道，用于设置颜色的透明度，1表示完全不透明，0表示完全透明；</p><p>十六进制的颜色就会变成：#ffffffff，最后会多出两位，ff表示完全不透明，00表示完全透明。</p><p>从上面可以看出多了一个透明度后两种色值的变化：</p><ol><li>RGB 格式的颜色从 <code>rgb</code> 变成了 <code>rgba</code>，然后括号里多了一个透明度参数。</li><li>十六进制则是在最后多了两位。</li></ol><p>知道区别后，对颜色处理就方便了：</p><p>RGB 格式的颜色可以直接用字符串替换或者指定位置插入字符串的方式将 <code>rgb</code> 转为 <code>rgba</code>。</p><p>十六进制的转换相对来说没有那么直观，但是也并不复杂：</p><p>首先我们要指定颜色的<strong>不透明度</strong>，注意是不透明度，不是透明度，css 中有一个 <code>opacity</code> 属性，就是不透明度的意思，如果你初始为透明度，那么需要先转换成不透明度，这个很简单，如果是0 - 1之间的数值，那么<code>1 - 透明度 = 不透明度</code>，如果是 0 - 100之间的数，那么就是 <code>100 - 透明度 = 不透明度</code>。</p><p>十六进制的透明度范围并不是 0 - 1 或 0 - 100，而是 00 - ff，用十六进制表示就是 0 - 255，到这里其实就有思路了，将不透明度 * 十进制下的十六进制完全不透明的值，再将结果转成十六进制，拼接到色值最后不就行了吗？</p><p>于是就有了下面的函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 此方法只对十六进制色值有效</span></span><br><span class="line"><span class="comment">// color 为十六进制色值</span></span><br><span class="line"><span class="comment">// opacity 需传入0-1之间的数值</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">computeColor</span>(<span class="params">color, opacity</span>) </span>&#123;</span><br><span class="line"><span class="comment">// 0 和 1 可以单独进行处理</span></span><br><span class="line"><span class="comment">// 当然想要函数更健壮还可以对传入的参数进行校验，我这里就不写了</span></span><br><span class="line"><span class="keyword">if</span>(+opacity === <span class="number">0</span>) <span class="keyword">return</span> color + <span class="string">'00'</span></span><br><span class="line"><span class="keyword">if</span>(+opacity === <span class="number">1</span>) <span class="keyword">return</span> color + <span class="string">'ff'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 转十六进制时必须为数字，所以用 + 转成数字类型</span></span><br><span class="line"><span class="keyword">const</span> num = +<span class="built_in">Math</span>.floor(<span class="number">255</span> * opacity);</span><br><span class="line"><span class="comment">// 将十进制转为十六进制</span></span><br><span class="line"><span class="keyword">const</span> ff = num.toString(<span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 拼接不透明度至末尾</span></span><br><span class="line"><span class="keyword">return</span> color + ff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>另外这里也放上 RGB 与十六进制颜色互转的方法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// rgb 转 十六进制颜色</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">colorHex</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> that = color;</span><br><span class="line">  <span class="comment">//十六进制颜色值的正则表达式</span></span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^#([0-9a-fA-f]&#123;3&#125;|[0-9a-fA-f]&#123;6&#125;)$/</span>;</span><br><span class="line">  <span class="comment">// 如果是rgb颜色表示</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="regexp">/^(rgb|RGB)/</span>.test(that)) &#123;</span><br><span class="line">    <span class="keyword">const</span> aColor = that.replace(<span class="regexp">/(?:\(|\)|rgb|RGB)*/g</span>, <span class="string">""</span>).split(<span class="string">","</span>);</span><br><span class="line">    <span class="keyword">let</span> strHex = <span class="string">"#"</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; aColor.length; i++) &#123;</span><br><span class="line">      <span class="keyword">let</span> hex = <span class="built_in">Number</span>(aColor[i]).toString(<span class="number">16</span>);</span><br><span class="line">      <span class="keyword">if</span> (hex.length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        hex = <span class="string">"0"</span> + hex;</span><br><span class="line">      &#125;</span><br><span class="line">      strHex += hex;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (strHex.length !== <span class="number">7</span>) &#123;</span><br><span class="line">      strHex = that;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> strHex;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (reg.test(that)) &#123;</span><br><span class="line">    <span class="keyword">const</span> aNum = that.replace(<span class="regexp">/#/</span>, <span class="string">""</span>).split(<span class="string">""</span>);</span><br><span class="line">    <span class="keyword">if</span> (aNum.length === <span class="number">6</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> that;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aNum.length === <span class="number">3</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> numHex = <span class="string">"#"</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; aNum.length; i += <span class="number">1</span>) &#123;</span><br><span class="line">        numHex += aNum[i] + aNum[i];</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> numHex;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> that;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 十六进制颜色转 RGB</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">colorRgb</span>(<span class="params">color</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sColor = color.toLowerCase();</span><br><span class="line">  <span class="comment">//十六进制颜色值的正则表达式</span></span><br><span class="line">  <span class="keyword">const</span> reg = <span class="regexp">/^#([0-9a-fA-f]&#123;3&#125;|[0-9a-fA-f]&#123;6&#125;)$/</span>;</span><br><span class="line">  <span class="comment">// 如果是16进制颜色</span></span><br><span class="line">  <span class="keyword">if</span> (sColor &amp;&amp; reg.test(sColor)) &#123;</span><br><span class="line">    <span class="keyword">if</span> (sColor.length === <span class="number">4</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> sColorNew = <span class="string">"#"</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">4</span>; i += <span class="number">1</span>) &#123;</span><br><span class="line">        sColorNew += sColor.slice(i, i + <span class="number">1</span>).concat(sColor.slice(i, i + <span class="number">1</span>));</span><br><span class="line">      &#125;</span><br><span class="line">      sColor = sColorNew;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//处理六位的颜色值</span></span><br><span class="line">    <span class="keyword">const</span> sColorChange = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; <span class="number">7</span>; i += <span class="number">2</span>) &#123;</span><br><span class="line">      sColorChange.push(<span class="built_in">parseInt</span>(<span class="string">"0x"</span> + sColor.slice(i, i + <span class="number">2</span>)));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"RGB("</span> + sColorChange.join(<span class="string">","</span>) + <span class="string">")"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sColor;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在写钉钉小程序，过程中遇到了不少的坑，不过坑后面再总结，今天要讲的是关于十六进制透明度计算。&lt;/p&gt;
&lt;p&gt;在这次的设计稿上我发现了这样的 &lt;code&gt;tag&lt;/code&gt; 样式：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://personal-1251959693
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="css" scheme="https://github.com/Tit1e/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>js 使用 dispatchEvent 主动触发事件</title>
    <link href="https://github.com/Tit1e/2021/01/13/149-js-dispatchEvent/"/>
    <id>https://github.com/Tit1e/2021/01/13/149-js-dispatchEvent/</id>
    <published>2021-01-13T13:26:33.000Z</published>
    <updated>2021-01-13T14:44:55.928Z</updated>
    
    <content type="html"><![CDATA[<p>首先方放上 MDN 文档：</p><blockquote><p>MDN：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent" target="_blank" rel="noopener">EventTarget.dispatchEvent</a></p></blockquote><p>事情是这样的，前几天老大提了个需求，公司业务系统上有个地方需要录入带圈的数字：①②③④⑤⑥⑦⑧⑨。但这这个这种数字对于计算机水平不一的录入人员来说，有的人根本不知道怎么输入，于是老大要我做个快捷的录入方式，在页面上放一排按钮，用户点击按钮就可以把对应数组插入到光标所在的位置。</p><p>在做这个需求的过程中我就发现了两个问题：</p><ol><li>直接改变 input、textarea 的 value 值，会造成 value 与 v-model 的值不同步。</li><li>el-input 的一个坑，就是改变 el-input 的 value 在视图上会更新，但实际的 v-model 绑定的值并不会更新。</li></ol><p>后来发现只要在改变完值之后再手动改变一下输入框中的内容就没问题了，比如打个空格。</p><p>但是这个步骤肯定不能让用户来做，所以就需要用到 dispatchEvent 这个东西了。</p><p>使用很简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> el = <span class="built_in">document</span>.querySelector(<span class="string">'#elInput'</span>)</span><br><span class="line"><span class="keyword">var</span> event = <span class="keyword">new</span> InputEvent(<span class="string">'input'</span>)</span><br><span class="line">el.dispatchEvent(event)</span><br></pre></td></tr></table></figure><p>查看 <a href="https://evolly.one/demos/149-dispatchEvent/" target="_blank" rel="noopener">demo</a>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先方放上 MDN 文档：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;MDN：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/EventTarget/dispatchEvent&quot; target=&quot;_blank
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="js" scheme="https://github.com/Tit1e/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Alfred 运行终端命令升级版</title>
    <link href="https://github.com/Tit1e/2021/01/12/148-Alfred-run-bash/"/>
    <id>https://github.com/Tit1e/2021/01/12/148-Alfred-run-bash/</id>
    <published>2021-01-12T11:59:09.000Z</published>
    <updated>2021-01-13T12:51:48.423Z</updated>
    
    <content type="html"><![CDATA[<p>之前我写过一篇有关 Alfred 运行命令行的文章：<a href="https://evolly.one/2019/04/04/62-alfred-workflow/" target="_blank" rel="noopener">Mac 使用 Alfred 执行终端命令</a>，用之前的方法日常使用也并没有问题。但是我心里一直有一个不爽的地方，就是按之前的方法执行命令，执行期间会先打开一个终端窗口，然后执行完了终端窗口才会关闭，当然关闭也是自己写的命令，否则执行完窗口会留在桌面。不过有窗口有一个好处就是如果报错了，错误会直接显示在窗口上，如果后台执行，我就不知道到底是为什么执行失败了。但是我依旧还是想要后台运行。</p><p>今天在装一个 workflow 的时候我突然发现它可以通过 bash 运行 <code>.py</code> 文件，而且它是静默运行的，这我就奇了怪了，能运行 <code>.py</code> 那肯定也能运行 <code>.sh</code> 啊，不然没道理。然后经过我一番折腾，终于成功静默运行了终端命令。</p><p>初始创建命令的步骤我就不再复述，有需要可以去看我之前的文章，里面已经作了说明：<a href="https://evolly.one/2019/04/04/62-alfred-workflow/" target="_blank" rel="noopener">Mac 使用 Alfred 执行终端命令</a>。</p><p>创建完之后界面上应该是这个样子，<strong>注意红色方框处</strong></p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-12-122812.png" alt></p><p>按之前的方式，我会在这个方框处右键把它替换成 Terminal Command 模式，而现在，我们不需要改变它，就用 Run Script 模式。</p><p>接下来有两种来运行命令：</p><h3 id="1-直接运行命令"><a href="#1-直接运行命令" class="headerlink" title="1. 直接运行命令"></a>1. 直接运行命令</h3><p>双击 Run Script 可直接编写命令。不过编写命令前需要做一个准备工作，也是最关键的一个步骤，否则命令是无法执行的。</p><p>打开终端，在终端中运行 <code>echo $PATH</code>，复制打印出来的一长串字符。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-12-123702.png" alt></p><p>然后开始编辑脚本：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-12-132102.png" alt></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PATH=<span class="string">"替换成你复制出来的字符串"</span></span><br><span class="line"><span class="comment">#在这里你就可以开始编写自己的脚本了</span></span><br><span class="line"><span class="comment">#如果需要传参，那顶部中间的下拉框就选择【width input as &#123;query&#125;】</span></span><br><span class="line"><span class="built_in">cd</span> ~/Document/xxx &amp;&amp; <span class="built_in">echo</span> <span class="string">'&#123;query&#125;'</span></span><br></pre></td></tr></table></figure><p>保存，然后使用热键处罚就会执行了。</p><h3 id="2-编写-sh脚本文件，然后通过运行脚本文件执行命令"><a href="#2-编写-sh脚本文件，然后通过运行脚本文件执行命令" class="headerlink" title="2. 编写 .sh脚本文件，然后通过运行脚本文件执行命令"></a>2. 编写 .sh脚本文件，然后通过运行脚本文件执行命令</h3><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-12-132151.png" alt></p><p>两种方式没太大区别，，这种方式主要要注意的有两点：</p><ol><li>.sh 文件的执行权限</li><li>参数的传递获取方式</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">PATH=<span class="string">"替换成你复制出来的字符串"</span></span><br><span class="line">terminal-notifier -message <span class="string">"<span class="variable">$1</span>"</span> -title <span class="string">"Message"</span></span><br></pre></td></tr></table></figure><p>上面脚本的作用是会弹出一个通知，标题是 Message，内容是 <code>$1</code>，这个 <code>$1</code> 就是上面图中运行时传入的 <code>{query}</code>。不了解的可以看这里的资料：<a href="https://www.runoob.com/linux/linux-shell-passing-arguments.html" target="_blank" rel="noopener">Shell 传递参数</a>。</p><p>在编辑器新建一个文件，输入好脚本，先保存至你能找到的地方。然后打开 workflow 所在文件夹位置。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-12-132256.png" alt></p><p>将保存的脚本文件复制到文件夹中</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-12-130247.png" alt></p><p>然后打开终端，输入 <code>chmod 777</code>，再将脚本文件拖入终端，命令中会自动填入路径，enter。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-12-130345.png" alt></p><p>最终效果：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-12-%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B6%202021-01-12%2021.07.56.mov.gif" alt></p><h2 id="2021-年-1-月-13-日更新"><a href="#2021-年-1-月-13-日更新" class="headerlink" title="2021 年 1 月 13 日更新"></a>2021 年 1 月 13 日更新</h2><p>我在工作中经常用 workflow 做一些项目的打包更新操作，然后我就优化了一下流程，其实主要是记录下 shell 中对 git 状态的一些判断：</p><h4 id="判断本地的分支版本跟远程跟踪的版本是否一致"><a href="#判断本地的分支版本跟远程跟踪的版本是否一致" class="headerlink" title="判断本地的分支版本跟远程跟踪的版本是否一致"></a>判断本地的分支版本跟远程跟踪的版本是否一致</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">PATH="替换成你复制出来的字符串"</span><br><span class="line"></span><br><span class="line">LOCAL=$(git log 你本地的分支名 -n 1 --pretty=format:"%H")</span><br><span class="line">REMOTE=$(git log remotes/origin/你要比较的分支名 -n 1 --pretty=format:"%H")</span><br><span class="line"></span><br><span class="line">if [ $LOCAL = $REMOTE ]</span><br><span class="line">then</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一致时候的操作</span></span><br><span class="line">else</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 不一致时候的操作</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="判断是否有未暂存的文件"><a href="#判断是否有未暂存的文件" class="headerlink" title="判断是否有未暂存的文件"></a>判断是否有未暂存的文件</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">PATH="替换成你复制出来的字符串"</span><br><span class="line"></span><br><span class="line">if [[ -z $(git status -s) ]]</span><br><span class="line">then</span><br><span class="line"><span class="meta">#</span><span class="bash"> 文件都已暂存时候的操作</span></span><br><span class="line">else</span><br><span class="line"><span class="meta">#</span><span class="bash"> 有未暂存文件时候的操作</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h4 id="shell-命令分隔符的区别"><a href="#shell-命令分隔符的区别" class="headerlink" title="shell 命令分隔符的区别"></a>shell 命令分隔符的区别</h4><p>直接在linux命令行中可以依次执行多个命令，多个命令间可采用 <code>;</code>、<code>&amp;&amp;</code> 和 <code>||</code> 分割，三个分隔符作用不同：</p><ol><li><p><code>;</code> 分割符：前后命令间没有必然的联系，前一个执行结束后、再执行第二个，没有逻辑关联；</p></li><li><p><code>&amp;&amp;</code> 分隔符：前后命令有逻辑关联，后面的命令是否执行取决于前面的命令是否执行成功，前者执行成功，才会执行后面的命令。</p></li><li><p><code>||</code> 分隔符：前后命令有逻辑关联，与 <code>&amp;&amp;</code> 相反，前面的命令执行失败后才能执行后面的命令。</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前我写过一篇有关 Alfred 运行命令行的文章：&lt;a href=&quot;https://evolly.one/2019/04/04/62-alfred-workflow/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Mac 使用 Alfred 执行终端命令
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="mac" scheme="https://github.com/Tit1e/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>将本地某个文件夹备份或同步至群晖</title>
    <link href="https://github.com/Tit1e/2021/01/11/147-nas-sync/"/>
    <id>https://github.com/Tit1e/2021/01/11/147-nas-sync/</id>
    <published>2021-01-11T12:33:28.000Z</published>
    <updated>2021-01-12T08:03:42.738Z</updated>
    
    <content type="html"><![CDATA[<p>在最近一次时间机器备份的时候，突然想到我电脑中的 Lightroom 的备份，用时间机器备份不现实，由于我有一个群晖，就想着用它应该可以实现备份，毕竟这不是本来就是群晖的一个卖点么？</p><p>经过一番还算顺利的折腾之后，功能实现了，但是我的 Lightroom目录没了，也就是之前调好的照片配置全没了，我只把之前的照片导出备份了一份，还是有点心痛，我之前整理可是花了好大力气。</p><p>下面是经过：</p><h3 id="1-建立备份空间，开启共性"><a href="#1-建立备份空间，开启共性" class="headerlink" title="1. 建立备份空间，开启共性"></a>1. 建立备份空间，开启共性</h3><p>首先是分配一个空间，这个使用群晖的肯定都知道，不然东西往哪存？</p><p>然后打开 <strong>Synology Drive 管理控制台</strong>，左侧切换到 <strong>团队文件夹</strong> 标签，选择你要开启共享的目录，然后点击上方的【启用】按钮。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-11-Xnip2021-01-10_17-04-37.png" alt></p><h3 id="2-下载安装-Synology-Drive-客户端"><a href="#2-下载安装-Synology-Drive-客户端" class="headerlink" title="2. 下载安装 Synology Drive 客户端"></a>2. 下载安装 Synology Drive 客户端</h3><p>接下来去群晖官方的<a href="https://www.synology.cn/zh-cn/support/download/DS218play#utilities" target="_blank" rel="noopener"><strong>下载中心</strong></a>下载<strong>与你群晖型号匹配的 Synology Drive Client 客户端</strong>，下载后安装。</p><h3 id="3-设置"><a href="#3-设置" class="headerlink" title="3. 设置"></a>3. 设置</h3><p>我用的的是 Mac，所以我用 Mac 版的客户端做讲解，Windows的版本应该也差不多。</p><p>运行软件，点击【立即开始】后会出现任务类型选择界面：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-11-Xnip2021-01-10_16-29-14.png" alt></p><p>以我的理解，这两种任务的区别在于：</p><ul><li><p>同步任务是双向的，你在群晖添加或删除文件，会同步至你本地电脑，你本地电脑删除文件群晖上也会删除相应文件，就像各种在线网盘的共享文件夹。</p></li><li><p>而备份任务是单向的，群晖只会把你本地硬盘的文件同步至群晖，同步完后，你在群晖上删除文件也不会影响你本地的文件。</p></li></ul><p>我选择的是同步任务。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-11-Xnip2021-01-10_16-29-45.png" alt></p><p>软件会要求你输入地址跟账号密码，因为我自己只打算定期在家里（还不是群晖官方的速度太慢了）备份下照片，所以我用的局域网地址。点击地址右侧的放大镜会自动搜索局域网内的设备。当然你也可以输入 <code>quickconnect.cn</code> 域名的地址，白群晖应该每人都有一个，但速度感人。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-11-Xnip2021-01-10_16-29-57.png" alt></p><p>我就不用 quickconnect 了，点击【现在不要】。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-11-Xnip2021-01-10_16-30-07.png" alt></p><p>这个警告可能是因为我用的局域网地址，局域网地址是 http 的，而我输账号密码的地方又勾选了【启用 SSL 数据传输加密】导致的，点击【仍然继续】。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-11-Xnip2021-01-10_16-30-17.png" alt></p><p>然后就到了配置同步文件夹的步骤，鼠标放上去在右侧会显示编辑按钮，分别选择本地与群晖上要同步的目录。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-11-Xnip2021-01-10_16-31-06.png" alt></p><p>选择本地文件夹的时候有个要注意的点，就是那个复选框的项，如果勾选了【创建空 SynologyDrive 文件夹】，那么按我图上的配置来说，最后它会在我的 Lightroom Photos 文件夹下再创建一个 SynologyDrive 文件夹，放到这个文件夹中的文件才会被同步，而我想要的是同步 Lightroom Photos 文件夹中的文件，所以我在选择的时候需要把这个勾去掉。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-11-Xnip2021-01-10_16-31-28.png" alt></p><p>这个好像是共同协作用的，我也没怎么研究，感觉用不到，就选择了【稍后再说】，点击【完成】。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-11-Xnip2021-01-10_16-31-46.png" alt></p><p>然后任务列表就出现了刚添加的任务，稍等一会儿就会发现在软件正在同步了。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-11-132134.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在最近一次时间机器备份的时候，突然想到我电脑中的 Lightroom 的备份，用时间机器备份不现实，由于我有一个群晖，就想着用它应该可以实现备份，毕竟这不是本来就是群晖的一个卖点么？&lt;/p&gt;
&lt;p&gt;经过一番还算顺利的折腾之后，功能实现了，但是我的 Lightroom目录没了
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="nas" scheme="https://github.com/Tit1e/tags/nas/"/>
    
  </entry>
  
  <entry>
    <title>Vue 项目新增 PWA 支持初次尝试</title>
    <link href="https://github.com/Tit1e/2021/01/10/146-vue-pwa/"/>
    <id>https://github.com/Tit1e/2021/01/10/146-vue-pwa/</id>
    <published>2021-01-10T11:21:09.000Z</published>
    <updated>2021-01-21T13:26:15.547Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子制作了我的个人摄影网站 <a href="https://album.animalcrossing.life/" target="_blank" rel="noopener">Tit1e’s Photo Studio</a>。由于是网站，因此每次访问的时候总是有些麻烦，虽然现在移动端已经可以把书签添加至桌面，但是打开的时候依旧是浏览器的界面，丑丑的工具栏跟地址栏依旧显示在界面上，而且把书签添加到桌面这种操作也太没技术含量了，于是我想到了 PWA。这玩意儿我一直在用，但是自己从来没实践过，于是正好趁着这个机会实践一番，项目本身很简单，拿来试手正好。</p><p>我这个项目改造很简单，添加 PAW 插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果没装脚手架，那需要先安装一下 vue-cli</span></span><br><span class="line">vue add pwa</span><br></pre></td></tr></table></figure><p>但是我执行这一步的时候报错了，原因是因为 node 版本过低，依赖冲突。我原本使用的是 9.6 版本的 node，不行。又换了 11.8 的版本，依旧冲突。最后我直接使用了最新的 15.5.1 的版本。</p><p>执行完成后，你的项目中会多出一些文件。</p><p>首先修改 vue.config.js，在配置文件中新增下列配置项：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  pwa: &#123;</span><br><span class="line">    manifestOptions: &#123;</span><br><span class="line">      short_name: <span class="string">"Title's Album"</span>, <span class="comment">// 名称缩写</span></span><br><span class="line">      name: <span class="string">"Title's Album"</span>, <span class="comment">// 全名</span></span><br><span class="line">      start_url: <span class="string">"index.html"</span>, <span class="comment">// 启动页面</span></span><br><span class="line">      display: <span class="string">"standalone"</span>, <span class="comment">// 启动过渡动画</span></span><br><span class="line">      background_color: <span class="string">"#1f212b"</span>, <span class="comment">// 背景颜色</span></span><br><span class="line">      theme_color: <span class="string">"#1f212b"</span> <span class="comment">// 主题颜色</span></span><br><span class="line">    &#125;,</span><br><span class="line">    iconPaths: &#123;</span><br><span class="line">      favicon32: <span class="string">'icon.png'</span>,</span><br><span class="line">      favicon16: <span class="string">'icon.png'</span>,</span><br><span class="line">      appleTouchIcon: <span class="string">'icon.png'</span>,</span><br><span class="line">      maskIcon: <span class="string">'icon.png'</span>,</span><br><span class="line">      msTileImage: <span class="string">'icon.png'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>icon.png 就是之后添加到桌面后的图标，放置位置在 public 目录下。</p><p>然后在 <code>public/index.html</code> 的 <code>header</code> 中加入 <code>&lt;meta name=&quot;theme-color&quot; content=&quot;#1f212b&quot;&gt;</code>。</p><p>在 src 目录下新建 <code>service-worker.js</code> 文件：</p><p>下面的代码来自网上，我目前还不是很明白里面的缓存机制，如果不建这个文件，打包的时候 Vue 会自行生成一个 <code>service-worker.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">importScripts(<span class="string">"https://storage.googleapis.com/workbox-cdn/releases/4.3.1/workbox-sw.js"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">workbox.core.setCacheNameDetails(&#123;</span><br><span class="line">  prefix: <span class="string">'photo-album'</span>,</span><br><span class="line">  suffix: <span class="string">'v1.1.1'</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">workbox.core.skipWaiting(); <span class="comment">// 强制等待中的 Service Worker 被激活</span></span><br><span class="line">workbox.core.clientsClaim(); <span class="comment">// Service Worker 被激活后使其立即获得页面控制权</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存web的css资源</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  <span class="comment">// Cache CSS files</span></span><br><span class="line">  /.*\.css/,</span><br><span class="line">  <span class="comment">// 使用缓存，但尽快在后台更新</span></span><br><span class="line">  workbox.strategies.staleWhileRevalidate(&#123;</span><br><span class="line">    <span class="comment">// 使用自定义缓存名称</span></span><br><span class="line">    cacheName: <span class="string">'css-cache'</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存web的js资源</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  <span class="comment">// 缓存JS文件</span></span><br><span class="line">  /.*\.js/,</span><br><span class="line">  <span class="comment">// 使用缓存，但尽快在后台更新</span></span><br><span class="line">  workbox.strategies.staleWhileRevalidate(&#123;</span><br><span class="line">    <span class="comment">// 使用自定义缓存名称</span></span><br><span class="line">    cacheName: <span class="string">'js-cache'</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存web的图片资源</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /\.(?:png|gif|jpg|jpeg|svg)$/,</span><br><span class="line">  workbox.strategies.staleWhileRevalidate(&#123;</span><br><span class="line">    cacheName: <span class="string">'images'</span>,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> workbox.expiration.Plugin(&#123;</span><br><span class="line">        maxEntries: <span class="number">60</span>,</span><br><span class="line">        maxAgeSeconds: <span class="number">30</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> <span class="comment">// 设置缓存有效期为30天</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们很多资源在其他域名上，比如cdn、oss等，这里做单独处理，需要支持跨域</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  /^https:\/\/cdn\.my\.com\/.*\.(jpe?g|png|gif|svg)/,</span><br><span class="line">  workbox.strategies.staleWhileRevalidate(&#123;</span><br><span class="line">    cacheName: <span class="string">'cdn-images'</span>,</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="keyword">new</span> workbox.expiration.Plugin(&#123;</span><br><span class="line">        maxEntries: <span class="number">60</span>,</span><br><span class="line">        maxAgeSeconds: <span class="number">5</span> * <span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> <span class="comment">// 设置缓存有效期为5天</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ],</span><br><span class="line">    fetchOptions: &#123;</span><br><span class="line">      credentials: <span class="string">'include'</span> <span class="comment">// 支持跨域</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 缓存 list 请求的数据</span></span><br><span class="line">workbox.routing.registerRoute(</span><br><span class="line">  <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">'https://xxxxx'</span>),</span><br><span class="line">  workbox.strategies.networkFirst(&#123;</span><br><span class="line">    cacheName: <span class="string">'list'</span></span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">workbox.precaching.precacheAndRoute(self.__precacheManifest || []);</span><br></pre></td></tr></table></figure><p>然后打包部署就可以了。</p><p>扫码体验：</p><p><img src="https://photo-album-1251959693.cos.ap-nanjing.myqcloud.com/photo-album-qrcode.png" alt></p><p>然后打开浏览器，找到【添加到主屏幕】（我用的 iOS，安卓应该也有类似的功能）</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-10-IMG_7636.PNG?imageMogr2/thumbnail/!40p" alt></p><p>访问效果：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2021-01-10-IMG_7637.PNG?imageMogr2/thumbnail/!40p" alt></p><p>这只是一次 PWA 的简单尝试，实际项目中情况会比这个复杂得多，日后有机会再深入。</p><p>既然用到了 PWA，我又想到了 Vue 的 SSR，服务器端渲染我也没有接触过，后面有机会我再把项目改造一番。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前阵子制作了我的个人摄影网站 &lt;a href=&quot;https://album.animalcrossing.life/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Tit1e’s Photo Studio&lt;/a&gt;。由于是网站，因此每次访问的时候总是有些麻烦
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>你好啊，2021</title>
    <link href="https://github.com/Tit1e/2020/12/30/145-hello-2021/"/>
    <id>https://github.com/Tit1e/2020/12/30/145-hello-2021/</id>
    <published>2020-12-30T14:01:06.000Z</published>
    <updated>2020-12-31T14:18:16.354Z</updated>
    
    <content type="html"><![CDATA[<p>虽然标题写的是 2021，但实际上这篇是 2020 年的回顾。</p><p>回顾 2020，才发现疫情已经伴随了我一整年，年初遭遇疫情时的恐慌明明还历历在目。</p><p>因为疫情，第一次体验了在家办公。这可是正儿八经的在家办公，不是我平时请了假，结果还是被同事找上门然后在家改 bug。</p><p>2月19日返回杭州，看见了不一样的杭州，平常热闹的街道冷冷清清，明明已经过了返工的日子，沿街的店铺却都还紧紧闭着。</p><p>因为疫情，年初动森的发售直接让动森与 switch 火出了圈。我心血来潮还开发了一个小程序，从数据爬取，界面设计，后端服务搭建，接口编写，域名申请等一整套的部署流程，全都自己一人折腾了个遍。</p><p>整个过程下来，收获颇丰。这个小程序用到的技术栈：</p><ul><li>uni-app</li><li>Node.js</li><li>Mysql</li><li>Nginx</li></ul><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-28-animalCrossingCode.jpg" alt></p><p>7月26日我拿到了自己人生中的第一台相机📷：黑色的富士的 XT-20。虽然是二手，虽然我更想要银色，但我很是很喜欢它。前段时间刚上线了我的摄影站：<a href="https://album.animalcrossing.life/" target="_blank" rel="noopener">Tit1e’s Photo Studio</a>。项目立项很早，但是一直拖拖拉拉，好在赶上了 2020 的尾巴。</p><p>8月份的时候，跟小伙伴去了趟成都，4天下来，我最喜欢的地方是人民公园。点杯茶，可以在那坐上一整天。成都的生活节奏，令人向往，可惜我只是个过客。</p><p>整年下来，最重要的事是 11月初摇中了号，那次是开盘以来摇中概率最低的一次。销售发消息恭喜我的时候，我的心情不知道怎么形容，大概是忧大于喜。但是现在，我内心早已是期待它早日交房，我可以住进去。</p><p>在现在公司呆了 4 年，住的地方也 3 年多没搬过家，一直就是这样，不温不火。明年初打算跳出这个并不舒适的舒适圈，换个新环境，所以打算年后辞职。最近想到这个事情心里总是激动，一点不在怕，我觉得是时候了。</p><p>明年有目标吗？没有。最希望的大概是脱单。另外希望自己明年能拍更多照片，摄影技术能有所提升。不过提升技术这种目标过于虚无，因为我觉得我的审美不足以让我判断出我的技术是否有提升。</p><p>《生之响往》是我今年发现的宝藏歌曲。这首歌绝望中透露着希望。我喜欢许嵩的原因就是他传达给我的就是这种思想。而这首歌也有着同样的表达。这世界很糟糕，但这世界也很美好，但要心怀希望。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=554241255&auto=0&height=66"></iframe><blockquote><p><strong>小心安命，埋头任事</strong> ——曾国藩</p><p>小心谨慎安于天命，埋头做事不问其他。</p></blockquote><p>这是今年许嵩在一次直播中送给一位粉丝的建议。安于天命并不是认命，而是找到自己的定位，知道自己能做什么，适合做什么，然后努力去做。我觉得这是一个贯穿人一生的课题。</p><p>当我听到这句话以及它所表达的意思后，我觉得我终于找到了可以概括我处世态度的文字。</p><p>最后是对自己说的话：<strong>希望在接下去的人生中永远心怀希望，安命，任事</strong>。</p><p><strong>滚蛋吧，2020！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然标题写的是 2021，但实际上这篇是 2020 年的回顾。&lt;/p&gt;
&lt;p&gt;回顾 2020，才发现疫情已经伴随了我一整年，年初遭遇疫情时的恐慌明明还历历在目。&lt;/p&gt;
&lt;p&gt;因为疫情，第一次体验了在家办公。这可是正儿八经的在家办公，不是我平时请了假，结果还是被同事找上门然
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/Tit1e/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="年终总结" scheme="https://github.com/Tit1e/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>nginx http 重定向至 https</title>
    <link href="https://github.com/Tit1e/2020/12/30/144-http-to-https/"/>
    <id>https://github.com/Tit1e/2020/12/30/144-http-to-https/</id>
    <published>2020-12-30T13:21:12.000Z</published>
    <updated>2020-12-30T13:57:20.456Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>超文本传输安全协议</strong>（英语：<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol <strong>S</strong>ecure，缩写：<strong>HTTPS</strong>；常称为HTTP over TLS、HTTP over SSL或HTTP Secure）是一种通过<a href="https://zh.wikipedia.org/wiki/計算機網絡" target="_blank" rel="noopener">计算机网络</a>进行安全通信的<a href="https://zh.wikipedia.org/wiki/網路傳輸協定" target="_blank" rel="noopener">传输协议</a>。HTTPS经由<a href="https://zh.wikipedia.org/wiki/HTTP" target="_blank" rel="noopener">HTTP</a>进行通信，但利用<a href="https://zh.wikipedia.org/wiki/传输层安全" target="_blank" rel="noopener">SSL/TLS</a>来<a href="https://zh.wikipedia.org/wiki/加密" target="_blank" rel="noopener">加密</a>数据包。HTTPS开发的主要目的，是提供对<a href="https://zh.wikipedia.org/wiki/網站" target="_blank" rel="noopener">网站</a>服务器的<a href="https://zh.wikipedia.org/wiki/身份验证" target="_blank" rel="noopener">身份认证</a>，保护交换资料的隐私与<a href="https://zh.wikipedia.org/wiki/完整性" target="_blank" rel="noopener">完整性</a>。——摘自维基百科</p></blockquote><p>https 目前已经愈发普及，所以我也为自己的<a href="https://album.animalcrossing.life/" target="_blank" rel="noopener">摄影网站</a>申请了 https 证书。如何申请证书可以参考我的这篇博客：<a href="https://evolly.one/2020/12/15/137-freessl/" target="_blank" rel="noopener">为域名申请免费 https 证书</a>。</p><p>证书申请完了，https 的 Nginx 配置也配置完了，用 https 开头的 URL 也可以访问到网站了，但是发现只有完整打上带 https 的地址才能正确访问到网站，如果用 http 访问，会发现访问的是另一个网站。但平时浏览比如百度谷歌等一些地址时，我们只要输入域名，访问的时候默认访问的就是 https 的网站，哪怕你访问的是 http 的地址，最后也会自动跳转至 https。路由的重定向其实 Nginx 很容易就可以做到，只要加几行配置就可以了。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加上这段配置</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> xxx.xxxxxxx.xxx;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#正常的https配置</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> xxx.xxxxxxx.xxx;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /xxx/xx.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /xxx/xx.key;</span><br><span class="line">    <span class="attribute">root</span> /xxx/web;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://127.0.0.1:8888;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段配置我也同步到了<a href="https://evolly.one/2020/12/15/137-freessl/" target="_blank" rel="noopener">为域名申请免费 https 证书</a>。</p><p>然后重启 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;超文本传输安全协议&lt;/strong&gt;（英语：&lt;strong&gt;H&lt;/strong&gt;yper&lt;strong&gt;T&lt;/strong&gt;ext &lt;strong&gt;T&lt;/strong&gt;ransfer &lt;strong&gt;P&lt;/strong&gt;rotoco
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Nginx" scheme="https://github.com/Tit1e/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>express 静态资源代理</title>
    <link href="https://github.com/Tit1e/2020/12/29/143-express-static/"/>
    <id>https://github.com/Tit1e/2020/12/29/143-express-static/</id>
    <published>2020-12-29T12:35:23.000Z</published>
    <updated>2020-12-29T13:08:31.310Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子在搭建我的<a href="https://album.animalcrossing.life/" target="_blank" rel="noopener">摄影网站</a>，等我跑起了后端服务，要布前端页面的时候，突然想到我还需要布个前端的服务，但实际前端只是需要访问一个 index.html 文件，单独跑项目又没有必要，于是我网上查了，因为我觉得这种情况一定有人遇到过，并且肯定会有成熟的解决方案。因为我用的是 express，于是我带着 express 的关键字搜索了一下，果然，express 就提供这种服务，称为 express 静态资源代理。</p><p>使用也很简单，无非就是在原有的代码上增加一行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'web'</span>)));</span><br></pre></td></tr></table></figure><p>web 是我放前端文件的目录，并且我写这行代码的所在文件与 web 目录都在统一层级，并且都是根目录，所以我路径就使用了__dirname。然后重启一下服务，代理就生效了，直接访问<a href="https://album.animalcrossing.life" target="_blank" rel="noopener">https://album.animalcrossing.life</a>访问到的就是我部署的前端 index.html 文件了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前阵子在搭建我的&lt;a href=&quot;https://album.animalcrossing.life/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;摄影网站&lt;/a&gt;，等我跑起了后端服务，要布前端页面的时候，突然想到我还需要布个前端的服务，但实际前端只是需
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 爬虫初步实践</title>
    <link href="https://github.com/Tit1e/2020/12/28/142-node-spider/"/>
    <id>https://github.com/Tit1e/2020/12/28/142-node-spider/</id>
    <published>2020-12-28T13:15:19.000Z</published>
    <updated>2020-12-29T01:20:22.423Z</updated>
    
    <content type="html"><![CDATA[<p>今年年初的时候动森因为本身的影响力加上疫情的原因，在全球大火，很多原本都不知道 Switch 是什么的人，都因为动森入了Switch，当时 Switch 价格一度被炒了上去，动森限定版更是翻了倍。可见其火热程度。</p><p>而我那时候也加入的动森大部队，并且加了群，大家在群里聊得热火朝天，各种摸，各种报价格，卖大头菜。那时候我就想着做一个“菜市场”小程序，方便大家卖大头菜。但等我开发出第一版的时候，卖大头菜的热度已经下去了，我就失去了开发的动力。后来在查动森信息的时候，无意间发现了 B 站的<a href="https://wiki.biligame.com/dongsen/%E9%A6%96%E9%A1%B5" target="_blank" rel="noopener">动森 WIKI 页</a>。于是我又转念一想，不如爬它数据做个图鉴吧！不过此时的心态完全是为了写爬虫练手，因为当时已经有很多成熟的图鉴app、小程序出现，我就不凑这个热闹了。</p><p>下面是小程序码，欢迎可以扫码体验。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-28-animalCrossingCode.jpg" alt></p><p>言归正传，下面是以<a href="https://wiki.biligame.com/dongsen/%E5%B0%8F%E5%8A%A8%E7%89%A9%E5%9B%BE%E9%89%B4" target="_blank" rel="noopener">动森小动物图鉴</a>页面为目标，写一个简易爬虫。</p><p>安装一些插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm 初始化</span></span><br><span class="line">npm init -y</span><br><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">npm i superagent cheerio</span><br></pre></td></tr></table></figure><ul><li>superagent 是 node 环境下的 http 模块，可用来发器请求，稍后用来请求页面</li><li>cheerio 模块可以解析页面，然后可以使用与 jQuery 相同的语法来操作 DOM</li></ul><p>新建入口文件 <code>index.js</code></p><p>封装请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getContent.js</span></span><br><span class="line"><span class="keyword">const</span> BASE_URL = <span class="string">'https://wiki.biligame.com'</span>;</span><br><span class="line"><span class="keyword">const</span> superagent = <span class="built_in">require</span>(<span class="string">"superagent"</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取页面内容方法</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; query 爬取的页面后缀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getContent</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    superagent.get(<span class="string">`<span class="subst">$&#123;BASE_URL&#125;</span>/dongsen/<span class="subst">$&#123;query&#125;</span>`</span>).end(<span class="function">(<span class="params">err, sres</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(cheerio.load(sres.text));</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  getContent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编写爬取代码前我们要对页面做一个分析：</p><p>这是我们要爬取的目标页面</p><p><a href="https://wiki.biligame.com/dongsen/小动物图鉴" target="_blank" rel="noopener">https://wiki.biligame.com/dongsen/小动物图鉴</a></p><p>这是我们要爬取的目标</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-28-141903.png" alt></p><p>每个小动物点击名字可进入详情页：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-28-142155.png" alt></p><p>可以看到详情页中信息比列表上的更为丰富，我们要想办法爬取详情页中的信息。所以需要去获取列表上 a 标签的地址，然后再去获取详情中的动物信息。</p><p>所以思路如下：</p><ol><li>首先请求列表页</li><li>获取列表中的所有小动物的项</li><li>循环项取出每项名字，获取名字上的a链接地址，拼接出完整路径</li><li>通过完整路径获取小动物的详细信息</li><li>写入数据</li></ol><p>思路清晰后那么开始编写代码，编辑 <code>index.js</code>：</p><p>首先我们要爬取所有小动物的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 爬取小动物页面</span></span><br><span class="line"><span class="comment"> * @param &#123;Date&#125; update_time 爬虫执行时间，非必须</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; url 小动物页面的后缀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getAnimals</span>(<span class="params">update_time, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $ = <span class="keyword">await</span> getContent(url)</span><br><span class="line">  <span class="comment">// 获取列表中的所有项</span></span><br><span class="line">  <span class="keyword">const</span> nodes = $(<span class="string">"#CardSelectTr tbody tr"</span>)</span><br><span class="line">  <span class="comment">// 小动物详情页后缀，其实就是名字</span></span><br><span class="line">  <span class="keyword">const</span> animals = []</span><br><span class="line">  <span class="keyword">const</span> LENGTH = nodes.length</span><br><span class="line"> <span class="comment">// 第 0 项是表头，所以索引从 1 开始</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; LENGTH; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> $element = $(nodes[i]);</span><br><span class="line">    <span class="comment">// 列表中有一项错误项，需要排除</span></span><br><span class="line">    <span class="keyword">if</span> ($element.find(<span class="string">'td'</span>).eq(<span class="number">0</span>).find(<span class="string">'a'</span>).text() !== <span class="string">'40pxString'</span>) &#123;</span><br><span class="line">      <span class="comment">// 获取小动物链接后缀</span></span><br><span class="line">      <span class="keyword">const</span> url = $element.find(<span class="string">'td'</span>).eq(<span class="number">0</span>).find(<span class="string">'a'</span>).attr(<span class="string">'href'</span>).substr(<span class="number">9</span>)</span><br><span class="line">      animals.push(url)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 删除 animals.txt，开始获取数据前，清除旧数据</span></span><br><span class="line">  fs.unlink(<span class="string">'animals.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 为了按列表顺序获取小动物信息，我使用了递归</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  getInfo(animals, index, animalInfo, update_time)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>getAnimals</code> 方法最后使用了 <code>getInfo</code> 递归函数，那么接下来编写 <code>getInfo</code>，依旧是在 <code>index.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">"os"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">list, index, func, update_time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = list[index];</span><br><span class="line">  <span class="keyword">let</span> otherInfo = &#123;&#125;;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    otherInfo = <span class="keyword">await</span> func(name).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &lt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">        index += <span class="number">1</span>;</span><br><span class="line">        getInfo(list, index, func, update_time);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 出错跳过进入下一个小动物</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">      index += <span class="number">1</span>;</span><br><span class="line">      getInfo(list, index, func, update_time);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// os.EOL 用于换行 http://nodejs.cn/api/os/os_eol.html</span></span><br><span class="line">  <span class="comment">// 获取到数据后写入 animals.txt</span></span><br><span class="line">  fs.appendFile(<span class="string">"animals.txt"</span>, <span class="built_in">JSON</span>.stringify(otherInfo) + os.EOL, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &lt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">        index += <span class="number">1</span>;</span><br><span class="line">        getInfo(list, index, func, update_time);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归方法也写好了，接下来就是真正获取小动物数据的方法，还是在 <code>index.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; getContent &#125; = <span class="built_in">require</span>(<span class="string">'./getContent.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取小动物信息</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; url 小动物页面后缀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">animalInfo</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> $ = <span class="keyword">await</span> getContent(url).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject()</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 定义小动物各项信息的字段</span></span><br><span class="line">      <span class="keyword">const</span> list = [<span class="string">'birthday'</span>, <span class="string">'character'</span>, <span class="string">'mantra'</span>, <span class="string">'hobby'</span>, <span class="string">'style'</span>, <span class="string">'color'</span>, <span class="string">'vioce'</span>, <span class="string">'ethnicity'</span>, <span class="string">'motto'</span>, <span class="string">'foreign_name'</span>]</span><br><span class="line">      <span class="keyword">const</span> nodes = $(<span class="string">".box-poke-left .box-poke"</span>)</span><br><span class="line">      <span class="keyword">const</span> str = $(<span class="string">".box-poke-left .box-title-1"</span>).text()</span><br><span class="line">      <span class="keyword">const</span> name = str.substr(<span class="number">0</span>, str.length <span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">const</span> sex = str.substr(<span class="number">-1</span>) === <span class="string">'♂'</span> ? <span class="string">'男'</span> : <span class="string">'女'</span></span><br><span class="line">      <span class="keyword">const</span> image = $(<span class="string">".box-poke-right"</span>).find(<span class="string">'img'</span>).attr(<span class="string">'src'</span>)</span><br><span class="line">      <span class="keyword">const</span> info = &#123;</span><br><span class="line">        name,</span><br><span class="line">        sex,</span><br><span class="line">        image,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> attr = list[i]</span><br><span class="line">        <span class="keyword">const</span> text = nodes.eq(i).find(<span class="string">'.box-font'</span>).text()</span><br><span class="line">        <span class="keyword">if</span> (attr === <span class="string">'birthday'</span>) &#123;</span><br><span class="line">          <span class="comment">// 处理小动物的信息，也可以不处理</span></span><br><span class="line">          info[attr] = text.replace(<span class="string">'月'</span>, <span class="string">'-'</span>).replace(<span class="string">'日'</span>, <span class="string">''</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          info[attr] = text</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      info.birth_month = info.birthday.split(<span class="string">'-'</span>).shift()</span><br><span class="line">      resolve(info)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(url + <span class="string">'出错啦'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在 <code>index.js</code> 最后执行方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">const</span> query = <span class="built_in">encodeURIComponent</span>(<span class="string">'小动物图鉴'</span>)</span><br><span class="line">getAnimals(now, query)</span><br></pre></td></tr></table></figure><p>完整的 <code>index.js</code> ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">"os"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; getContent &#125; = <span class="built_in">require</span>(<span class="string">'./getContent.js'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">list, index, func, update_time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = list[index];</span><br><span class="line">  <span class="keyword">let</span> otherInfo = &#123;&#125;;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    otherInfo = <span class="keyword">await</span> func(name).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &lt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">        index += <span class="number">1</span>;</span><br><span class="line">        getInfo(list, index, func, update_time);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 出错跳过进入下一个小动物</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">      index += <span class="number">1</span>;</span><br><span class="line">      getInfo(list, index, func, update_time);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// os.EOL 用于换行 http://nodejs.cn/api/os/os_eol.html</span></span><br><span class="line">  fs.appendFile(<span class="string">"animals.txt"</span>, <span class="built_in">JSON</span>.stringify(otherInfo) + os.EOL, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &lt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">        index += <span class="number">1</span>;</span><br><span class="line">        getInfo(list, index, func, update_time);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取小动物信息</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; url 小动物页面后缀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">animalInfo</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> $ = <span class="keyword">await</span> getContent(url).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject()</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">const</span> list = [<span class="string">'birthday'</span>, <span class="string">'character'</span>, <span class="string">'mantra'</span>, <span class="string">'hobby'</span>, <span class="string">'style'</span>, <span class="string">'color'</span>, <span class="string">'vioce'</span>, <span class="string">'ethnicity'</span>, <span class="string">'motto'</span>, <span class="string">'foreign_name'</span>]</span><br><span class="line">      <span class="keyword">const</span> nodes = $(<span class="string">".box-poke-left .box-poke"</span>)</span><br><span class="line">      <span class="keyword">const</span> str = $(<span class="string">".box-poke-left .box-title-1"</span>).text()</span><br><span class="line">      <span class="keyword">const</span> name = str.substr(<span class="number">0</span>, str.length <span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">const</span> sex = str.substr(<span class="number">-1</span>) === <span class="string">'♂'</span> ? <span class="string">'男'</span> : <span class="string">'女'</span></span><br><span class="line">      <span class="keyword">const</span> image = $(<span class="string">".box-poke-right"</span>).find(<span class="string">'img'</span>).attr(<span class="string">'src'</span>)</span><br><span class="line">      <span class="keyword">const</span> info = &#123;</span><br><span class="line">        name,</span><br><span class="line">        sex,</span><br><span class="line">        image,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> attr = list[i]</span><br><span class="line">        <span class="keyword">const</span> text = nodes.eq(i).find(<span class="string">'.box-font'</span>).text()</span><br><span class="line">        <span class="keyword">if</span> (attr === <span class="string">'birthday'</span>) &#123;</span><br><span class="line">          info[attr] = text.replace(<span class="string">'月'</span>, <span class="string">'-'</span>).replace(<span class="string">'日'</span>, <span class="string">''</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          info[attr] = text</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      info.birth_month = info.birthday.split(<span class="string">'-'</span>).shift()</span><br><span class="line">      resolve(info)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(url + <span class="string">'出错啦'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 爬取小动物页面</span></span><br><span class="line"><span class="comment"> * @param &#123;Date&#125; update_time 爬虫执行时间，非必须</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; url 小动物页面的后缀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getAnimals</span>(<span class="params">update_time, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $ = <span class="keyword">await</span> getContent(url)</span><br><span class="line">  <span class="keyword">const</span> nodes = $(<span class="string">"#CardSelectTr tbody tr"</span>)</span><br><span class="line">  <span class="keyword">const</span> animals = []</span><br><span class="line">  <span class="keyword">const</span> LENGTH = nodes.length</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; LENGTH; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> $element = $(nodes[i]);</span><br><span class="line">    <span class="keyword">if</span> ($element.find(<span class="string">'td'</span>).eq(<span class="number">0</span>).find(<span class="string">'a'</span>).text() !== <span class="string">'40pxString'</span>) &#123;</span><br><span class="line">      <span class="comment">// 获取小动物链接后缀</span></span><br><span class="line">      <span class="keyword">const</span> url = $element.find(<span class="string">'td'</span>).eq(<span class="number">0</span>).find(<span class="string">'a'</span>).attr(<span class="string">'href'</span>).substr(<span class="number">9</span>)</span><br><span class="line">      animals.push(url)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除 animals.txt，开始获取数据前，清除旧数据</span></span><br><span class="line">  fs.unlink(<span class="string">'animals.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 递归获取信息</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  getInfo(animals, index, animalInfo, update_time)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们爬取的页面是 https://wiki.biligame.com/dongsen/%E5%B0%8F%E5%8A%A8%E7%89%A9%E5%9B%BE%E9%89%B4</span></span><br><span class="line"><span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">const</span> query = <span class="built_in">encodeURIComponent</span>(<span class="string">'小动物图鉴'</span>)</span><br><span class="line">getAnimals(now, query)</span><br></pre></td></tr></table></figure><p>运行爬虫：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>不出意外会在根目录下生成一个 animals.txt 文件。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-28-145321.png" alt></p><p><a href="https://github.com/Tit1e/Demos/tree/master/142.node-spider">源码查看</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年年初的时候动森因为本身的影响力加上疫情的原因，在全球大火，很多原本都不知道 Switch 是什么的人，都因为动森入了Switch，当时 Switch 价格一度被炒了上去，动森限定版更是翻了倍。可见其火热程度。&lt;/p&gt;
&lt;p&gt;而我那时候也加入的动森大部队，并且加了群，大家
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="node" scheme="https://github.com/Tit1e/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>pm2 基础使用指南</title>
    <link href="https://github.com/Tit1e/2020/12/24/141-pm2/"/>
    <id>https://github.com/Tit1e/2020/12/24/141-pm2/</id>
    <published>2020-12-24T06:18:09.000Z</published>
    <updated>2020-12-24T07:00:15.999Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Unitech/pm2">pm2</a> 我想用 Node.js 在服务器上搭过服务的应该都知道。因为正常情况跑 node 服务需要在终端执行 <code>node inde.js</code> 命令，而服务器我们一般是使用终端通过 SSH 远程连接，我们不可能一直保持与服务器的连接，也不可能一直开着运行服务的终端窗口，所以我们需要一个工具来帮忙挂着这个服务，pm2 就是这么个工具。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install pm2 -g</span><br></pre></td></tr></table></figure><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><h4 id="启动某个服务"><a href="#启动某个服务" class="headerlink" title="启动某个服务"></a>启动某个服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --watch 表示：服务文件发生变化时，pm2会自动帮你重启服务</span></span><br><span class="line">pm2 start app.js --watch</span><br><span class="line">以 xxx 为命名启动进程</span><br><span class="line">pm2 start app.js --watch --name xxx</span><br></pre></td></tr></table></figure><h4 id="查看启动中的服务"><a href="#查看启动中的服务" class="headerlink" title="查看启动中的服务"></a>查看启动中的服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 list</span><br></pre></td></tr></table></figure><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-24-063206.png" alt></p><h4 id="停止某个或全部服务"><a href="#停止某个或全部服务" class="headerlink" title="停止某个或全部服务"></a>停止某个或全部服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pm2 stop name || id || <span class="string">'all'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如我要停止上图中名为 JinYa 的这个服务</span></span><br><span class="line">pm2 stop JinYa</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">pm2 stop 2</span><br><span class="line"><span class="comment"># 如果停止全部</span></span><br><span class="line">pm2 stop all</span><br></pre></td></tr></table></figure><h4 id="重启某个或全部服务"><a href="#重启某个或全部服务" class="headerlink" title="重启某个或全部服务"></a>重启某个或全部服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pm2 restart name || id || <span class="string">'all'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如我要重启上图中名为 JinYa 的这个服务</span></span><br><span class="line">pm2 restart JinYa</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">pm2 restart 2</span><br><span class="line"><span class="comment"># 如果停止全部</span></span><br><span class="line">pm2 restart all</span><br></pre></td></tr></table></figure><h4 id="删除某个或全部服务"><a href="#删除某个或全部服务" class="headerlink" title="删除某个或全部服务"></a>删除某个或全部服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pm2 delete name || id || <span class="string">'all'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如我要重启上图中名为 JinYa 的这个服务</span></span><br><span class="line">pm2 delete JinYa</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">pm2 delete 2</span><br><span class="line"><span class="comment"># 如果停止全部</span></span><br><span class="line">pm2 delete all</span><br></pre></td></tr></table></figure><h4 id="查看某个服务的描述"><a href="#查看某个服务的描述" class="headerlink" title="查看某个服务的描述"></a>查看某个服务的描述</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 describe name || id</span><br></pre></td></tr></table></figure><p>如果服务器上有十几甚至几十个服务，那么一个一个启动就显得十分繁琐，所以 pm2 也可以通过配置文件启动。</p><h4 id="通过配置文件批量启动"><a href="#通过配置文件批量启动" class="headerlink" title="通过配置文件批量启动"></a>通过配置文件批量启动</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个名为 server.json 的文件</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"apps"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      "name": "server1", // 服务名称</span><br><span class="line">      "script": "./xxx/index.js", // 服务入口文件路径</span><br><span class="line">      "watch": true // 监听服务，服务发生变化时自动重启</span><br><span class="line">    &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"server2"</span>,</span><br><span class="line">      <span class="attr">"script"</span>: <span class="string">"./xxx/app.js"</span>,</span><br><span class="line">      <span class="attr">"watch"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start server.json</span><br></pre></td></tr></table></figure><p>上面 <code>stop</code>、<code>restar</code>、<code>delete</code> 命令其实都可通过 json 文件来批量执行。</p><h4 id="查看进程资源消耗情况"><a href="#查看进程资源消耗情况" class="headerlink" title="查看进程资源消耗情况"></a>查看进程资源消耗情况</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 monit</span><br></pre></td></tr></table></figure><p>上面这些命令只是一些我在日常使用中经常用到的基础命令，pm2 这个工具所能做的远远不止这些。它还可以做负载均衡，内存监控等其他很多事情，只是我的应用场景没用那么复杂，所以并没有深入了解这些功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/Unitech/pm2&quot;&gt;pm2&lt;/a&gt; 我想用 Node.js 在服务器上搭过服务的应该都知道。因为正常情况跑 node 服务需要在终端执行 &lt;code&gt;node inde.js&lt;/code&gt; 命令，而服务器我们一般
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>用快捷指令快速打开支付码、扫一扫或支付宝指定小程序</title>
    <link href="https://github.com/Tit1e/2020/12/23/140-alipay-shortcuts/"/>
    <id>https://github.com/Tit1e/2020/12/23/140-alipay-shortcuts/</id>
    <published>2020-12-23T05:26:57.000Z</published>
    <updated>2020-12-24T02:13:49.454Z</updated>
    
    <content type="html"><![CDATA[<p>首先说说使用快捷指令打开支付码、扫一扫等功能的好处，因为在ios14下，支付宝自带的小组件就有这个功能。</p><ol><li>小组件上的功能是固定的，无法自定义。</li><li>小组件样式不一定符合用户审美（至少不符合我的审美，不然我也不会写这篇文章）。</li><li>小组件占用屏幕空间大，降低了屏幕的使用效率。</li></ol><p>这是支付宝小组件的效果：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-23-IMG_7334.jpg?imageMogr2/thumbnail/!40p" alt></p><p>只是使用快捷指令的效果，图上的付款码，扫一扫和叮嗒出行都是支付宝的功能快捷指令化：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-23-IMG_7335.jpg?imageMogr2/thumbnail/!40p" alt></p><p>使用效果如下：</p><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"video":{"url":"https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-23-140-alipay-shortcuts.mp4","pic":"https://photo-album-1251959693.cos.ap-nanjing.myqcloud.com/video-poster.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>可以看出使用效果上并没有太大的差别，都是点击图标都直接进入扫码界面，没有多余的步骤。</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>实现这个效果很简单</p><ol><li>新建一个快捷指令</li><li>打开指定 url</li><li>保存并添加到桌面</li></ol><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-23-IMG_7336.png?imageMogr2/thumbnail/!40p" alt></p><p>如何将快捷指令发送到桌面可以参考<a href="https://evolly.one/2020/12/17/138-ios-desktop/" target="_blank" rel="noopener">桌面美化</a>这篇文章。</p><p>上面途中展示的扫一扫的链接，我这里还有一些其他的功能链接，有需要自取。</p><ul><li><p>健康码: alipays://platformapi/startapp?appId=2021001139676873</p></li><li><p>微信扫码: weixin://scanqrcode</p></li><li><p>支付宝扫一扫: alipayqr://platformapi/startapp?saId=10000007</p></li><li><p>支付宝付款码: alipayqr://platformapi/startapp?saId=20000056</p></li><li><p>支付宝收款码: alipayqr://platformapi/startapp?saId=20000123</p></li><li><p>支付宝乘车码: alipayqr://platformapi/startapp?saId=200011235</p></li><li><p>支付宝查快递: alipays://platformapi/startapp?appId=20000754</p></li><li><p>蚂蚁庄园: alipays://platformapi/startapp?appId=66666674</p></li><li><p>蚂蚁森林： alipays://platformapi/startapp?appId=60000002</p></li></ul><p>上面这些都是现成的，但仔细观察可以发现上面这些链接中，其实不一样的只是地址中的 appId不同，其他都是一样的，所以是不是只要有应用的 appId，就可以通过这种方式实现快速打开应用？</p><p>的确可以，比如我自己做了一个叮嗒出行的快捷方式，这是一个支付宝内嵌的小程序，支付宝也支持添加桌面书签，但这种方式会在打开过程中做一次跳转，体验非常差。</p><p>下面说一下提取程序中的 appId 的方式：</p><ol><li><p>在支付宝中打开要添加的程序，点击程序右上角的三个点，在下方弹出功能菜单。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-23-IMG_7340-1.png?imageMogr2/thumbnail/!40p" alt></p></li><li><p>点击下方的【添加到桌面】这时小程序会在浏览器打开一个页面，上面会有添加到桌面的教程。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-23-IMG_7341.jpg?imageMogr2/thumbnail/!40p" alt></p></li><li><p>复制浏览器地址</p></li><li><p>从地址中提取 appId</p></li></ol><p>这时我复制出来的地址：</p><p><code>https://render.alipay.com/p/s/shortcut/index?appId=2018110161946659&amp;appName=叮嗒出行&amp;appIcon=https://appstoreisvpic.alipayobjects.com/prod/f38acc92-21a5-48be-9a66-8a69474b672a.png@120w.png</code></p><p>地址中的 <code>appId=2018110161946659</code> 这串 appId 就是我们要找的。</p><p>找到这串 id 后，我们把 id 跟前面的的那串地址拼到一起 <code>alipays://platformapi/startapp?appId=2018110161946659</code>，然后在快捷指令中新建一个指令就完成了。</p><p>看一下原来的打开方式跟用快捷指令打开的区别：</p><div id="dplayer2" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"video":{"url":"https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-23-140-alipay-shortcuts2.mp4","pic":"https://photo-album-1251959693.cos.ap-nanjing.myqcloud.com/video-poster.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>微信如果可以拿到 appId 也可以使用这种方式操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先说说使用快捷指令打开支付码、扫一扫等功能的好处，因为在ios14下，支付宝自带的小组件就有这个功能。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;小组件上的功能是固定的，无法自定义。&lt;/li&gt;
&lt;li&gt;小组件样式不一定符合用户审美（至少不符合我的审美，不然我也不会写这篇文章）。&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>js 上传文件至腾讯云对象存储</title>
    <link href="https://github.com/Tit1e/2020/12/19/139-upload-tencent-cloud/"/>
    <id>https://github.com/Tit1e/2020/12/19/139-upload-tencent-cloud/</id>
    <published>2020-12-19T14:43:25.000Z</published>
    <updated>2020-12-19T15:59:26.276Z</updated>
    
    <content type="html"><![CDATA[<p>今天终于把自己的摄影展示网站发布到了线上。<a href="https://album.animalcrossing.life" target="_blank" rel="noopener">查看网站</a></p><p>这个网站整体并不复杂，但是其中也有不少值得记录的难点，比如从前端上传文件至腾讯云的对象存储，公司业务中我使用过七牛的云存储，腾讯的还从未接触过。本以为应该跟七牛的差不多，但没想到我费了好大的力气各种看文档、看别人的博客才成功上传。</p><p>吐槽一句腾讯的文档写的真的好差。</p><p>下面分享一下我的上传配置及流程：</p><p>整个流程需要前端和后端的配合，所以代码会分为前端代码与后端代码两个部分，下面我会注明。后端我用的是 Node.js。</p><h2 id="上传流程说明"><a href="#上传流程说明" class="headerlink" title="上传流程说明"></a>上传流程说明</h2><p>上传的整体流程大概是这样：</p><p>1、上传前，前端发起请求向服务器发起请求获取上传的临时密钥</p><p>2、服务器端收到请求，通过腾讯官方的 sdk 计算出临时密钥并返回给前端</p><p>3、前端获取到临时密钥，获取选择的文件，计算 md5 值作为文件名（这样相同文件就不会重复上传）</p><p>4、通过官方的 sdk 进行上传，在回调中处理上传后的逻辑</p><p>##后端代码 Node.js</p><p>基础的服务运行环境我就不做展开了，只讲获取临时密钥的过程。</p><p>首先需要安装 qcloud-cos-sts 依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install qcloud-cos-sts --save</span><br></pre></td></tr></table></figure><p>然后就是在你请求的方法文件中编写代码，个人视不同请求而定：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是我的文件 upload.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入依赖</span></span><br><span class="line"><span class="keyword">const</span> STS = <span class="built_in">require</span>(<span class="string">'qcloud-cos-sts'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义配置项</span></span><br><span class="line"><span class="comment">// 密钥可从腾讯云控制台的【API密钥管理】中获取：https://console.cloud.tencent.com/cam/capi</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  secretId: <span class="string">'你的固定密钥'</span>, <span class="comment">// 替换你的固定密钥</span></span><br><span class="line">  secretKey: <span class="string">'你的固定密钥'</span>, <span class="comment">// 替换你的固定密钥</span></span><br><span class="line">  proxy: <span class="string">''</span>,</span><br><span class="line">  durationSeconds: <span class="number">6000</span>, <span class="comment">// 密钥有效期</span></span><br><span class="line">  <span class="comment">// 放行判断相关参数</span></span><br><span class="line">  bucket: <span class="string">'bucket名字'</span>, <span class="comment">// 换成你的 bucket</span></span><br><span class="line">  region: <span class="string">'bucket 地区'</span>, <span class="comment">// 换成 bucket 所在地区</span></span><br><span class="line">  allowPrefix: <span class="string">'*'</span>, <span class="comment">// 这里改成允许的路径前缀，可以根据自己网站的用户登录态判断允许上传的具体路径，例子： a.jpg 或者 a/* 或者 * (使用通配符*存在重大安全风险, 请谨慎评估使用)</span></span><br><span class="line">  allowActions: [</span><br><span class="line">    <span class="comment">// 所有 action 请看文档 https://cloud.tencent.com/document/product/436/31923</span></span><br><span class="line">    <span class="comment">// 简单上传</span></span><br><span class="line">    <span class="string">'name/cos:PutObject'</span>,</span><br><span class="line">    <span class="string">'name/cos:PostObject'</span>,</span><br><span class="line">    <span class="comment">// 分片上传</span></span><br><span class="line">    <span class="string">'name/cos:sliceUploadFile'</span>,</span><br><span class="line">    <span class="string">'name/cos:InitiateMultipartUpload'</span>,</span><br><span class="line">    <span class="string">'name/cos:ListMultipartUploads'</span>,</span><br><span class="line">    <span class="string">'name/cos:ListParts'</span>,</span><br><span class="line">    <span class="string">'name/cos:UploadPart'</span>,</span><br><span class="line">    <span class="string">'name/cos:CompleteMultipartUpload'</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我用的是express，所以接口方法这样写，最外层的方法无所谓，每个人都不一样，主要是里面的内容</span></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/upload/sts'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取临时密钥</span></span><br><span class="line">  <span class="keyword">const</span> shortBucketName = config.bucket.substr(<span class="number">0</span>, config.bucket.lastIndexOf(<span class="string">'-'</span>));</span><br><span class="line">  <span class="keyword">const</span> appId = config.bucket.substr(<span class="number">1</span> + config.bucket.lastIndexOf(<span class="string">'-'</span>));</span><br><span class="line">  <span class="keyword">const</span> policy = &#123;</span><br><span class="line">    version: <span class="string">'2.0'</span>,</span><br><span class="line">    statement: [&#123;</span><br><span class="line">      action: config.allowActions,</span><br><span class="line">      effect: <span class="string">'allow'</span>,</span><br><span class="line">      principal: &#123; <span class="attr">qcs</span>: [<span class="string">'*'</span>] &#125;,</span><br><span class="line">      resource: [</span><br><span class="line">        <span class="string">`qcs::cos:<span class="subst">$&#123;config.region&#125;</span>:uid/<span class="subst">$&#123;appId&#125;</span>:prefix//<span class="subst">$&#123;appId&#125;</span>/<span class="subst">$&#123;shortBucketName&#125;</span>/<span class="subst">$&#123;config.allowPrefix&#125;</span>`</span>,</span><br><span class="line">      ],</span><br><span class="line">    &#125;],</span><br><span class="line">  &#125;;</span><br><span class="line">  STS.getCredential(&#123;</span><br><span class="line">    secretId: config.secretId,</span><br><span class="line">    secretKey: config.secretKey,</span><br><span class="line">    proxy: config.proxy,</span><br><span class="line">    durationSeconds: config.durationSeconds,</span><br><span class="line">    policy,</span><br><span class="line">  &#125;, (err, tempKeys) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> result = err || tempKeys || <span class="string">''</span>;</span><br><span class="line">    res.json(<span class="keyword">new</span> Result(&#123; <span class="attr">data</span>: result &#125;));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>存储桶的相关信息可以在控制台的存储桶的【概览】中查看。</p><p>注意：<strong>存储桶所在地域只需括号中的内容，不需要中文</strong>。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-19-153605.png" alt></p><p>后端计算临时密钥的方法就是以上这些了。</p><h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><p>在配置文件中定义好基础信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/utils/cosConf.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  Bucket: <span class="string">''</span>, <span class="comment">// Bucket 名称</span></span><br><span class="line">  Region: <span class="string">''</span>, <span class="comment">// Bucket 地域</span></span><br><span class="line">  Domain: <span class="string">''</span>, <span class="comment">// Bucket 访问域名</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后安装以下依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cos-js-sdk-v5 spark-md5 --save</span><br></pre></td></tr></table></figure><p>具体上传代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> COS <span class="keyword">from</span> <span class="string">'cos-js-sdk-v5'</span>;</span><br><span class="line"><span class="keyword">import</span> SparkMD5 <span class="keyword">from</span> <span class="string">'spark-md5'</span>;</span><br><span class="line"><span class="comment">// 这个方法是文章中上面写的获取临时密钥的请求方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; sts &#125; <span class="keyword">from</span> <span class="string">'@/api/upload'</span>;</span><br><span class="line"><span class="comment">// 上面定义的基础信息</span></span><br><span class="line"><span class="keyword">import</span> cosConfig <span class="keyword">from</span> <span class="string">'./cosConf'</span>;</span><br><span class="line"><span class="keyword">let</span> key = <span class="string">''</span>;</span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化实例</span></span><br><span class="line"><span class="keyword">const</span> cos = <span class="keyword">new</span> COS(&#123;</span><br><span class="line">  <span class="keyword">async</span> getAuthorization(options, callback) &#123;</span><br><span class="line">    <span class="comment">// 获取临时密钥</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> sts();</span><br><span class="line">    <span class="keyword">const</span> authdata = res.data;</span><br><span class="line">    <span class="keyword">const</span> auth = &#123;</span><br><span class="line">      TmpSecretId: authdata.credentials.tmpSecretId,</span><br><span class="line">      TmpSecretKey: authdata.credentials.tmpSecretKey,</span><br><span class="line">      XCosSecurityToken: authdata.credentials.sessionToken,</span><br><span class="line">      ExpiredTime: authdata.expiredTime, <span class="comment">// 在ExpiredTime时间前，不会再次调用getAuthorization</span></span><br><span class="line">    &#125;;</span><br><span class="line">    callback(auth);</span><br><span class="line">  &#125;,</span><br><span class="line">  FileParallelLimit: <span class="number">3</span>, <span class="comment">// 文件并发数</span></span><br><span class="line">  ChunkParallelLimit: <span class="number">8</span>, <span class="comment">// 同一个上传文件的分块并发数</span></span><br><span class="line">  ChunkSize: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">8</span>, <span class="comment">// 分块上传时，每块的字节数大小</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得文件md5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileMD5</span>(<span class="params">file, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明必要的变量</span></span><br><span class="line">  <span class="keyword">const</span> fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line">  <span class="comment">// 文件每块分割2M，计算分割详情</span></span><br><span class="line">  <span class="keyword">const</span> chunkSize = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">  <span class="keyword">const</span> chunks = <span class="built_in">Math</span>.ceil(file.size / chunkSize);</span><br><span class="line">  <span class="keyword">let</span> currentChunk = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建md5对象（基于SparkMD5）</span></span><br><span class="line">  <span class="keyword">const</span> spark = <span class="keyword">new</span> SparkMD5();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每块文件读取完毕之后的处理</span></span><br><span class="line">  fileReader.onload = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 每块交由sparkMD5进行计算</span></span><br><span class="line">    spark.appendBinary(e.target.result);</span><br><span class="line">    currentChunk += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果文件处理完成计算MD5，如果还有分片继续处理</span></span><br><span class="line">    <span class="keyword">if</span> (currentChunk &lt; chunks) &#123;</span><br><span class="line">      <span class="comment">// eslint-disable-next-line no-use-before-define</span></span><br><span class="line">      loadNext();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback(spark.end());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理单片文件的上传</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadNext</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> start = currentChunk * chunkSize;</span><br><span class="line">    <span class="keyword">const</span> end = start + chunkSize &gt;= file.size ? file.size : start + chunkSize;</span><br><span class="line"></span><br><span class="line">    fileReader.readAsBinaryString(file.slice(start, end));</span><br><span class="line">  &#125;</span><br><span class="line">  loadNext();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小文件直接上传-通过putObject上传</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params">file, callback, progressBc</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 得到md5码</span></span><br><span class="line">  getFileMD5(file, (md5) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 存储文件的md5码</span></span><br><span class="line">    file.md5 = md5;</span><br><span class="line">    <span class="keyword">const</span> subfix = file.name.substr(file.name.lastIndexOf(<span class="string">'.'</span>));</span><br><span class="line">    key = process.env.VUE_APP_BUCKET_PATH + file.md5 + subfix;</span><br><span class="line">    cos.putObject(&#123;</span><br><span class="line">      Bucket: cosConfig.Bucket,</span><br><span class="line">      Region: cosConfig.Region,</span><br><span class="line">      Key: key,</span><br><span class="line">      Body: file,</span><br><span class="line">      onProgress(progressData) &#123;</span><br><span class="line">        <span class="comment">// 上传进度</span></span><br><span class="line">        progressBc(progressData.percent);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 成功或出错回调</span></span><br><span class="line">      callback(err, data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大文件分片上传-通过sliceUploadFile上传</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadFile2</span>(<span class="params">file, callback, progressBc</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 得到md5码</span></span><br><span class="line">  getFileMD5(file, (md5) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 存储文件的md5码</span></span><br><span class="line">    file.md5 = md5;</span><br><span class="line">    <span class="keyword">const</span> subfix = file.name.substr(file.name.lastIndexOf(<span class="string">'.'</span>));</span><br><span class="line">    key = process.env.VUE_APP_BUCKET_PATH + file.md5 + subfix;</span><br><span class="line">    cos.sliceUploadFile(&#123;</span><br><span class="line">      Bucket: cosConfig.Bucket,</span><br><span class="line">      Region: cosConfig.Region,</span><br><span class="line">      Key: key,</span><br><span class="line">      Body: file,</span><br><span class="line">      onProgress(progressData) &#123;</span><br><span class="line">        <span class="comment">// 上传进度</span></span><br><span class="line">        progressBc(progressData.percent);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;, (err, data) =&gt; &#123;</span><br><span class="line">      callback(err, data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用上传的话，只需这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; accept=&quot;image/*&quot; ref=&quot;upload&quot; id=&quot;upload&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;submit&quot;&gt;上 传&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; uploadFile &#125; from &apos;@/utils/uploadfile&apos;;</span><br><span class="line">  export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      submit()&#123;</span><br><span class="line">        const file = this.$refs.upload.files[0]</span><br><span class="line">        uploadFile(file, (err, data) =&gt; &#123;</span><br><span class="line">            // 回调</span><br><span class="line">            if(!err)&#123;</span><br><span class="line">              // 上传成功处理</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">              // 出错处理</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, progress =&gt; &#123;</span><br><span class="line">            // 这里可以设置上传进度</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="存储桶设置"><a href="#存储桶设置" class="headerlink" title="存储桶设置"></a>存储桶设置</h2><p>最后，存储桶还需要设置跨域访问，否则哪怕前面都正确，文件也无法上传。</p><p>在存储桶的【安全管理】-【跨域访问CORS设置】中添加规则，设置域名白名单，保存生效后，不出意外就可以正常上传文件了。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-19-155231.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天终于把自己的摄影展示网站发布到了线上。&lt;a href=&quot;https://album.animalcrossing.life&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;查看网站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个网站整体并不复杂，但是其中也有不少值得记录的难
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>iOS14 桌面美化，自定义图标</title>
    <link href="https://github.com/Tit1e/2020/12/17/138-ios-desktop/"/>
    <id>https://github.com/Tit1e/2020/12/17/138-ios-desktop/</id>
    <published>2020-12-17T14:56:46.000Z</published>
    <updated>2020-12-24T02:27:17.255Z</updated>
    
    <content type="html"><![CDATA[<p>之所以现在才写这个教程，是因为iOS14.3发布后，通过快捷指令打开应用不用先打开快捷指令 app 再跳到指定 app 了，但目前通过快捷指令打开的应用，每次打开会出现一个弹窗，并且这个弹窗无法关闭，也不能手动提前关闭。</p><p>先上最终效果图：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-17-IMG_7227.PNG?imageMogr2/thumbnail/!40p" alt></p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-17-IMG_7228.PNG?imageMogr2/thumbnail/!40p" alt></p><p>之前小组件刚出来的时候也折腾过一次，但是因为打开应用要跳转两次，体验太差，最后作罢。这次虽然还有点小缺陷，但现在不用再二次跳转，这个体验提升巨大，所以又再一次上手折腾，希望下次能把弹窗也去掉。</p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-24-iosdesktopmute%401080p.mp4","pic":"https://photo-album-1251959693.cos.ap-nanjing.myqcloud.com/video-poster.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>通过这种方式，就可以把应用图标设置成任意图片。</p><p>这是我的素材包，有需要可以自取：<a href="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-17-icons.zip" target="_blank" rel="noopener">下载素材包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之所以现在才写这个教程，是因为iOS14.3发布后，通过快捷指令打开应用不用先打开快捷指令 app 再跳到指定 app 了，但目前通过快捷指令打开的应用，每次打开会出现一个弹窗，并且这个弹窗无法关闭，也不能手动提前关闭。&lt;/p&gt;
&lt;p&gt;先上最终效果图：&lt;/p&gt;
&lt;p&gt;&lt;im
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>为域名申请免费 https 证书</title>
    <link href="https://github.com/Tit1e/2020/12/15/137-freessl/"/>
    <id>https://github.com/Tit1e/2020/12/15/137-freessl/</id>
    <published>2020-12-15T12:55:58.000Z</published>
    <updated>2020-12-30T13:35:55.495Z</updated>
    
    <content type="html"><![CDATA[<p>今天五六月份上个服务器到期后，一直没有开始折腾新的服务器，只是安装了一下环境：node，Nginx，Mysql之类，很多服务都没有跑起来，今天终于打算把它重新捡起来，目前服务都基本已经恢复，进行得还算顺利，趁热打铁，把蒸腾的一些经过记录一下，其实上次折腾的时候我就打算记录，无奈拖太久，已经回忆不起来了，只能作罢。</p><p>服务器基础的一些基础环境的安装之前已经写过一篇博客，就不再展开，要了解可以<a href="https://evolly.one/2018/12/14/51-ubuntu-node/" target="_blank" rel="noopener">点击这里</a>。</p><p>域名的购买备案我都在阿里云解决，此处不再展开。今天要讲的是为域名申请免费的 https 证书，因为这个域名之前是为了给小程序写接口申请的，小程序必须使用域名并且要备案，使用 https 访问。</p><p>我是在<a href="https://freessl.cn/" target="_blank" rel="noopener">freessl</a>申请的域名，并且申请的是<strong>多域名通配符</strong>类型的证书，这样我就不用给每个二级域名都申请一个证书。不过这种证书有效期比较短，只有三个月，过期后怎么处理目前我还不确定，只能到时候再看。</p><p>进入网站后先登录，然后在输入框中输入域名，我需要多域名所以我是这样写的（拿百度举例）：*.baidu.com,baidu.com</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-15-131207.png" alt></p><p>然后网站会让你下载一个应用程序，叫 keyManager。设置好开启密码后，会先让你授权域名运营商，我用的阿里云，它本身就支持，所以我填入两个 key 后马上就授权成功了，后面就是申请，过程很简单，完成后需要你去域名解析那添加一个 TXT 类型的解析，解析内容软件会提供。</p><p>解析完了之后，导出证书，我用的 Nginx 那我就选择 Nginx。下载后是一个压缩包，解压后得到两个文件，一个扩展名为<code>.crt</code>，另一个为<code>.key</code>。这两个文件到时候需要上传到服务器中，Nginx配置中需要用到。</p><p>Nginx 的配置文件大致如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// xxxx.conf</span><br><span class="line">// 重定向，http 重定向为 https</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 域名;</span><br><span class="line">    return 301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name 域名;</span><br><span class="line">    ssl_certificate /path/文件名.crt; //存放文件的路径</span><br><span class="line">    ssl_certificate_key /path/文件名.key; //存放文件的路径</span><br><span class="line">    root /home/ubuntu/www/animal-crossing-home; //项目根目录</span><br><span class="line">    index index.html; // 默认文件名</span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:5000; //本地服务地址加端口</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>这时，你访问 http 的域名，就会被重定向到 https，chrome 地址前不出意外的话，也应该会显示一把小锁。</p><p>域名三个月后过期如何处理我到时候会再写一篇博客进行说明。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天五六月份上个服务器到期后，一直没有开始折腾新的服务器，只是安装了一下环境：node，Nginx，Mysql之类，很多服务都没有跑起来，今天终于打算把它重新捡起来，目前服务都基本已经恢复，进行得还算顺利，趁热打铁，把蒸腾的一些经过记录一下，其实上次折腾的时候我就打算记录，
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
</feed>
