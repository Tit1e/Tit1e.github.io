<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tit1e</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Tit1e/"/>
  <updated>2020-04-27T15:09:41.314Z</updated>
  <id>https://github.com/Tit1e/</id>
  
  <author>
    <name>Tit1e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>uni-app 小程序设置自定义字体</title>
    <link href="https://github.com/Tit1e/2020/04/27/129-mini-program-font/"/>
    <id>https://github.com/Tit1e/2020/04/27/129-mini-program-font/</id>
    <published>2020-04-27T14:21:56.000Z</published>
    <updated>2020-04-27T15:09:41.314Z</updated>
    
    <content type="html"><![CDATA[<p>最近在开发动森的一款小程序，到目前为止踩了不少坑，今天记录一下小程序引入自定义字体的方式。后续会陆续更新其他踩坑记录。</p><p>首先，小程序是支持使用自定义字体的，使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/font/wx.loadFontFace.html" target="_blank" rel="noopener">wx.loadFontFace()</a> 就可以引入字体，但是使用这个 api 有一些限制：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-143333.png" alt></p><p>需要特别注意的点有：</p><p>第一点：字体格式，保险起见使用 ttf 格式，如果不是 ttf 格式，可以在 <a href="https://transfonter.org/" target="_blank" rel="noopener">https://transfonter.org/</a> 在线转一下。</p><p>第二点：字体链接必须是 <strong>https</strong>，意味着不支持引入本地字体。</p><p>第三点：链接必须<strong>同源</strong>或者开启了 <strong>cors</strong> 支持。</p><p>其他几点注意点对使用有影响，但没以上三点重要。</p><p>我将字体上传到了腾讯的对象存储上，因此我要在存储桶的设置中对 servicewechat.com 开启 cors 支持：</p><p>1、登录腾讯云，进入对象存储控制台</p><p>2、点击<strong>【存储桶列表】</strong>菜单</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-144352.png" alt></p><p>3、点击上传了字体的存储桶，进入存储桶详情</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-144625.png" alt></p><p>4、点击左侧<strong>【基础配置】</strong>菜单</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-144749.png" alt></p><p>5、找到<strong>【跨域访问CORS设置】</strong>卡片，点击添加规则，照下图填写表单并保存，过一会儿就会生效。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-144838.png" alt></p><p>官方文档上说如果需要全局支持字体的话 <code>wx.loadFontFace</code> 需要在 <code>app.js</code> 中调用并且设置 <code>global</code> 为 <code>true</code>。</p><p>并且使用 <code>global</code> 属性对调试基础库版本有要求，需要 2.10.0 以上，否则字体只会在调用这个 api 的页面生效。<img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-150114.png" alt></p><p>还有注意中提到的第四点也注意一下，可能会有个报错，但是字体实际已经生效，这个报错可以忽略。</p><p>但是我使用的是 <code>uni-app</code>，我尝试写在 <code>main.js</code> 入口文件中，但是并没有生效，不过 <code>uni-app</code> 支持 vue 的 mixins，创建一个font.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/mixins/font.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">onLoad() &#123;</span><br><span class="line">uni.loadFontFace(&#123;</span><br><span class="line">family: <span class="string">'DFYuanW9'</span>,</span><br><span class="line">source: <span class="string">'url("https://xxxxxxx.ttf")'</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>main.js</code> 中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mixin <span class="keyword">from</span> <span class="string">'@/mixins/share.js'</span></span><br><span class="line"></span><br><span class="line">Vue.mixin(mixin)</span><br></pre></td></tr></table></figure><p>并在全局 css 中使用字体：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">page</span>&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'DFYuanW9'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样每个页面就都会生效了。</p><p>下面是字体使用效果：</p><p>不使用字体：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-IMG_2437.PNG" alt></p><p>使用字体：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-IMG_2436.PNG" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在开发动森的一款小程序，到目前为止踩了不少坑，今天记录一下小程序引入自定义字体的方式。后续会陆续更新其他踩坑记录。&lt;/p&gt;
&lt;p&gt;首先，小程序是支持使用自定义字体的，使用 &lt;a href=&quot;https://developers.weixin.qq.com/minipro
      
    
    </summary>
    
    
      <category term="小程序" scheme="https://github.com/Tit1e/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>element-ui el-table 表格高度自适应问题解决方案</title>
    <link href="https://github.com/Tit1e/2020/04/14/128-element-ui-table-auto-height/"/>
    <id>https://github.com/Tit1e/2020/04/14/128-element-ui-table-auto-height/</id>
    <published>2020-04-14T13:14:40.000Z</published>
    <updated>2020-04-14T14:39:38.405Z</updated>
    
    <content type="html"><![CDATA[<p>工作中由于公司业务需要，要求 table 做到整个 table 始终能在页面上完全显示， head 固定，body 超出滚动，由于公司使用的是 element-ui，el-table 组件提供了 height 属性，但是这个属性的值必须是具体的像素，因此，当页面的窗口大小发生变化时，想要表格高度自适应，一般的做法就是监听窗口大小是否改变，如果改变了就重新计算 table 的高度，然后重新设置。我之前的做法是这样的：</p><p>我们公司基本都是后台应用，结构差不多就是这个样子，菜单与顶栏的宽度与高度是固定的，而且菜单部分与表格高度的计算其实没有关系。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-14-134209.png" alt></p><p>因此我计算表格高度的时候，一般都是：</p><p>整个网页的高度 - 顶栏的高度 - 各种 margin，padding 的高度 = 表格高度</p><p>然后监听窗口的变化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, () =&gt; &#123;</span><br><span class="line"><span class="comment">//重新计算高度</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>直到后来我遇到了这个需求：</p><p>页面分为左右两部分，可拖动改变左侧部分的宽度，右侧还是自适应。乍一看这个左侧改变宽度跟右侧好像没什么关系，原来那套也适用啊，但是再仔细一想，左侧改变了有可能导致右侧筛选条件宽度不够而换行，一换行筛选条件的高度就改变了，这时候是需要重新计算高度的，但是上面监听的代码只监听窗口大小改变，而现在的情况窗口的大小并没有被改变，只是 div 的宽度发生了变化，后来我 google 了一圈，发现了 <a href="https://github.com/marcj/css-element-queries">css-element-queries</a> 这个库中的 <code>ResizeSensor</code>  这个类可以实现对元素大小改变的监听，使用方法也很简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * element 需要监听的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> ResizeSensor(element, () =&gt; &#123;</span><br><span class="line"><span class="comment">//callback</span></span><br><span class="line">  <span class="comment">//重新计算高度</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>并且在这次调整的过程中，我想到了用 flex 属性来让右侧的筛选条件跟 table 自行分配空间，因为这类表格的页面结构基本是固定的，上面是筛选条件，下面是表格，于是我封装了一个  <code>&lt;form-page&gt;</code> 组件，结构就是大概 是这样：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-14-141421.png" alt></p><p>这个结构下，我就不用再去关心除了筛选条件的高度外我还需要减去多少的额外高度，我只要关心我的 table slot 区域有多少高度，我就把 table 设为多少高度就可以了。</p><p>当然内容展示区域的高度是需要计算过的，但是这个只要在全局样式中用 <code>calc</code> 计算一次高度就可以了。</p><p>下面是 demo 的演示效果：</p><video src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-14-element-ui-table-auto-height.mp4" style="width: 100%" controls></video><p><a href="https://github.com/Tit1e/element-ui-table-auto-height">demo 源码</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工作中由于公司业务需要，要求 table 做到整个 table 始终能在页面上完全显示， head 固定，body 超出滚动，由于公司使用的是 element-ui，el-table 组件提供了 height 属性，但是这个属性的值必须是具体的像素，因此，当页面的窗口大小发
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>AppleScript 初尝试</title>
    <link href="https://github.com/Tit1e/2020/03/14/127-appleScript-Thunder/"/>
    <id>https://github.com/Tit1e/2020/03/14/127-appleScript-Thunder/</id>
    <published>2020-03-14T02:15:48.000Z</published>
    <updated>2020-03-14T02:59:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>迅雷有时候会出现刚开始下载的时候速度很快，但是过几十秒，速度就只有几十 kb 的情况。正常下载太慢，循环暂停启动方法倒是可以，但是我总不能什么都不做就光坐电脑前不停点开始任务，暂停任务吧？况且我一般都是睡觉的时候挂着迅雷。</p><p>想起以前在用 windows 的时候接触过按键精灵这类模拟键鼠操作的软件，我觉得 Mac OS 平台应该也有类似的软件，但是一圈搜下来并没有找到，倒是找到了官方的脚本语言 AppleScript。它倒是可以模拟键鼠操作，只是得自己折腾。</p><p>那我能怕折腾么？于是直接开干，边在<a href="applescript://" target="_blank" rel="noopener">脚本编辑器</a>测试边 Google，没多久折腾出来了个能将就用的。后来我又</p><p>优化了一下，并且集成到了 Alfred 中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 如果直接用脚本编辑器执行，不需要第一行与最后行，这是要在 Alfred 中执行才需要的。</span><br><span class="line">on alfred_script(q)</span><br><span class="line">  tell application "System Events"</span><br><span class="line">tell application "Thunder"</span><br><span class="line"><span class="comment">--激活主窗口</span></span><br><span class="line">activate</span><br><span class="line"><span class="keyword">end</span> tell</span><br><span class="line"><span class="comment">--暂停一秒</span></span><br><span class="line">delay <span class="number">1</span></span><br><span class="line"><span class="comment">--全选任务，因只有选中才能暂停开始任务</span></span><br><span class="line"><span class="keyword">key</span> code <span class="number">0</span> <span class="keyword">using</span> &#123;command down&#125;</span><br><span class="line">tell process <span class="string">"Thunder"</span></span><br><span class="line">tell <span class="keyword">window</span> <span class="string">"迅雷"</span></span><br><span class="line">entire <span class="keyword">contents</span></span><br><span class="line"><span class="comment">--q 是传进来的参数，表示循环次数</span></span><br><span class="line"><span class="comment">--本代码中一次循环用时 20 + 2 秒，可根据实际情况调整</span></span><br><span class="line"><span class="comment">--q 的次数根据每次循环的时长来计算</span></span><br><span class="line"><span class="keyword">repeat</span> q times</span><br><span class="line"><span class="comment">--等待20秒后暂停任务</span></span><br><span class="line">delay <span class="number">20</span></span><br><span class="line">click button <span class="number">7</span></span><br><span class="line"><span class="comment">--暂停2秒后重新开始任务</span></span><br><span class="line">delay <span class="number">2</span></span><br><span class="line">click button <span class="number">6</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">repeat</span></span><br><span class="line"><span class="keyword">end</span> tell</span><br><span class="line"><span class="keyword">end</span> tell</span><br><span class="line"><span class="keyword">end</span> tell</span><br><span class="line"><span class="keyword">end</span> alfred_script</span><br></pre></td></tr></table></figure><p>在集成到 Alfred 的过程中踩了个坑，就是传参问题，我之前一直用 <code>{query}</code> 来获取传过来的参数，但是一直不成功，查了后原来这要直接用 <code>q</code> 就行了。其实在脚本第一行已经说明，但我一直以为是固定格式。</p><p>之后我发现使用 AppleScript 还有个好处就是脚本执行的时候可以不保持窗口最前：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-03-14-%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B6%202020-03-14%2010.47.37.gif" alt></p><p>由于 AppleScript 的资料太少了，官方文档也很简单，没有实现我想要的效果。其实我本来的逻辑是每次循环前先判断下载列表中有没有任务，有的话就执行，没有就退出循环。但是目前还没找到获取的方法，所以只能先将就一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;迅雷有时候会出现刚开始下载的时候速度很快，但是过几十秒，速度就只有几十 kb 的情况。正常下载太慢，循环暂停启动方法倒是可以，但是我总不能什么都不做就光坐电脑前不停点开始任务，暂停任务吧？况且我一般都是睡觉的时候挂着迅雷。&lt;/p&gt;
&lt;p&gt;想起以前在用 windows 的时候
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>阻止表单只有一个 input 时回车自动提交</title>
    <link href="https://github.com/Tit1e/2020/03/08/126-form-single-input/"/>
    <id>https://github.com/Tit1e/2020/03/08/126-form-single-input/</id>
    <published>2020-03-08T07:13:44.000Z</published>
    <updated>2020-03-08T07:35:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在开发过程中遇到过这个问题，就是当一个表单中只有一个 input 时，enter 会直接提交表单。当初我用的是 Element-UI  的表单组件，本来我以为是 Element-UI的问题，后来查了后发现是原生表单就有这个特性。我当时是使用异步请求的数据，因此并不需要原生的提交，所以只有一个 input 时得想办法阻止原生的提交功能。</p><p>Element-UI 因为是封装过的，可以用它自己的方法来解决：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只要在表单元素上加入 @submit.native.prevent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form</span> @<span class="attr">submit.native.prevent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原生表单的组织方式我也查了一下，在这总结一下：</p><p>方法一：</p><p>在表单中再加入一个隐藏的 input</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法二：</p><p>表单提交时阻止提交</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">"return false;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法三：</p><p>监听 input  <code>keydown</code> 事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeydown</span>=<span class="string">"if(event.keyCode === 13) &#123; return false &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前在开发过程中遇到过这个问题，就是当一个表单中只有一个 input 时，enter 会直接提交表单。当初我用的是 Element-UI  的表单组件，本来我以为是 Element-UI的问题，后来查了后发现是原生表单就有这个特性。我当时是使用异步请求的数据，因此并不需要原
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>快捷键粘贴上传至七牛</title>
    <link href="https://github.com/Tit1e/2020/03/08/125-paste-upload-qiniu/"/>
    <id>https://github.com/Tit1e/2020/03/08/125-paste-upload-qiniu/</id>
    <published>2020-03-08T06:00:24.000Z</published>
    <updated>2020-03-08T07:13:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前<a href="/2020/03/08/124-qiniu-axios/">这篇博客</a>解决了 axios 直传七牛的问题，这篇来讲一下从粘贴板直接上传到七牛云的实现方式。</p><p>首先需要了解的是出于安全问题，js 是没权限主动读取用户粘贴板中的内存的，当用户主动触发粘贴事件时，js 是可以通过 <code>paste</code> 事件来获取到其中内容的。如何触发这个粘贴事件这里就不做讨论，单说事件触发后怎么获取到文件，其实很简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 我的处理方式是给用户一个 input 用于粘贴</span></span><br><span class="line">  <span class="comment">// 因此这个判断是用于判断用户的粘贴事件是否是在指定元素上触发的</span></span><br><span class="line">  <span class="comment">// 这个判断并不是必须的</span></span><br><span class="line">  <span class="keyword">if</span> (event.srcElement.id === <span class="string">'up_snapshot_img_paste'</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取粘贴板中的内容</span></span><br><span class="line">    <span class="keyword">const</span> items = event.clipboardData &amp;&amp; event.clipboardData.items</span><br><span class="line">    <span class="keyword">let</span> file = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (items &amp;&amp; items.length) &#123;</span><br><span class="line">      <span class="comment">// 检索粘贴板items</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 获取图片</span></span><br><span class="line">        <span class="keyword">if</span> (items[i].type.indexOf(<span class="string">'image'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">          file = items[i].getAsFile()</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 触发上传</span></span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">      <span class="comment">// 此时file就是剪切板中的图片文件</span></span><br><span class="line">      <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData()</span><br><span class="line">      formData.append(<span class="string">'file'</span>, file)</span><br><span class="line">      formData.append(<span class="string">'token'</span>, <span class="string">'token'</span>)</span><br><span class="line">      formData.append(<span class="string">'key'</span>, <span class="string">'key'</span>)</span><br><span class="line">      <span class="keyword">const</span> $axios = axios.create(&#123; <span class="attr">withCredentials</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">      $axios(&#123;</span><br><span class="line">        url: <span class="string">'url'</span>,</span><br><span class="line">        data: formData,</span><br><span class="line">        method: <span class="string">'POST'</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 上传成功处理逻辑</span></span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 上传失败处理逻辑</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没有获取到图片时的处理逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定监听</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'paste'</span>, uploadFile)</span><br></pre></td></tr></table></figure><p>以上就是实现的代码了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前&lt;a href=&quot;/2020/03/08/124-qiniu-axios/&quot;&gt;这篇博客&lt;/a&gt;解决了 axios 直传七牛的问题，这篇来讲一下从粘贴板直接上传到七牛云的实现方式。&lt;/p&gt;
&lt;p&gt;首先需要了解的是出于安全问题，js 是没权限主动读取用户粘贴板中的内存的，当
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>axios 直传七牛问题</title>
    <link href="https://github.com/Tit1e/2020/03/08/124-qiniu-axios/"/>
    <id>https://github.com/Tit1e/2020/03/08/124-qiniu-axios/</id>
    <published>2020-03-08T03:33:26.000Z</published>
    <updated>2020-03-08T03:58:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天遇到了这样一个需求：监听粘贴事件，将粘贴板中的文件上传至七牛。</p><p>这个需求的实现过程我会另开一片文章，这篇文章主要用来记录我在使用 axios 直传七牛的过程中遇到的问题。</p><p>我本想这不是很简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData()</span><br><span class="line">  formData.append(<span class="string">'file'</span>, file)</span><br><span class="line">  formData.append(<span class="string">'token'</span>, <span class="keyword">this</span>.token)</span><br><span class="line">  formData.append(<span class="string">'key'</span>, <span class="keyword">this</span>.key)</span><br><span class="line">  axios.post(<span class="string">'url'</span>, formData).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// code......</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果返回的却是：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;error: "invalid multipart format: no multipart boundary param in Content-Type"&#125;</span><br></pre></td></tr></table></figure><p>然后我就开始在网上搜，试着改了 <code>Content-Type</code>，但还是没用，最后我在<a href="https://blog.qiatia.cn/2019/05/18/Axios/" target="_blank" rel="noopener">这里</a>找到了与我遇到相同问题的人，于是我用他的方法试了一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $axios = axios.create(&#123; <span class="attr">withCredentials</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData()</span><br><span class="line">  formData.append(<span class="string">'file'</span>, file)</span><br><span class="line">  formData.append(<span class="string">'token'</span>, <span class="keyword">this</span>.token)</span><br><span class="line">  formData.append(<span class="string">'key'</span>, <span class="keyword">this</span>.key)</span><br><span class="line">  $axios(&#123;</span><br><span class="line">    url: <span class="string">'url'</span>,</span><br><span class="line">    data: formData,</span><br><span class="line">    method: <span class="string">'post'</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// code......</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果果然成功了！</p><p>不过发生了个诡异的事情，在我写这篇文章的时候，我想重新复现一下问题，结果发现我上面直接使用 <code>axios.post</code> 也可以正常上传了，但前几天在试的时候的确是返回错误信息的！所以我现在有点怀疑人生。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天遇到了这样一个需求：监听粘贴事件，将粘贴板中的文件上传至七牛。&lt;/p&gt;
&lt;p&gt;这个需求的实现过程我会另开一片文章，这篇文章主要用来记录我在使用 axios 直传七牛的过程中遇到的问题。&lt;/p&gt;
&lt;p&gt;我本想这不是很简单：&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>TypeError: CleanWebpackPlugin is not a constructor</title>
    <link href="https://github.com/Tit1e/2020/02/27/123-webpack4-clean-webpack-plugin/"/>
    <id>https://github.com/Tit1e/2020/02/27/123-webpack4-clean-webpack-plugin/</id>
    <published>2020-02-27T13:23:27.000Z</published>
    <updated>2020-02-27T13:53:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在用 webpack 4.0 搭服务的时候，使用 clean-webpack-plugin 插件时遇上了一个报错：</p><p><code>TypeError: CleanWebpackPlugin is not a constructor</code></p><p>使用方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="comment">// 在 plugins 中</span></span><br><span class="line"><span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>])</span><br></pre></td></tr></table></figure><p>这个插件是用于打包时清空输出目录下上一次的打包文件，dist 是要清空的目标文件夹名称，之前就是这么使用的，现在却不行了，初步猜测应该是版本问题导致的。</p><p>既然报 <code>CleanWebpackPlugin is not a constructor</code> ，那我就打印一下这默认导出的是个什么：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-02-27-134644.png" alt></p><p>从打印中可以看出 <code>CleanWebpackPlugin</code> 是个对象，对象内部还有个 <code>CleanWebpackPlugin</code> 是个 class 类，那解决方法显而易见了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="comment">// 后来在网上了解到在这个插件的 3.0.0 版本中，可以不传路径，默认就是 output 中设置的文件夹</span></span><br><span class="line"><span class="keyword">new</span> CleanWebpackPlugin()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天在用 webpack 4.0 搭服务的时候，使用 clean-webpack-plugin 插件时遇上了一个报错：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TypeError: CleanWebpackPlugin is not a constructor&lt;/code&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="webpack" scheme="https://github.com/Tit1e/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>js 多文件下载</title>
    <link href="https://github.com/Tit1e/2020/02/24/122-download-files/"/>
    <id>https://github.com/Tit1e/2020/02/24/122-download-files/</id>
    <published>2020-02-24T13:37:48.000Z</published>
    <updated>2020-02-25T01:35:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天我接到了这样一个需求，因为同事无法搞定，就丢到我这边来了：前端点击一个按钮后发送一个请求，请求返回来一个数组，数组中是文件的下载地址，需要前端获取到数据后自动下载这些文件。</p><p>我刚接到这个需求的时候，想当然地觉得：这不是很简单嘛，平时也经常用到 js 模拟点击 <code>a</code> 标签进行下载，只是之前都只有一个文件。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-02-25-aclick-1.png" alt></p><p>现在是个数组嘛无非就是再加个循环咯：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-02-25-aforeach.png" alt></p><p>但实际情况却是，这种循环只会下载第一个文件，循环虽然执行了，但是点击事件却没有生效，于是我想是不是需要加个定时器：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-02-25-settimeout.png" alt></p><p>然而结果依旧与之前一样，只会下载第一个文件，哪怕我把时间设置成 5000，第二次下载依旧没有触发。</p><p>最后 Google 了一下，下载方式出了模拟点击 <code>a</code> 标签，还有用 <code>iframe</code> 模拟打开标签页的方式，于是我赶紧试了下：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-02-25-iframe-2.png" alt></p><p>果然没问题了，两个文件都自动进行了下载。</p><p>而且用 <code>iframe</code> 还有一个好处就是用户体验上比使用 <code>a</code> 标签好，因为用模拟点击，在新页面打开的时候难免会闪一下，哪怕这个时间不到一秒，但对用户还是会有影响，而使用 <code>iframe</code> 就不会有这种使用上的割裂感。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我接到了这样一个需求，因为同事无法搞定，就丢到我这边来了：前端点击一个按钮后发送一个请求，请求返回来一个数组，数组中是文件的下载地址，需要前端获取到数据后自动下载这些文件。&lt;/p&gt;
&lt;p&gt;我刚接到这个需求的时候，想当然地觉得：这不是很简单嘛，平时也经常用到 js 模拟点
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>《数据结构与算法 JavaScript 描述》</title>
    <link href="https://github.com/Tit1e/2020/02/22/121-data-structures-algorithms-with-javascript/"/>
    <id>https://github.com/Tit1e/2020/02/22/121-data-structures-algorithms-with-javascript/</id>
    <published>2020-02-22T13:44:55.000Z</published>
    <updated>2020-02-22T14:45:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-02-22-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%20javascript%20%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0.jpg" alt></p><p>平时工作中业务代码写得比较多，关于数据结构在工作中几乎涉及不到，之前在同事那看到了这本书，于是借了过来，今天把它给看完了。</p><p>这本书要我评价的话，有收获，但是内容质量不高，甚至是偏低。完全对不起它 49 元的定价，虽然这不是我出的钱。书中的 demo 有不少印刷或者说是语法错误，也有逻辑错误。开始看到错误我还怀疑自己，特地去网上搜索了本书的评价，结果发现果然是代码本身有问题。作为一本技术读物，书中竟然会出现如此明显的错误，而且是代码错误，我觉得这有点夸张了。</p><p>这本“动物书”有点儿掉价。</p><p>书中的例子都比较基础，讲得浅显易懂，入门来说还行，但也仅仅是入门罢了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-02-22-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>js 模拟鼠标拖拽 mouseup 与 click 事件冲突解决方案</title>
    <link href="https://github.com/Tit1e/2019/12/11/120-drag-and-click/"/>
    <id>https://github.com/Tit1e/2019/12/11/120-drag-and-click/</id>
    <published>2019-12-11T13:48:47.000Z</published>
    <updated>2020-02-22T13:47:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司项目中最近有个需要需要拖拽框选日期，也能单击选择，类似桌面选择文件这种，于是我 google + 自己改造终于实现了这个需求，但是在使用过程中有个问题一直存在，就是有时候单击无法选中日期。后来我打印 events 发现无法选择的时候，events 是拖拽时候显示的虚线框，而不是真正想点击的点击的元素。之后我就一直在网上找寻解决方法，无意中发现了一个冷门 CSS 属性：pointer-events: none。MDN对它的定义是：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-12-18-142800.png" alt></p><p>说简单点就是不会触发元素的 <code>onclick</code> 事件了。</p><p>我使用了这个属性后，的确不会再打印出虚线框了，但是问题还是没解决，于是继续排查，最后发现是有的点击只是看起来是点击，其实是触发了拖动事件，而问题就出在拖动结束时的鼠标抬起 <code>mouseup</code> 事件与<code>click</code> 事件一起触发，从而导致出现了新的问题。</p><p>最后的解决方案是定义了一个变量，平时为 <code>false</code>，一但触发了 <code>mousemove</code> 事件，就把它设置为 <code>true</code> ，然后在 <code>mouseup</code> 事件结束时设置一个定时器，延时 200 毫秒，200毫秒后把这个变量设为 <code>false</code> ，因为 <code>mouseup</code> 之后马上会触发 <code>click</code> 事件，这个时间肯定是小于 200 毫秒的，所以在 点击事件的函数中再判断下这个变量是否为 <code>true</code> 就可以了，如果为 <code>true</code> 则直接 <code>return</code> 。</p><p><a href="https://evolly.one/demos/drag-and-click/" target="_blank" rel="noopener">Demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;公司项目中最近有个需要需要拖拽框选日期，也能单击选择，类似桌面选择文件这种，于是我 google + 自己改造终于实现了这个需求，但是在使用过程中有个问题一直存在，就是有时候单击无法选中日期。后来我打印 events 发现无法选择的时候，events 是拖拽时候显示的虚线框
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 报错：Data too long for column</title>
    <link href="https://github.com/Tit1e/2019/07/05/119-mysql-data-too-long-for-column/"/>
    <id>https://github.com/Tit1e/2019/07/05/119-mysql-data-too-long-for-column/</id>
    <published>2019-07-05T07:07:41.000Z</published>
    <updated>2020-02-22T13:47:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子写了一个 <a href="https://github.com/Tit1e/Js-Practice">Js-Practice</a> 项目，由于是纯前端页面，所以所有的题目都是写死在文件中的，导致题目更新后，代码很容易出现冲突，所以我就想着把题目存到数据库去，用 nodejs 写一个服务端，因为正好有一台空闲着的服务器，顺便学习一下 nodejs。</p><p>项目中数据库用的 Mysql，在使用过程中，本地都没什么问题，但是到了线上，就有问题了。在执行某条 sql 的时候，数据库抛出这样一个错误：</p><blockquote><p>Data too long for column ‘XXXX’ at row 1</p></blockquote><p>网上找了一圈发现了解决方法：</p><blockquote><p>首先连接数据库：</p><p>mysql -h 127.0.0.1 -u root -p 123;</p><p>然后执行：</p><p>SET @@global.sql_mode= ‘’;</p><p>最后退出：</p><p>quit</p></blockquote><p>之后就可以正常运行 sql 了。</p><p>这个问题好像是因为 Mysql 使用严格模式导致的，严格模式下，Mysql 会截断过长的插入值，所以导致了报错，上面的命令就是关闭了 Mysql 的严格模式。</p><p><a href="http://huanyouchen.github.io/2018/05/22/mysql-error-1406-Data-too-long-for-column/" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前阵子写了一个 &lt;a href=&quot;https://github.com/Tit1e/Js-Practice&quot;&gt;Js-Practice&lt;/a&gt; 项目，由于是纯前端页面，所以所有的题目都是写死在文件中的，导致题目更新后，代码很容易出现冲突，所以我就想着把题目存到数据库去，用 n
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3 直接将 markdown 转为 html</title>
    <link href="https://github.com/Tit1e/2019/07/01/118-vue-markdown-loader/"/>
    <id>https://github.com/Tit1e/2019/07/01/118-vue-markdown-loader/</id>
    <published>2019-07-01T13:56:15.000Z</published>
    <updated>2020-02-22T13:47:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>vue-cli3 中直接将 <code>.md</code> 文件转为 html。我用到的是 webpack 的 <a href="https://github.com/QingWei-Li/vue-markdown-loader">vue-markdown-loader</a>，这个 loader 可以直接将 <code>.md</code> 文件转换为 vue 的组件，然后可以直接在页面中使用，非常的方便。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-markdown-loader -D</span><br><span class="line">npm i  vue-loader vue-template-compiler -D</span><br><span class="line"><span class="comment"># 样式</span></span><br><span class="line">npm i github-markdown-css -D</span><br><span class="line">npm i highlight.js -D</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js 如果没有就在项目根目录新建</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.module.rule(<span class="string">'md'</span>)</span><br><span class="line">      .test(<span class="regexp">/\.md/</span>)</span><br><span class="line">      .use(<span class="string">'vue-loader'</span>)</span><br><span class="line">      .loader(<span class="string">'vue-loader'</span>)</span><br><span class="line">      .end()</span><br><span class="line">      .use(<span class="string">'vue-markdown-loader'</span>)</span><br><span class="line">      .loader(<span class="string">'vue-markdown-loader/lib/markdown-compiler'</span>)</span><br><span class="line">      .options(&#123;</span><br><span class="line">        raw: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- class markdown-body 必须加，否则标签样式会出现问题 --&gt;</span><br><span class="line">  &lt;div class=&quot;markdown-body&quot;&gt;</span><br><span class="line">    &lt;markdown /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 引入 markdown 文件，引入后是一个组件，需要在 components 中注册</span><br><span class="line">import markdown from &apos;@/assets/ApiDocument.md&apos;</span><br><span class="line">// 代码高亮</span><br><span class="line">import &apos;highlight.js/styles/github.css&apos;</span><br><span class="line">// 其他元素使用 github 的样式</span><br><span class="line">import &apos;github-markdown-css&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    markdown</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vue-cli3 中直接将 &lt;code&gt;.md&lt;/code&gt; 文件转为 html。我用到的是 webpack 的 &lt;a href=&quot;https://github.com/QingWei-Li/vue-markdown-loader&quot;&gt;vue-markdown-loader&lt;
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小程序报错：Page is not constructed because it is not found</title>
    <link href="https://github.com/Tit1e/2019/06/24/117-mini-program-page-is-not-constructed/"/>
    <id>https://github.com/Tit1e/2019/06/24/117-mini-program-page-is-not-constructed/</id>
    <published>2019-06-24T13:07:52.000Z</published>
    <updated>2020-02-22T13:46:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近之前写的小程序进行了修改，目录结构进行了调整，导致程序报了错，找了很久才解决问题。</p><p>控制台报错如下：</p><blockquote><p>Page is not constructed because it is not found</p></blockquote><p>网上搜了很多的答案，但是都没解决我的问题。问题发生的前提是这样的：小程序是我用 mp-vue 开发的，这次底部加了个导航，于是多了个目录，原来的目录命名有点问题，我就把原来的一个目录名字改了，然后把引用的一些资源路径什么的都改完之后，这个问题就存在了。我重启了微信开发者工具，重跑了 mp-vue 的服务器，网上搜了一大圈，都没解决问题。</p><p>最后，解决方法是：把 mp-vue 的服务器停止，然后把输出目录整个删除，在重新启动服务器生成一下目录就好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近之前写的小程序进行了修改，目录结构进行了调整，导致程序报了错，找了很久才解决问题。&lt;/p&gt;
&lt;p&gt;控制台报错如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Page is not constructed because it is not found&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="小程序" scheme="https://github.com/Tit1e/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>群晖上手体验</title>
    <link href="https://github.com/Tit1e/2019/06/15/116-synology/"/>
    <id>https://github.com/Tit1e/2019/06/15/116-synology/</id>
    <published>2019-06-15T09:15:21.000Z</published>
    <updated>2020-02-22T13:46:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>心心念的 群晖 Nas 终于在昨天到了，已经使用了差不多一天，原来硬盘上的资料已经全部转移到群晖上了，今天又研究了一下网盘同步。</p><p>我使用 Nas 主要用来下载电影与保存一些其他资料，另外还有是 Mac 的备份，主要之前一直挂着移动硬盘，插拔频繁，感觉 USB 口已经有点接触问题，所以心里还是觉得没底，这也是我上 Nas 的一个很重要的原因。</p><p>就目前使用体验来说，还是挺满意，就是从电脑到 Nas Wi-Fi 传输速度最高只有 40Mb/s， 不知道是什么原因，路由器是千兆路由，用的 5G 的 Wi-Fi，网线也没问题，应该是哪里有问题，不过这个速度平时无所谓，也就转移资料的时候会觉得 40Mb/s 的速度不够用。</p><p>之前下载的电影已全部转移至 Nas，Video Station 自己能搜索封面与电影信息这一点挺好的，对我这种没封面就浑身难受的人来说体验上非常舒服。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-06-15-092813.png" alt></p><p>今天尝试了 Download Station 下电影电视剧，种子、RSS、百度云同步都试了。百度云速度感人，每个文件稳定 80 Kb/s，其他两种速度比较不稳定，经常没速度或速度明显过慢，但具体原因我也不清楚。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-06-15-091953.png" alt></p><p>有些不急的电影或电视剧我就把它放在百度云的同步目录下让它自己慢慢同步，用 RSS 下载电视剧我觉得还是挺方便的，特别是配合 <a href="https://github.com/DIYgod/RSSHub">RSSHub</a>，下载字幕组上的剧很方便。就是速度有点不稳定。但是不是急着刷，一天也能下载完，所以问题也不是太大。</p><p>移动端我用的 iOS，没有使用群晖官方的 App，用的是 nplayer，因为官方的不支持有些 MKV 的在线播放，而转码工具不支持 DTS 的转码，而 nplayer 可以直接播放，所以我就买了 nplayer， Lite 版本 也是无法播放的，必须使用付费版。</p><p>QuickConnect 的速度非常慢，后面可能会买一个 Nas 伴侣来做内网穿透，QC 的速度我在买之前在网上也看到很多人在吐槽了，不过对我来说问题不算大。</p><p>对我来说它已经满足了我最主要的需求：至少我在家的时候不会有放电影必须插着移动硬盘，电影时电脑也不用连着移动硬盘，也不用等下载完成才能合上电脑，时间机器备份的时候也不用连着移动硬盘。</p><p>总之没有连接线真是爽爆了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;心心念的 群晖 Nas 终于在昨天到了，已经使用了差不多一天，原来硬盘上的资料已经全部转移到群晖上了，今天又研究了一下网盘同步。&lt;/p&gt;
&lt;p&gt;我使用 Nas 主要用来下载电影与保存一些其他资料，另外还有是 Mac 的备份，主要之前一直挂着移动硬盘，插拔频繁，感觉 USB 
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>Mac 应用推荐</title>
    <link href="https://github.com/Tit1e/2019/06/06/115-mac-apps/"/>
    <id>https://github.com/Tit1e/2019/06/06/115-mac-apps/</id>
    <published>2019-06-06T15:55:33.000Z</published>
    <updated>2020-02-22T13:46:43.000Z</updated>
    
    <content type="html"><![CDATA[<p>受伤这台 Macbook Pro 也用了 2 年多了，累积了不少觉得好用的 App，趁着同事刚好买了 Macbook，整理了安利一下。</p><h2 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a><a href="https://www.alfredapp.com/" target="_blank" rel="noopener">Alfred</a></h2><p>Mac 上的利器，之前写过几篇关于 Alfred 的文章，比如用它快捷执行终端命令，快捷压缩图片。对我来说最主要的还是利用 workflows 执行终端命令与快速启动应用。使用 workflows 需要激活软件。</p><h2 id="iPaste"><a href="#iPaste" class="headerlink" title="iPaste"></a><a href="https://itunes.apple.com/cn/app/ipaste-%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%B7%A5%E5%85%B7/id1056935452?mt=12" target="_blank" rel="noopener">iPaste</a></h2><p>剪切板增强工具，可以储存很多剪切板的历史记录，其实 Alfred 也有类似功能，只是我一开始用的是 iPaste，习惯后也就没去特意研究 Alfred 中的剪切板功能。这个工具目前我离不开了，已经成习惯，确实大大提高了我的工作效率。价格我忘了，反正是完全可以接受的。</p><h2 id="iText"><a href="#iText" class="headerlink" title="iText"></a><a href="https://itunes.apple.com/cn/app/itext-ocr-%E8%AF%86%E5%88%AB-%E7%BF%BB%E8%AF%91%E5%9B%BE%E7%89%87%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97/id1314980676?mt=12" target="_blank" rel="noopener">iText</a></h2><p>iText 是一款 OCR 识别工具，支持截图直接识别或者上传图片识别，可以使用谷歌、腾讯或百度的识别 API，识别工具非常多，但既简洁使用体验又好的却不多。我使用频率不高，免费的次数已经够用，如果有这方面需求的人还是强烈推荐。</p><h2 id="iPic"><a href="#iPic" class="headerlink" title="iPic"></a><a href="https://itunes.apple.com/cn/app/ipic-markdown-%E5%9B%BE%E5%BA%8A-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7/id1101244278?mt=12" target="_blank" rel="noopener">iPic</a></h2><p>图床工具，非常简洁，目前其实已经支持文件的上传，我主要还是用的图片的上传，空间用的腾讯云的 10G 免费存储，因为它支持 https，之前的用七牛，但它要用 https 必须绑定域名，我嫌麻烦就转到腾讯云了。价格我觉得也可以，一年 50+，如果我没记错的话。</p><h2 id="Klib"><a href="#Klib" class="headerlink" title="Klib"></a><a href="https://itunes.apple.com/cn/app/klib-%E6%A0%87%E6%B3%A8-%E7%AC%94%E8%AE%B0%E7%AE%A1%E7%90%86/id1196268448?mt=12" target="_blank" rel="noopener">Klib</a></h2><p>如果你有 Kindle，那 Klib 用于你的笔记管理一定非常合适。你可以一键导入你 Kindle 中的所有笔记，你可以编辑，也可以生成简洁的网页分享给朋友，也可以导出，总之也是我非常喜欢的一个软件。其实这个与上面的三个软件都是同一个开发者开发的。</p><h2 id="Mos"><a href="#Mos" class="headerlink" title="Mos"></a><a href="https://github.com/Caldis/Mos">Mos</a></h2><p>让你使用鼠标滚动也能有平滑滚动效果，并且滚动方向与触摸板保持一致（正常情况下 Mac 用鼠标滚动与触摸板的方向是相反的）。</p><h2 id="Bartender-3"><a href="#Bartender-3" class="headerlink" title="Bartender 3"></a><a href="https://www.macbartender.com/" target="_blank" rel="noopener">Bartender 3</a></h2><p>Mac 状态栏收纳工具，我平常状态下状态栏中有20个图标，而有不少工具使用的频率是很低的，或者说触发方式是通过快捷键触发的，所以状态栏上的图标或许根本用不到，因此很有必要用一个小工具把状态栏中不常用的图标隐藏起来，Bartender 3 就是用来解决这个问题的。</p><h2 id="itsycal"><a href="#itsycal" class="headerlink" title="itsycal"></a><a href="https://www.mowglii.com/itsycal/" target="_blank" rel="noopener">itsycal</a></h2><p>Mac 上的时间点击时出现的是一些切换选项，而用惯 Windows 的用户基本已经习惯了点击右下角时间出现日历界面，而且这个交互确实非常方便，但 Mac 上却没有这个功能，每次我点时间想看看日历，结果却总是让我失望，直到我找到这款软件。它可以把时间格式设置的跟原生的时间格式一样，但它点击后会出现日历。唯一一点不足就是这个软件的时间框长度是会改变的，当时间改变时，时间组件的宽度可能出现席位的变化，而这个细微的变化总是会被我眼角余光捕捉到，我总以为有什么消息过来，而不自觉得把注意力放到右上角。不过比起它的优点，这个缺点还是可以忍受的。</p><h2 id="xnip"><a href="#xnip" class="headerlink" title="xnip"></a><a href="https://itunes.apple.com/cn/app/xnip-%E6%88%AA%E5%9B%BE-%E6%A0%87%E6%B3%A8/id1221250572?mt=12" target="_blank" rel="noopener">xnip</a></h2><p>截图工具，6 元一年，要啥自行车……重要的是虽然便宜，但真的好用，而且它支持滚动截屏，多窗口截屏，标注也很方便，总之6元买不了吃亏买不了上当。</p><h2 id="magnet"><a href="#magnet" class="headerlink" title="magnet"></a><a href="https://magnet.crowdcafe.com/" target="_blank" rel="noopener">magnet</a></h2><p>Mac上的窗口管理工具，Windows 上拖动窗口贴边自动平分或全屏非常方便，但 Mac 自身并不支持，自带的分屏与这个还是有区别的。于是就有了这款软件，它还能自定义快捷键，能使用键盘快速调整窗口至想要的位置与大小。价格十几还是几十块好像。</p><h2 id="PopClip"><a href="#PopClip" class="headerlink" title="PopClip"></a><a href="https://itunes.apple.com/cn/app/popclip/id445189367?mt=12" target="_blank" rel="noopener">PopClip</a></h2><p>类似 iPhone 上长按出现的菜单，这款软件可以让你在 Mac 上选中文字后也路线类似的菜单，然后可以对选中的文字进行操作，比如翻译，搜索引擎搜索，购物网站搜索等。也是提高效率必备。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;受伤这台 Macbook Pro 也用了 2 年多了，累积了不少觉得好用的 App，趁着同事刚好买了 Macbook，整理了安利一下。&lt;/p&gt;
&lt;h2 id=&quot;Alfred&quot;&gt;&lt;a href=&quot;#Alfred&quot; class=&quot;headerlink&quot; title=&quot;Alfre
      
    
    </summary>
    
    
      <category term="mac" scheme="https://github.com/Tit1e/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>JS Practice</title>
    <link href="https://github.com/Tit1e/2019/06/06/114-js-practice/"/>
    <id>https://github.com/Tit1e/2019/06/06/114-js-practice/</id>
    <published>2019-06-06T15:23:54.000Z</published>
    <updated>2020-02-22T13:46:34.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Tit1e/js-practice/tree/master">JS Practice</a> 是给公司新来前端做练习题的项目，搭这个项目的过程中对我来说也是一个复习的过程，顺便过了一遍 Element-UI 的更新内容，之前公司用的 2.4+ 的版本，突然发现已经更新到了 2.9+，还更新了不少组件，有些原有组件拓展了不少属性。趁这个机会刚好过一遍心中有个大概，好在往后业务中有需要的时候使用。</p><p>项目目前还未完成，日后会逐渐增加内容，希望同事能尽快提升自己，帮我分担工作，当然我也要不断提升自己，不能被追上呀。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-06-06-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-06-06%2023.45.55.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/Tit1e/js-practice/tree/master&quot;&gt;JS Practice&lt;/a&gt; 是给公司新来前端做练习题的项目，搭这个项目的过程中对我来说也是一个复习的过程，顺便过了一遍 Element-UI 的更新内容
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>使用 mpvue 开发小程序过程中遇到的问题及总结</title>
    <link href="https://github.com/Tit1e/2019/05/01/113-mpvue-problems/"/>
    <id>https://github.com/Tit1e/2019/05/01/113-mpvue-problems/</id>
    <published>2019-05-01T07:48:18.000Z</published>
    <updated>2019-05-09T16:07:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用 <a href="https://github.com/Meituan-Dianping/mpvue">mpvue</a> 开发一个小程序，在这过程中遇到了不少问题，因为是第一次开发，遇到的问题可能比较基础，在这里做一个记录。</p><ul><li><p>如果你底部导航栏有三个页面，在这三个页面中的 created 中的代码会在进入小程序的时候就被执行，如果你想切到对应页面后才执行相应的方法，需要把代码写在 mounted 钩子中。</p></li><li><p>虽然官方是说 mpvue 支持 slot，但是我在实际使用的过程中，会出现奇奇怪怪的问题，不建议使用。</p></li><li><p>Vuex 可以使用，并且支持程度比较好，但是默认你无法在代码中使用 <code>this.$store</code> 来获取 store，每次你要使用 store 的时候都需要在页面中引入 store，<code>import store from &#39;/path/to/sotre.js&#39;</code>，然后就可以正常使用了，但是我们可以通过将 store 绑定至 Vue 的原型上，不是就可以使用 <code>this.$store</code> 了吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main.js</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'/path/to/store.js'</span></span><br><span class="line">Vue.prototype.$store = store</span><br></pre></td></tr></table></figure></li><li><p>对应页面的 <code>main.json</code> 中加入 <code>&quot;enablePullDownRefresh&quot;: true</code> 配置项可开启下拉刷新，然后在 <code>onPullDownRefresh</code> 钩子中可加入刷新的操作代码，不过你需要使用  <code>wx.stopPullDownRefresh()</code> 来解除下拉后的 loading 动画。</p></li><li><p><code>onReachBottom</code> 钩子在页面滚动到底部时出发，可用于实现到达底部时自动加载列表。</p></li><li><p><code>vidoe</code> 、<code>canvas</code> 、<code>map</code>、<code>textarea</code> 这些由客户端创建的原生组件在小程序中层级永远的最高的，所以在正常情况下这些元素永远是置顶的，<code>cover-view</code>、<code>cover-image</code> 这些标签可以解决这个问题，但是它们有很大的局限性，<code>cover-view</code> 只能嵌套 <code>cover-view</code> 标签或 <code>button</code> 标签，并且并不是所有 css 样式对这些标签有效，所以这些标签还是无法满足比较复杂的组件。项目中由于这个问题的存在，我将筛选条件进行的调整，最后采用点击筛选侧滑出筛选项，并在显示筛选项的时候隐藏 echarts 图表，点击搜索后再重新展示图表来解决了这个问题。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在使用 &lt;a href=&quot;https://github.com/Meituan-Dianping/mpvue&quot;&gt;mpvue&lt;/a&gt; 开发一个小程序，在这过程中遇到了不少问题，因为是第一次开发，遇到的问题可能比较基础，在这里做一个记录。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="小程序" scheme="https://github.com/Tit1e/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序上传图片至七牛</title>
    <link href="https://github.com/Tit1e/2019/04/27/112-mini-program-qiniu-upload/"/>
    <id>https://github.com/Tit1e/2019/04/27/112-mini-program-qiniu-upload/</id>
    <published>2019-04-26T16:13:20.000Z</published>
    <updated>2019-08-16T16:13:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近天天赶着写小程序，没什么空余时间，所以没怎么写博客，但开发小程序过程中踩了不少坑，到时候可以总结一下。</p><p>今天先写下在小程序中如何上传文件至七牛云。</p><p>首先去<a href="https://github.com/gpake/qiniu-wxapp-sdk">这里</a>下载小程序上传的 SDK，文件在 <code>sdk</code> 目录下。然后在代码中引入就行了。先放上我完整的上传函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">uploadImage()&#123;</span><br><span class="line">  <span class="comment">// 引入七牛的上传sdk</span></span><br><span class="line">      <span class="keyword">const</span> qiniuUploader = <span class="built_in">require</span>(<span class="string">"../../../../../static/lib/qiniuUploader.js"</span>)</span><br><span class="line">      <span class="comment">// 调用微信的选择图片 API</span></span><br><span class="line">      wx.chooseImage(&#123;</span><br><span class="line">        success: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 图片的路径数组</span></span><br><span class="line">          <span class="keyword">let</span> &#123;tempFilePaths&#125; = data</span><br><span class="line">          <span class="comment">// 选择成功后显示正在上传的 loading</span></span><br><span class="line">          wx.showLoading(&#123;</span><br><span class="line">            title: <span class="string">'正在上传'</span>,</span><br><span class="line">            mask: <span class="literal">true</span></span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="comment">// 由于是数组，所欲需要循环将每张图片依次上传</span></span><br><span class="line">          tempFilePaths.map(<span class="function">(<span class="params">r,i</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// getQiniu 函数用于获取一些上传的参数，比如 token，服务器地址，绑定的域名等</span></span><br><span class="line">            getQiniu().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// token</span></span><br><span class="line">              <span class="keyword">let</span> uptoken = res.data.val.token</span><br><span class="line">              <span class="comment">// 绑定的域名</span></span><br><span class="line">              <span class="keyword">let</span> domain = res.data.bucket_url</span><br><span class="line">              <span class="comment">// 服务器地址</span></span><br><span class="line">              <span class="keyword">let</span> uploadURL = res.data.up_server</span><br><span class="line">              <span class="comment">// 开始上传</span></span><br><span class="line">              qiniuUploader.upload(</span><br><span class="line">                r, <span class="comment">//上传的图片</span></span><br><span class="line">                (req) =&gt; &#123;  <span class="comment">//回调 success</span></span><br><span class="line">                  <span class="comment">// code...</span></span><br><span class="line">                &#125;, (error) =&gt; &#123; <span class="comment">//回调 fail</span></span><br><span class="line">                  <span class="built_in">console</span>.log(<span class="string">'error: '</span> + error);</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="comment">// region 要根据你获取到或已知的的上传服务器地址去对应相应的地区，对应表可见下文或 Github 的 README.md</span></span><br><span class="line">                  region: <span class="string">'ECN'</span>,</span><br><span class="line">                  uptoken: uptoken,</span><br><span class="line">                  uploadURL: uploadURL,</span><br><span class="line">                  domain: domain,</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 最后一张上传完成后关闭 loading</span></span><br><span class="line">            <span class="keyword">if</span>(i === tempFilePaths.length)&#123;</span><br><span class="line">              wx.hideLoading()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><table><thead><tr><th>存储区域</th><th>区域代码</th><th>HTTPS 地址</th></tr></thead><tbody><tr><td>华东</td><td>ECN</td><td><a href="https://up.qiniup.com" target="_blank" rel="noopener">https://up.qiniup.com</a></td></tr><tr><td>华北</td><td>NCN</td><td><a href="https://up-z1.qiniup.com" target="_blank" rel="noopener">https://up-z1.qiniup.com</a></td></tr><tr><td>华南</td><td>SCN</td><td><a href="https://up-z2.qiniup.com" target="_blank" rel="noopener">https://up-z2.qiniup.com</a></td></tr><tr><td>北美</td><td>NA</td><td><a href="https://up-na0.qiniup.com" target="_blank" rel="noopener">https://up-na0.qiniup.com</a></td></tr><tr><td>新加坡</td><td>ASG</td><td><a href="https://up-as0.qiniup.com" target="_blank" rel="noopener">https://up-as0.qiniup.com</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近天天赶着写小程序，没什么空余时间，所以没怎么写博客，但开发小程序过程中踩了不少坑，到时候可以总结一下。&lt;/p&gt;
&lt;p&gt;今天先写下在小程序中如何上传文件至七牛云。&lt;/p&gt;
&lt;p&gt;首先去&lt;a href=&quot;https://github.com/gpake/qiniu-wxap
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="小程序" scheme="https://github.com/Tit1e/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>0421 一周总结</title>
    <link href="https://github.com/Tit1e/2019/04/21/111-2019-04-21-week-summary/"/>
    <id>https://github.com/Tit1e/2019/04/21/111-2019-04-21-week-summary/</id>
    <published>2019-04-21T09:19:08.000Z</published>
    <updated>2019-04-21T09:41:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>这周来了个小程序的开发任务，之前没怎么接触过小程序，听闻之前美团开源了一个 vue 转小程序的工具，于是打算一用。到目前为止静态页面基本开发完成，还剩下接口对接。接下来还有多少坑我也不知道，但硬着头皮也得上呀。期限是下周五。</p><p>在小公司特别是岗位只有自己一人的时候，就更加需要广泛涉猎多种技术，前端的话得适应多端的开发，最好也了解后端的一些东西，会一门后台语言，了解后台的一些运行机制，对于前端的开发也是有帮助的。至少对我来说，开始的时候被后端逼着学了一点后端的东西，目前看来对我还是挺有帮助的。其实如果在不断提升自己，大部分人最后都基本上会接触到一大堆东西，当然专精的方向可能仍有区别。</p><p>无论怎样，最后提升自己才是关键，在提升自己的同时，也要将这种提升正向输出到公司业务中。这样才是有成果的提升。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这周来了个小程序的开发任务，之前没怎么接触过小程序，听闻之前美团开源了一个 vue 转小程序的工具，于是打算一用。到目前为止静态页面基本开发完成，还剩下接口对接。接下来还有多少坑我也不知道，但硬着头皮也得上呀。期限是下周五。&lt;/p&gt;
&lt;p&gt;在小公司特别是岗位只有自己一人的时
      
    
    </summary>
    
    
      <category term="一周总结" scheme="https://github.com/Tit1e/tags/%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>正确地偷懒</title>
    <link href="https://github.com/Tit1e/2019/04/18/110-use-mac-efficiently/"/>
    <id>https://github.com/Tit1e/2019/04/18/110-use-mac-efficiently/</id>
    <published>2019-04-18T15:25:14.000Z</published>
    <updated>2019-04-18T15:45:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天跟同事聊天聊到 Mac OS 上的一些实用工具，到时候我会专门写一篇文章来介绍我在平时使用 Macbook 过程中积累下来的使用软件。这里不详细展开。</p><p>Mac OS 向来以使用流畅，界面美观，工具丰富出名。这三点同样也吸引着我。我入 Macbook 的主要原因还是因为 Windows 对命令行的支持不行，而 Linux 对日用软件的支持又不好，因此 Mac OS 成了我仅有的选择。但是不得不说买得很值，无论是续航，显示效果，系统运行流畅性都跟我之前的 Windows 好一大截，当然价格也比我原来的 笔记本高出一大截。</p><p>在入了 Macbook 之后，我每次在使用过程中遇到不顺畅的时候总是会去 google 有没有好用的工具能让这类操作变得简便。说白了就是懒，不想做一些无意义的机械式的重复操作，于是慢慢地我就沉淀下来了一些好用的软件，无论是日常使用的还是开发中使用的。这些工具为我节省了不少时间。</p><p>我所认为的偷懒是在不影响工作成果的前提下，使用一些”奇技淫巧”加快工作的完成速度，从而省出时间来”偷懒”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天跟同事聊天聊到 Mac OS 上的一些实用工具，到时候我会专门写一篇文章来介绍我在平时使用 Macbook 过程中积累下来的使用软件。这里不详细展开。&lt;/p&gt;
&lt;p&gt;Mac OS 向来以使用流畅，界面美观，工具丰富出名。这三点同样也吸引着我。我入 Macbook 的主要
      
    
    </summary>
    
    
      <category term="碎碎念" scheme="https://github.com/Tit1e/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
</feed>
