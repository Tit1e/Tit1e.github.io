<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tit1e</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Tit1e/"/>
  <updated>2019-06-09T14:39:08.773Z</updated>
  <id>https://github.com/Tit1e/</id>
  
  <author>
    <name>Tit1e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac 应用推荐</title>
    <link href="https://github.com/Tit1e/2019/06/06/115-mac-apps/"/>
    <id>https://github.com/Tit1e/2019/06/06/115-mac-apps/</id>
    <published>2019-06-06T15:55:33.000Z</published>
    <updated>2019-06-09T14:39:08.773Z</updated>
    
    <content type="html"><![CDATA[<p>受伤这台 Macbook Pro 也用了 2 年多了，累积了不少觉得好用的 App，趁着同事刚好买了 Macbook，整理了安利一下。</p><h2 id="Alfred"><a href="#Alfred" class="headerlink" title="Alfred"></a><a href="https://www.alfredapp.com/" target="_blank" rel="noopener">Alfred</a></h2><p>Mac 上的利器，之前写过几篇关于 Alfred 的文章，比如用它快捷执行终端命令，快捷压缩图片。对我来说最主要的还是利用 workflows 执行终端命令与快速启动应用。使用 workflows 需要激活软件。</p><h2 id="iPaste"><a href="#iPaste" class="headerlink" title="iPaste)"></a><a href="[https://itunes.apple.com/cn/app/ipaste-%E5%89%AA%E8%B4%B4%E6%9D%BF%E5%B7%A5%E5%85%B7/id1056935452?mt=12](https://itunes.apple.com/cn/app/ipaste-剪贴板工具/id1056935452?mt=12">iPaste</a>)</h2><p>剪切板增强工具，可以储存很多剪切板的历史记录，其实 Alfred 也有类似功能，只是我一开始用的是 iPaste，习惯后也就没去特意研究 Alfred 中的剪切板功能。这个工具目前我离不开了，已经成习惯，确实大大提高了我的工作效率。价格我忘了，反正是完全可以接受的。</p><h2 id="iText"><a href="#iText" class="headerlink" title="iText)"></a><a href="[https://itunes.apple.com/cn/app/itext-ocr-%E8%AF%86%E5%88%AB-%E7%BF%BB%E8%AF%91%E5%9B%BE%E7%89%87%E4%B8%AD%E7%9A%84%E6%96%87%E5%AD%97/id1314980676?mt=12](https://itunes.apple.com/cn/app/itext-ocr-识别-翻译图片中的文字/id1314980676?mt=12">iText</a>)</h2><p>iText 是一款 OCR 识别工具，支持截图直接识别或者上传图片识别，可以使用谷歌、腾讯或百度的识别 API，识别工具非常多，但既简洁使用体验又好的却不多。我使用频率不高，免费的次数已经够用，如果有这方面需求的人还是强烈推荐。</p><h2 id="iPic"><a href="#iPic" class="headerlink" title="iPic)"></a><a href="[https://itunes.apple.com/cn/app/ipic-markdown-%E5%9B%BE%E5%BA%8A-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%B7%A5%E5%85%B7/id1101244278?mt=12](https://itunes.apple.com/cn/app/ipic-markdown-图床-文件上传工具/id1101244278?mt=12">iPic</a>)</h2><p>图床工具，非常简洁，目前其实已经支持文件的上传，我主要还是用的图片的上传，空间用的腾讯云的 10G 免费存储，因为它支持 https，之前的用七牛，但它要用 https 必须绑定域名，我嫌麻烦就转到腾讯云了。价格我觉得也可以，一年 50+，如果我没记错的话。</p><h2 id="Klib"><a href="#Klib" class="headerlink" title="Klib)"></a><a href="[https://itunes.apple.com/cn/app/klib-%E6%A0%87%E6%B3%A8-%E7%AC%94%E8%AE%B0%E7%AE%A1%E7%90%86/id1196268448?mt=12](https://itunes.apple.com/cn/app/klib-标注-笔记管理/id1196268448?mt=12">Klib</a>)</h2><p>如果你有 Kindle，那 Klib 用于你的笔记管理一定非常合适。你可以一键导入你 Kindle 中的所有笔记，你可以编辑，也可以生成简洁的网页分享给朋友，也可以导出，总之也是我非常喜欢的一个软件。其实这个与上面的三个软件都是同一个开发者开发的。</p><h2 id="Mos"><a href="#Mos" class="headerlink" title="Mos"></a><a href="https://github.com/Caldis/Mos">Mos</a></h2><p>让你使用鼠标滚动也能有平滑滚动效果，并且滚动方向与触摸板保持一致（正常情况下 Mac 用鼠标滚动与触摸板的方向是相反的）。</p><h2 id="Bartender-3"><a href="#Bartender-3" class="headerlink" title="Bartender 3"></a><a href="https://www.macbartender.com/" target="_blank" rel="noopener">Bartender 3</a></h2><p>Mac 状态栏收纳工具，我平常状态下状态栏中有20个图标，而有不少工具使用的频率是很低的，或者说触发方式是通过快捷键触发的，所以状态栏上的图标或许根本用不到，因此很有必要用一个小工具把状态栏中不常用的图标隐藏起来，Bartender 3 就是用来解决这个问题的。</p><h2 id="itsycal"><a href="#itsycal" class="headerlink" title="itsycal"></a><a href="https://www.mowglii.com/itsycal/" target="_blank" rel="noopener">itsycal</a></h2><p>Mac 上的时间点击时出现的是一些切换选项，而用惯 Windows 的用户基本已经习惯了点击右下角时间出现日历界面，而且这个交互确实非常方便，但 Mac 上却没有这个功能，每次我点时间想看看日历，结果却总是让我失望，直到我找到这款软件。它可以把时间格式设置的跟原生的时间格式一样，但它点击后会出现日历。唯一一点不足就是这个软件的时间框长度是会改变的，当时间改变时，时间组件的宽度可能出现席位的变化，而这个细微的变化总是会被我眼角余光捕捉到，我总以为有什么消息过来，而不自觉得把注意力放到右上角。不过比起它的优点，这个缺点还是可以忍受的。</p><h2 id="xnip"><a href="#xnip" class="headerlink" title="xnip)"></a><a href="[https://itunes.apple.com/cn/app/xnip-%E6%88%AA%E5%9B%BE-%E6%A0%87%E6%B3%A8/id1221250572?mt=12](https://itunes.apple.com/cn/app/xnip-截图-标注/id1221250572?mt=12">xnip</a>)</h2><p>截图工具，6 元一年，要啥自行车……重要的是虽然便宜，但真的好用，而且它支持滚动截屏，多窗口截屏，标注也很方便，总之6元买不了吃亏买不了上当。</p><h2 id="magnet"><a href="#magnet" class="headerlink" title="magnet"></a><a href="https://magnet.crowdcafe.com/" target="_blank" rel="noopener">magnet</a></h2><p>Mac上的窗口管理工具，Windows 上拖动窗口贴边自动平分或全屏非常方便，但 Mac 自身并不支持，自带的分屏与这个还是有区别的。于是就有了这款软件，它还能自定义快捷键，能使用键盘快速调整窗口至想要的位置与大小。价格十几还是几十块好像。</p><h2 id="PopClip"><a href="#PopClip" class="headerlink" title="PopClip"></a><a href="https://itunes.apple.com/cn/app/popclip/id445189367?mt=12" target="_blank" rel="noopener">PopClip</a></h2><p>类似 iPhone 上长按出现的菜单，这款软件可以让你在 Mac 上选中文字后也路线类似的菜单，然后可以对选中的文字进行操作，比如翻译，搜索引擎搜索，购物网站搜索等。也是提高效率必备。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;受伤这台 Macbook Pro 也用了 2 年多了，累积了不少觉得好用的 App，趁着同事刚好买了 Macbook，整理了安利一下。&lt;/p&gt;
&lt;h2 id=&quot;Alfred&quot;&gt;&lt;a href=&quot;#Alfred&quot; class=&quot;headerlink&quot; title=&quot;Alfre
      
    
    </summary>
    
    
      <category term="mac" scheme="https://github.com/Tit1e/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>JS Practice</title>
    <link href="https://github.com/Tit1e/2019/06/06/114-js-practice/"/>
    <id>https://github.com/Tit1e/2019/06/06/114-js-practice/</id>
    <published>2019-06-06T15:23:54.000Z</published>
    <updated>2019-06-06T15:46:42.480Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Tit1e/js-practice/tree/master">JS Practice</a> 是给公司新来前端做练习题的项目，搭这个项目的过程中对我来说也是一个复习的过程，顺便过了一遍 Element-UI 的更新内容，之前公司用的 2.4+ 的版本，突然发现已经更新到了 2.9+，还更新了不少组件，有些原有组件拓展了不少属性。趁这个机会刚好过一遍心中有个大概，好在往后业务中有需要的时候使用。</p><p>项目目前还未完成，日后会逐渐增加内容，希望同事能尽快提升自己，帮我分担工作，当然我也要不断提升自己，不能被追上呀。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-06-06-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-06-06%2023.45.55.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/Tit1e/js-practice/tree/master&quot;&gt;JS Practice&lt;/a&gt; 是给公司新来前端做练习题的项目，搭这个项目的过程中对我来说也是一个复习的过程，顺便过了一遍 Element-UI 的更新内容
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>使用 mpvue 开发小程序过程中遇到的问题及总结</title>
    <link href="https://github.com/Tit1e/2019/05/01/113-mpvue-problems/"/>
    <id>https://github.com/Tit1e/2019/05/01/113-mpvue-problems/</id>
    <published>2019-05-01T07:48:18.000Z</published>
    <updated>2019-05-09T16:07:45.937Z</updated>
    
    <content type="html"><![CDATA[<p>最近在使用 <a href="https://github.com/Meituan-Dianping/mpvue">mpvue</a> 开发一个小程序，在这过程中遇到了不少问题，因为是第一次开发，遇到的问题可能比较基础，在这里做一个记录。</p><ul><li><p>如果你底部导航栏有三个页面，在这三个页面中的 created 中的代码会在进入小程序的时候就被执行，如果你想切到对应页面后才执行相应的方法，需要把代码写在 mounted 钩子中。</p></li><li><p>虽然官方是说 mpvue 支持 slot，但是我在实际使用的过程中，会出现奇奇怪怪的问题，不建议使用。</p></li><li><p>Vuex 可以使用，并且支持程度比较好，但是默认你无法在代码中使用 <code>this.$store</code> 来获取 store，每次你要使用 store 的时候都需要在页面中引入 store，<code>import store from &#39;/path/to/sotre.js&#39;</code>，然后就可以正常使用了，但是我们可以通过将 store 绑定至 Vue 的原型上，不是就可以使用 <code>this.$store</code> 了吗？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">main.js</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'/path/to/store.js'</span></span><br><span class="line">Vue.prototype.$store = store</span><br></pre></td></tr></table></figure></li><li><p>对应页面的 <code>main.json</code> 中加入 <code>&quot;enablePullDownRefresh&quot;: true</code> 配置项可开启下拉刷新，然后在 <code>onPullDownRefresh</code> 钩子中可加入刷新的操作代码，不过你需要使用  <code>wx.stopPullDownRefresh()</code> 来解除下拉后的 loading 动画。</p></li><li><p><code>onReachBottom</code> 钩子在页面滚动到底部时出发，可用于实现到达底部时自动加载列表。</p></li><li><p><code>vidoe</code> 、<code>canvas</code> 、<code>map</code>、<code>textarea</code> 这些由客户端创建的原生组件在小程序中层级永远的最高的，所以在正常情况下这些元素永远是置顶的，<code>cover-view</code>、<code>cover-image</code> 这些标签可以解决这个问题，但是它们有很大的局限性，<code>cover-view</code> 只能嵌套 <code>cover-view</code> 标签或 <code>button</code> 标签，并且并不是所有 css 样式对这些标签有效，所以这些标签还是无法满足比较复杂的组件。项目中由于这个问题的存在，我将筛选条件进行的调整，最后采用点击筛选侧滑出筛选项，并在显示筛选项的时候隐藏 echarts 图表，点击搜索后再重新展示图表来解决了这个问题。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在使用 &lt;a href=&quot;https://github.com/Meituan-Dianping/mpvue&quot;&gt;mpvue&lt;/a&gt; 开发一个小程序，在这过程中遇到了不少问题，因为是第一次开发，遇到的问题可能比较基础，在这里做一个记录。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;如
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="小程序" scheme="https://github.com/Tit1e/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>小程序上传图片至七牛</title>
    <link href="https://github.com/Tit1e/2019/04/27/112-mini-program-qiniu-upload/"/>
    <id>https://github.com/Tit1e/2019/04/27/112-mini-program-qiniu-upload/</id>
    <published>2019-04-26T16:13:20.000Z</published>
    <updated>2019-04-26T16:31:58.310Z</updated>
    
    <content type="html"><![CDATA[<p>最近天天赶着写小程序，没什么空余时间，所以没怎么写博客，但开发小程序过程中踩了不少坑，到时候可以总结一下。</p><p>今天先写下在小程序中如何上传文件至七牛云。</p><p>首先去<a href="https://github.com/gpake/qiniu-wxapp-sdk">这里</a>下载小程序上传的 SDK，文件在 <code>sdk</code> 目录下。然后在代码中引入就行了。先放上我完整的上传函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">uploadImage()&#123;</span><br><span class="line">  <span class="comment">// 引入七牛的上传sdk</span></span><br><span class="line">      <span class="keyword">const</span> qiniuUploader = <span class="built_in">require</span>(<span class="string">"../../../../../static/lib/qiniuUploader.js"</span>)</span><br><span class="line">      <span class="comment">// 调用微信的选择图片 API</span></span><br><span class="line">      wx.chooseImage(&#123;</span><br><span class="line">        success: <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="comment">// 图片的路径数组</span></span><br><span class="line">          <span class="keyword">let</span> &#123;tempFilePaths&#125; = data</span><br><span class="line">          <span class="comment">// 选择成功后显示正在上传的 loading</span></span><br><span class="line">          wx.showLoading(&#123;</span><br><span class="line">            title: <span class="string">'正在上传'</span>,</span><br><span class="line">            mask: <span class="literal">true</span></span><br><span class="line">          &#125;)</span><br><span class="line">          <span class="comment">// 由于是数组，所欲需要循环将每张图片依次上传</span></span><br><span class="line">          tempFilePaths.map(<span class="function">(<span class="params">r,i</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="comment">// getQiniu 函数用于获取一些上传的参数，比如 token，服务器地址，绑定的域名等</span></span><br><span class="line">            getQiniu().then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">              <span class="comment">// token</span></span><br><span class="line">              <span class="keyword">let</span> uptoken = res.data.val.token</span><br><span class="line">              <span class="comment">// 绑定的域名</span></span><br><span class="line">              <span class="keyword">let</span> domain = res.data.bucket_url</span><br><span class="line">              <span class="comment">// 服务器地址</span></span><br><span class="line">              <span class="keyword">let</span> uploadURL = res.data.up_server</span><br><span class="line">              <span class="comment">// 开始上传</span></span><br><span class="line">              qiniuUploader.upload(</span><br><span class="line">                r, <span class="comment">//上传的图片</span></span><br><span class="line">                (req) =&gt; &#123;  <span class="comment">//回调 success</span></span><br><span class="line">                  <span class="comment">// code...</span></span><br><span class="line">                &#125;, (error) =&gt; &#123; <span class="comment">//回调 fail</span></span><br><span class="line">                  <span class="built_in">console</span>.log(<span class="string">'error: '</span> + error);</span><br><span class="line">                &#125;,</span><br><span class="line">                &#123;</span><br><span class="line">                  <span class="comment">// region 要根据你获取到或已知的的上传服务器地址去对应相应的地区，对应表可见下文或 Github 的 README.md</span></span><br><span class="line">                  region: <span class="string">'ECN'</span>,</span><br><span class="line">                  uptoken: uptoken,</span><br><span class="line">                  uploadURL: uploadURL,</span><br><span class="line">                  domain: domain,</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;)</span><br><span class="line">            <span class="comment">// 最后一张上传完成后关闭 loading</span></span><br><span class="line">            <span class="keyword">if</span>(i === tempFilePaths.length)&#123;</span><br><span class="line">              wx.hideLoading()</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><table><thead><tr><th>存储区域</th><th>区域代码</th><th>HTTPS 地址</th></tr></thead><tbody><tr><td>华东</td><td>ECN</td><td><a href="https://up.qiniup.com" target="_blank" rel="noopener">https://up.qiniup.com</a></td></tr><tr><td>华北</td><td>NCN</td><td><a href="https://up-z1.qiniup.com" target="_blank" rel="noopener">https://up-z1.qiniup.com</a></td></tr><tr><td>华南</td><td>SCN</td><td><a href="https://up-z2.qiniup.com" target="_blank" rel="noopener">https://up-z2.qiniup.com</a></td></tr><tr><td>北美</td><td>NA</td><td><a href="https://up-na0.qiniup.com" target="_blank" rel="noopener">https://up-na0.qiniup.com</a></td></tr><tr><td>新加坡</td><td>ASG</td><td><a href="https://up-as0.qiniup.com" target="_blank" rel="noopener">https://up-as0.qiniup.com</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近天天赶着写小程序，没什么空余时间，所以没怎么写博客，但开发小程序过程中踩了不少坑，到时候可以总结一下。&lt;/p&gt;
&lt;p&gt;今天先写下在小程序中如何上传文件至七牛云。&lt;/p&gt;
&lt;p&gt;首先去&lt;a href=&quot;https://github.com/gpake/qiniu-wxap
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="小程序" scheme="https://github.com/Tit1e/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>0421 一周总结</title>
    <link href="https://github.com/Tit1e/2019/04/21/111-2019-04-21-week-summary/"/>
    <id>https://github.com/Tit1e/2019/04/21/111-2019-04-21-week-summary/</id>
    <published>2019-04-21T09:19:08.000Z</published>
    <updated>2019-04-21T09:41:41.142Z</updated>
    
    <content type="html"><![CDATA[<p>这周来了个小程序的开发任务，之前没怎么接触过小程序，听闻之前美团开源了一个 vue 转小程序的工具，于是打算一用。到目前为止静态页面基本开发完成，还剩下接口对接。接下来还有多少坑我也不知道，但硬着头皮也得上呀。期限是下周五。</p><p>在小公司特别是岗位只有自己一人的时候，就更加需要广泛涉猎多种技术，前端的话得适应多端的开发，最好也了解后端的一些东西，会一门后台语言，了解后台的一些运行机制，对于前端的开发也是有帮助的。至少对我来说，开始的时候被后端逼着学了一点后端的东西，目前看来对我还是挺有帮助的。其实如果在不断提升自己，大部分人最后都基本上会接触到一大堆东西，当然专精的方向可能仍有区别。</p><p>无论怎样，最后提升自己才是关键，在提升自己的同时，也要将这种提升正向输出到公司业务中。这样才是有成果的提升。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这周来了个小程序的开发任务，之前没怎么接触过小程序，听闻之前美团开源了一个 vue 转小程序的工具，于是打算一用。到目前为止静态页面基本开发完成，还剩下接口对接。接下来还有多少坑我也不知道，但硬着头皮也得上呀。期限是下周五。&lt;/p&gt;
&lt;p&gt;在小公司特别是岗位只有自己一人的时
      
    
    </summary>
    
    
      <category term="一周总结" scheme="https://github.com/Tit1e/tags/%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>正确地偷懒</title>
    <link href="https://github.com/Tit1e/2019/04/18/110-use-mac-efficiently/"/>
    <id>https://github.com/Tit1e/2019/04/18/110-use-mac-efficiently/</id>
    <published>2019-04-18T15:25:14.000Z</published>
    <updated>2019-04-18T15:45:18.654Z</updated>
    
    <content type="html"><![CDATA[<p>昨天跟同事聊天聊到 Mac OS 上的一些实用工具，到时候我会专门写一篇文章来介绍我在平时使用 Macbook 过程中积累下来的使用软件。这里不详细展开。</p><p>Mac OS 向来以使用流畅，界面美观，工具丰富出名。这三点同样也吸引着我。我入 Macbook 的主要原因还是因为 Windows 对命令行的支持不行，而 Linux 对日用软件的支持又不好，因此 Mac OS 成了我仅有的选择。但是不得不说买得很值，无论是续航，显示效果，系统运行流畅性都跟我之前的 Windows 好一大截，当然价格也比我原来的 笔记本高出一大截。</p><p>在入了 Macbook 之后，我每次在使用过程中遇到不顺畅的时候总是会去 google 有没有好用的工具能让这类操作变得简便。说白了就是懒，不想做一些无意义的机械式的重复操作，于是慢慢地我就沉淀下来了一些好用的软件，无论是日常使用的还是开发中使用的。这些工具为我节省了不少时间。</p><p>我所认为的偷懒是在不影响工作成果的前提下，使用一些”奇技淫巧”加快工作的完成速度，从而省出时间来”偷懒”。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天跟同事聊天聊到 Mac OS 上的一些实用工具，到时候我会专门写一篇文章来介绍我在平时使用 Macbook 过程中积累下来的使用软件。这里不详细展开。&lt;/p&gt;
&lt;p&gt;Mac OS 向来以使用流畅，界面美观，工具丰富出名。这三点同样也吸引着我。我入 Macbook 的主要
      
    
    </summary>
    
    
      <category term="碎碎念" scheme="https://github.com/Tit1e/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>巴黎圣母院起火</title>
    <link href="https://github.com/Tit1e/2019/04/16/109-Notre-Dame-de-Paris/"/>
    <id>https://github.com/Tit1e/2019/04/16/109-Notre-Dame-de-Paris/</id>
    <published>2019-04-16T14:33:50.000Z</published>
    <updated>2019-04-16T15:00:28.496Z</updated>
    
    <content type="html"><![CDATA[<p>今天在上班路上刷新闻，突然刷到巴黎圣母院起火，一愣，因为前阵子 <a href="https://zh.wikipedia.org/zh-hans/%E5%B7%B4%E8%A5%BF%E5%9B%BD%E5%AE%B6%E5%8D%9A%E7%89%A9%E9%A6%86%E7%81%AB%E7%81%BE" target="_blank" rel="noopener">巴西国家博物馆</a> 也发生过火灾，损失了2000 多万件藏品。</p><p>自从看完了「人类简史」，我感叹人类的伟大，也唏嘘人类的渺小。在地球历史前面，人类太不值得一提了。</p><p>地球形成时间</p><blockquote><p>根据<a href="https://zh.wikipedia.org/wiki/%E6%94%BE%E5%B0%84%E6%80%A7%E5%AE%9A%E5%B9%B4%E6%B3%95" target="_blank" rel="noopener">放射性定年法</a>的测量结果，<a href="https://zh.wikipedia.org/wiki/%E5%A4%AA%E9%98%B3%E7%B3%BB" target="_blank" rel="noopener">太阳系</a>大约在45.6±0.08亿年前形成<a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%90%83#cite_note-bowring_housch1995-65" target="_blank" rel="noopener">[59]</a>，而原生地球大约形成于45.4±0.04亿年前<a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%90%83#cite_note-age_earth1-34" target="_blank" rel="noopener">[29]</a>。—维基百科</p></blockquote><p>地球上出现生物的时间</p><blockquote><p>地球提供了目前已知唯一能够维持<a href="https://zh.wikipedia.org/wiki/%E7%94%9F%E7%89%A9%E6%BC%94%E5%8C%96" target="_blank" rel="noopener">生命进化</a>的环境<a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%90%83#cite_note-87" target="_blank" rel="noopener">[81]</a>。人们认为约40亿年前的高能<a href="https://zh.wikipedia.org/wiki/%E5%8C%96%E5%AD%A6%E5%8F%8D%E5%BA%94" target="_blank" rel="noopener">化学反应</a>产生了能够自我复制的分子，又过了5亿年则出现了所有生命的<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%BE%8C%E5%85%B1%E5%90%8C%E7%A5%96%E5%85%88" target="_blank" rel="noopener">共同祖先</a>，而后分化出<a href="https://zh.wikipedia.org/wiki/%E7%B4%B0%E8%8F%8C" target="_blank" rel="noopener">细菌</a>与<a href="https://zh.wikipedia.org/wiki/%E5%8F%A4%E8%8F%8C" target="_blank" rel="noopener">古菌</a><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%90%83#cite_note-sa282_6_90-88" target="_blank" rel="noopener">[82]</a>。早期生命形态发展出<a href="https://zh.wikipedia.org/wiki/%E5%85%89%E5%90%88%E4%BD%9C%E7%94%A8" target="_blank" rel="noopener">光合作用</a>的能力，可直接利用太阳能，并向大气中释放<a href="https://zh.wikipedia.org/wiki/%E6%B0%A7%E6%B0%94" target="_blank" rel="noopener">氧气</a><a href="https://zh.wikipedia.org/wiki/%E5%9C%B0%E7%90%83#cite_note-%E4%B8%AD%E5%9B%BD%E5%A4%A9%E6%B0%94%E6%8A%A5-73" target="_blank" rel="noopener">[67]</a>。—维基百科</p></blockquote><p>人类文明出现时间</p><blockquote><p>对于文明出现的判定标准，主要是城市的出现、文字的产生、国家制度的建立。其中最重要的前提是城市的出现，也就是人群聚集，城市是文明的标志。现在一般认为，最早的文明大概是在公元前3500年左右<a href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E7%B4%A2%E4%B8%8D%E8%BE%BE%E7%B1%B3%E4%BA%9A" target="_blank" rel="noopener">美索不达米亚</a>的<a href="https://zh.wikipedia.org/wiki/%E8%8B%8F%E7%BE%8E%E5%B0%94%E4%BA%BA" target="_blank" rel="noopener">苏美尔人</a>那里出现的<a href="https://zh.wikipedia.org/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90" target="_blank" rel="noopener">[来源请求]</a>。—维基百科</p></blockquote><p>从时间跨度来看，人类文明诞生至今的短短几千年真的不值一提，但是着短短几千年，人类文明的发展速度也是不可思议的。因此人类文明经常以”高速发展”来形容。</p><p>越是有这样的对比，才越能感受到那些保存至今的文物的珍贵。因此听到这样的新闻才会愈发感到心痛可惜。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天在上班路上刷新闻，突然刷到巴黎圣母院起火，一愣，因为前阵子 &lt;a href=&quot;https://zh.wikipedia.org/zh-hans/%E5%B7%B4%E8%A5%BF%E5%9B%BD%E5%AE%B6%E5%8D%9A%E7%89%A9%E9%A6%86
      
    
    </summary>
    
    
      <category term="碎碎念" scheme="https://github.com/Tit1e/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>埃隆·马斯克的冒险人生 [美] 阿什利·万斯</title>
    <link href="https://github.com/Tit1e/2019/04/15/78-Elon-Musk/"/>
    <id>https://github.com/Tit1e/2019/04/15/78-Elon-Musk/</id>
    <published>2019-04-15T14:15:23.000Z</published>
    <updated>2019-04-15T15:35:11.586Z</updated>
    
    <content type="html"><![CDATA[<p>昨天白天我姐与外甥女来了杭州，跟她们一起去玩了一天，去了动物园。其实我不喜欢去这种地方，包括马戏团，与杂技团。因为我一想到动物门被关在这些狭小的地方，每天要面对成千上万的人，我把自己代入进去（我经常这么做，而且不光是代入动物，也会代入他人，或一个物体），光想想就觉得呼吸困难。我讨厌这种束缚。</p><p>上面是题外话，下午 5 点多到家后，觉得在外面玩了一天有点”虚度”这一天，所以想做点”有意义”的事情。于是我拿出 kindle，在网上下了一本 「埃隆·马斯克的冒险人生」，至于为什么偏偏是这本，大概是因为今天看的新闻里有好几条特斯拉的新闻，加上这本书本来就在我的待看书单里。昨天从傍晚直接看到了晚上 1 点多（6点多的时候由于太累中途睡着了几十分钟），由于第二天上班，而且实在太困才放下睡了。今天把剩下的看完了。</p><p>这本书相比「乔布斯传」，我更喜欢后者。可能是乔布斯给我的感觉更加亲近，毕竟乔布斯留下来的东西与我们的生活密切相关，而马斯克的目标却是带着人类移民火星。这对我来说太过遥远，但他的目标的确是伟大的，是造福全人类的，这一点不容置疑。</p><p>看完其实并没有过多的感想，毕竟这是他们的经历，而对于现在的我来说，通过学习他们来改变自己人生是不切实际的，况且人的经历是不可复制的，人与人也是不同的，接纳自己非常重要，我们必须承认自己是个普通人，我这辈子基本连马斯克第一次创业时的高度都达不到，但这又怎样。相对来说我有更重要的目标在等着我去实现。那才是能让我觉得没白过此生的事。</p><p>但不想达到这些巨人的高度并不意味着就可以放纵自己。对我来说，提升自己是不能停止的事情，只是可能我再怎么提升自己都看不到这些巨人的影子罢了。</p><p><strong>注：书下的是盗版。由于某些原因，目前手上的 Kindle 并不是我自己的，所以先下本盗版看完，等我的 Kindle 回来了再补票。支持正版人人有责。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天白天我姐与外甥女来了杭州，跟她们一起去玩了一天，去了动物园。其实我不喜欢去这种地方，包括马戏团，与杂技团。因为我一想到动物门被关在这些狭小的地方，每天要面对成千上万的人，我把自己代入进去（我经常这么做，而且不光是代入动物，也会代入他人，或一个物体），光想想就觉得呼吸困难
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://github.com/Tit1e/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>alfred 使用 workflows 快速进行图片压缩</title>
    <link href="https://github.com/Tit1e/2019/04/12/77-alfred-gallery/"/>
    <id>https://github.com/Tit1e/2019/04/12/77-alfred-gallery/</id>
    <published>2019-04-12T13:29:00.000Z</published>
    <updated>2019-04-13T13:39:34.948Z</updated>
    
    <content type="html"><![CDATA[<p>图片压缩是我平时经常用到的操作，一开始是去 <a href="https://tinypng.com/" target="_blank" rel="noopener">tinypng</a> 使用网页版压缩，后来在逛 Github 时发现了 <a href="https://github.com/kyleduo/TinyPNG4Mac">TinyPNG4Mac</a> 这个小工具，相比之前的网页操作已经方便了不少，今天在逛 Twitter 时又发现了一个 alfred 的 workflows 工作流，可以在本地快速进行图片压缩。下载地址在 <a href="https://github.com/BlackwinMin/alfred-gallery/tree/master/image%20Compressor">image Compressor</a>。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用这个工具的时候需要先安装以下三个项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩 png</span></span><br><span class="line">brew install pngquant</span><br><span class="line"><span class="comment"># 压缩 jpg</span></span><br><span class="line">brew install jpegoptim</span><br><span class="line"><span class="comment"># 压缩 gif</span></span><br><span class="line">brew install gifsicle</span><br></pre></td></tr></table></figure><p><a href="https://github.com/BlackwinMin/alfred-gallery/blob/master/image%20Compressor/image%20Compressor.alfredworkflow">文件下载地址</a></p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-12-Xnip2019-04-12_22-24-26.png" alt></p><p>下载完成后打开下载好的文件，点击 import 将工作流导入就安装完成。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-12-Xnip2019-04-12_21-41-31.png" alt></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>我由于之前没使用 workflows 处理过文件，都是使用热键类型的 workflows，因此我不知道怎么选择文件进行操作，在一通瞎按外加 一通 Google 后终于了解了。一开始我连如何执行这个压缩命令都不知道。</p><ul><li><p>对单个文件进行操作</p><ul><li>选择一个文件后按 <code>control</code> 出现操作选项，执行 <code>image Compressor</code></li></ul><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-12-Xnip2019-04-12_21-51-34.png" alt></p></li><li><p>在 Alfred 中选择多个文件后进行操作</p><ul><li>选择一个文件后按 <code>option</code> + <code>↑</code> 可以将文件加入缓冲区，可以将多个文件加入缓冲区， <code>option</code> + <code>←</code>可以删除最近添加的文件， <code>option</code> + <code>→</code> 可以对这些选中的文件进行批量操作。</li></ul></li><li><p>在 Finder 中选好文件直接使用 Alfred 操作文件</p><ul><li><p>对于压缩图片来说这应该是最好的操作方式：在 Finder 中批量选中图片后，按 <code>option</code> + <code>commend</code> + <code>\</code> 调出操作列表进行操作。如果无法调出可能是快捷键被修改了，可以从下图出查看具体快捷键。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-12-Xnip2019-04-12_21-46-08.png" alt></p></li></ul></li></ul><p>在找的过程中我还发现一个使用 TinyPNG 压缩的 workflows <a href="http://www.packal.org/workflow/tinypng" target="_blank" rel="noopener">Compress with TinyPNG</a>，应该与 TinyPNGMac 用的是同一个接口吧。使用方式同 image Compressor。</p><p> 注：使用的时候需要去 <a href="https://tinypng.com/developers" target="_blank" rel="noopener">这里</a> 注册一个 API Key，然后在 Alfred 执行 <code>tinypng_config</code> ，输入 API Key 后回车。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-12-Xnip2019-04-12_22-17-07.png" alt></p><p>压缩效果有点差异，相差不多，但是压缩速度差非常多。TinyPNG 还会出现丢图现象，下图右侧其实应该有三张图片，但是压缩只为了我两种张，而且速度非常慢，从修改日期可以看出两张图的创建时间相差了一分钟。image Compressor 由于使用的是本地的工具库，因此几张图压缩只要几秒就可完成。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-12-Xnip2019-04-12_22-21-59.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;图片压缩是我平时经常用到的操作，一开始是去 &lt;a href=&quot;https://tinypng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tinypng&lt;/a&gt; 使用网页版压缩，后来在逛 Github 时发现了 &lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="mac" scheme="https://github.com/Tit1e/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>0411 碎碎念</title>
    <link href="https://github.com/Tit1e/2019/04/11/76-2019-04-11/"/>
    <id>https://github.com/Tit1e/2019/04/11/76-2019-04-11/</id>
    <published>2019-04-11T14:13:11.000Z</published>
    <updated>2019-04-11T14:36:25.852Z</updated>
    
    <content type="html"><![CDATA[<p>昨天去交考核的时候碰到老大在研究小程序，我知道最近有个小程序要开发，可能这个活会落到我头上，但我不知道老大研究这个干什么。出于学习的目的我昨天试用了一下 <a href="https://github.com/Meituan-Dianping/mpvue">mpvue</a>，因为自身是使用 vue 进行开发的，也知道美团发布了个 vue 转制小程序的工具，于是趁此机会研究一下，万一到时候要我开发我也能兜住。结果今天老大就发我原型来让我评估工作量了。</p><p>到目前为止，我分析了下原型里的功能在开发过程中可能会遇到的坑：</p><ul><li>M3u8 的播放</li><li>图表展示</li><li>字体图标</li><li>用户登录状态管理</li><li>Vuex 的使用</li></ul><ol><li>m3u8 的播放今天测试了，在小程序中十分方便，<code>&lt;video&gt;</code> 标签就支持播放，比 网页上方便许多。</li><li>图表主要是柱状图跟饼图，我打算使用 <a href="https://github.com/F-loat/mpvue-echarts">mpvue-echarts</a>，这里还有个问题就是 echarts 需要去官网<a href="https://echarts.baidu.com/builder.html" target="_blank" rel="noopener">定制</a>。因为整个 echarts 引入会超出小程序限制的代码大小 2M，因此需要根据项目中用到的图表及组件进行定制。</li><li>字体图标 我在 <a href="https://evolly.one/2019/04/10/75.mini-program-use-iconfont/" target="_blank" rel="noopener">上一篇博客</a> 中已经说过了，其实这个在很早以前我也尝试过，已经是可以实现了的，这次为了保险起见再次确认下。</li><li>因为没有写过小程序，而这个项目又需要使用其他账户登录，因此这一块我需要找找成熟的方案。</li><li>Vuex 的话是因为我在查 mpvue 的时候看到有人说使用 Vuex 的时候有点怪，不知道是不是他的使用有问题，我需要亲自验证一下。</li></ol><p>目前想到的只有以上几点，其他的坑可能会在开发过程中陆续出现，到时候再做记录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天去交考核的时候碰到老大在研究小程序，我知道最近有个小程序要开发，可能这个活会落到我头上，但我不知道老大研究这个干什么。出于学习的目的我昨天试用了一下 &lt;a href=&quot;https://github.com/Meituan-Dianping/mpvue&quot;&gt;mpvue&lt;/a
      
    
    </summary>
    
    
      <category term="碎碎念" scheme="https://github.com/Tit1e/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发使用 iconfont</title>
    <link href="https://github.com/Tit1e/2019/04/10/75-mini-program-use-iconfont/"/>
    <id>https://github.com/Tit1e/2019/04/10/75-mini-program-use-iconfont/</id>
    <published>2019-04-10T14:22:42.000Z</published>
    <updated>2019-04-11T14:14:14.120Z</updated>
    
    <content type="html"><![CDATA[<ol><li>将选择好的图标生成在线链接</li></ol><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-11-image-20190410223602633.png" alt></p><ol start="2"><li><p>在新标签页打开在线链接</p></li><li><p>复制页面中的所有 css 代码至 <code>app.wxss</code> 文件中，保存</p></li></ol><p>这样就可以在项目中使用 iconfont 了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;将选择好的图标生成在线链接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-11-image-20190410223602633.pn
      
    
    </summary>
    
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Mac 使用终端执行弹出式消息通知</title>
    <link href="https://github.com/Tit1e/2019/04/08/64-send-an-alert-to-notification-center-from-the-command/"/>
    <id>https://github.com/Tit1e/2019/04/08/64-send-an-alert-to-notification-center-from-the-command/</id>
    <published>2019-04-08T12:29:12.000Z</published>
    <updated>2019-04-08T12:34:26.423Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装-terminal-notifier"><a href="#安装-terminal-notifier" class="headerlink" title="安装 terminal-notifier"></a>安装 terminal-notifier</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 不能直接执行 sudo gem <span class="keyword">install</span> terminal-notifier，安装会报错，/usr/<span class="keyword">bin</span> 目录不允许写入，因此得安装至 /usr/<span class="keyword">local</span>/<span class="keyword">bin</span> 目录下</span><br><span class="line">sudo gem <span class="keyword">install</span> terminal-notifier -n /usr/<span class="keyword">local</span>/<span class="keyword">bin</span></span><br></pre></td></tr></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">terminal</span>-notifier -message <span class="string">"Hello, this is my message"</span> -<span class="built_in">title</span> <span class="string">"Message Title"</span></span><br></pre></td></tr></table></figure><p><a href="http://landcareweb.com/questions/3689/ru-he-zhi-zuo-maczhong-duan-dan-chu-jing-bao-applescriptde" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装-terminal-notifier&quot;&gt;&lt;a href=&quot;#安装-terminal-notifier&quot; class=&quot;headerlink&quot; title=&quot;安装 terminal-notifier&quot;&gt;&lt;/a&gt;安装 terminal-notifier&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="mac" scheme="https://github.com/Tit1e/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>vue-mark-calendar</title>
    <link href="https://github.com/Tit1e/2019/04/06/63-vue-mark-calendar/"/>
    <id>https://github.com/Tit1e/2019/04/06/63-vue-mark-calendar/</id>
    <published>2019-04-06T13:26:23.000Z</published>
    <updated>2019-04-13T13:39:12.210Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Tit1e/vue-mark-calendar">vue-mark-calendar</a> 是基于 <a href="https://github.com/zwhGithub/vue-calendar">vue-calendar</a> 改造的插件，出于公司业务需求，在原有基础上进行了功能的增加与样式的调整。样式是尽量根据 <a href="http://element-cn.eleme.io/#/zh-CN/component/installation" target="_blank" rel="noopener">element-ui</a> 的样式写的，因为公司用的是 element-iu + Vue 的技术栈，希望系统的界面上比较统一。</p><p>功能上新增了一下几个参数：</p><ol><li>borderRadius：调整日历组件的圆角大小</li><li>showToday：是否在日历中高亮今天的日期</li><li>canChoose：是否禁用日历选择，只作展示用。</li></ol><p>其他说明可看 <a href="https://github.com/Tit1e/vue-mark-calendar">Github</a></p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-05-084559.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/Tit1e/vue-mark-calendar&quot;&gt;vue-mark-calendar&lt;/a&gt; 是基于 &lt;a href=&quot;https://github.com/zwhGithub/vue-calendar&quot;&gt;vue-ca
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Mac 使用 Alfred 执行终端命令</title>
    <link href="https://github.com/Tit1e/2019/04/04/62-alfred-workflow/"/>
    <id>https://github.com/Tit1e/2019/04/04/62-alfred-workflow/</id>
    <published>2019-04-04T13:05:45.000Z</published>
    <updated>2019-04-13T13:39:05.326Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>Mac 上有个叫 Alfred 的软件，堪称神器。想了解的可以去网上搜搜，一大把，这软件从来不缺人夸。</p><p>其实我平时用到这个软件的功能才一小部分，但是已经给我带来了极大的便利，现在我已经无法习惯没有它的电脑。</p><p>之前用的一些搜索，计算器，打开软件这些用途其实 Mac 自带的聚焦也可以做到，但是 Alfred 特有的 Workflow 工作流聚焦可没有。Workflow 能做很多事情，我还是贴个少数派的 Workflow 专区 <a href="https://sspai.com/tag/Alfred" target="_blank" rel="noopener">链接</a> 吧，里面有很多关于它的介绍及使用技巧。</p><p>我今天要说的是用它来执行终端命令，因为工作中终端是必不可少的东西，其他比如还有 hexo 博客的部署什么的也是通过命令行，但是一般情况下终端都需要一连串的 cd 进入目录，然后执行命令，当次数多了就开始觉得好烦，Workflow 不是正好可以执行脚本么，于是就去淘宝买了个授权，不知道是官方给的批量授权还是申请来的测试授权码，反正还是花了我 100+ 大洋，之前一直用的免费版，无法使用 Workflow。</p><h3 id="不是必要的准备工作"><a href="#不是必要的准备工作" class="headerlink" title="不是必要的准备工作"></a>不是必要的准备工作</h3><p>Alfred 默认用的是 Mac 自带的终端，如如果使用的 iTerm 可以根据下图设置：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-Xnip2019-04-04_21-41-25.png" alt></p><p>输入的代码为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">on alfred_script(q)</span><br><span class="line">    tell application "iTerm"</span><br><span class="line">        <span class="keyword">set</span> _length <span class="keyword">to</span> <span class="keyword">count</span> <span class="keyword">window</span></span><br><span class="line">    <span class="keyword">if</span> _length = <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">create</span> <span class="keyword">window</span> <span class="keyword">with</span> <span class="keyword">default</span> profile</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">    <span class="keyword">set</span> aa <span class="keyword">to</span> (<span class="keyword">get</span> miniaturized <span class="keyword">of</span> <span class="keyword">current</span> <span class="keyword">window</span>)</span><br><span class="line">    <span class="keyword">if</span> aa <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> miniaturized <span class="keyword">of</span> <span class="keyword">current</span> <span class="keyword">window</span> <span class="keyword">to</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">    <span class="keyword">set</span> bb <span class="keyword">to</span> (<span class="keyword">get</span> <span class="keyword">visible</span> <span class="keyword">of</span> <span class="keyword">current</span> <span class="keyword">window</span>)</span><br><span class="line">    <span class="keyword">if</span> bb <span class="keyword">is</span> <span class="literal">false</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> <span class="keyword">visible</span> <span class="keyword">of</span> <span class="keyword">current</span> <span class="keyword">window</span> <span class="keyword">to</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">    <span class="keyword">set</span> cc <span class="keyword">to</span> frontmost</span><br><span class="line">    <span class="keyword">if</span> cc <span class="keyword">is</span> <span class="literal">false</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">activate</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">        (*<span class="keyword">if</span> _length = <span class="number">0</span> <span class="keyword">then</span>*)</span><br><span class="line">            <span class="keyword">set</span> theResult <span class="keyword">to</span> <span class="keyword">current</span> tab <span class="keyword">of</span> <span class="keyword">current</span> <span class="keyword">window</span></span><br><span class="line">        (*<span class="keyword">else</span></span><br><span class="line">            <span class="keyword">set</span> theResult <span class="keyword">to</span> (<span class="keyword">create</span> tab <span class="keyword">with</span> <span class="keyword">default</span> profile) <span class="keyword">of</span> <span class="keyword">current</span> <span class="keyword">window</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">if</span>*)</span><br><span class="line">        write <span class="keyword">session</span> <span class="keyword">of</span> theResult <span class="built_in">text</span> q</span><br><span class="line"><span class="keyword">end</span> tell</span><br><span class="line"><span class="keyword">end</span> alfred_script</span><br></pre></td></tr></table></figure><p>这样 Alfred 在执行命令是就会调用 iTerm。</p><h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><p>先添加一个初试模板：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-Xnip2019-04-04_21-44-57.png" alt></p><p>填写 Workflow 的名称，也可以将图片拖到右侧框内，即可当作图标：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-Xnip2019-04-04_21-46-51.png" alt></p><p>双击左侧的模块设置触发关键词：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-134948.png" alt></p><p>在左侧输入框输入触发的关键词，右侧的第一个选项是还可以输入其他信息，并且在执行脚本的时候可以通过 <code>{query}</code> 获取到输入内容，第二个我没了解过，第三个就是输入完关键字 回车直接触发。我以部署博客为例编写两个 Workflow。第一个是新建一篇文章，第二个是一件部署。这个例子就写生成新文章的。因为生成新文章需要输入文件名（当然不填其实也有默认的名字），因此需要选择第一项。下方的 Title 是 必填项。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-135110.png" alt></p><p>之后编辑右边的模块：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-135912.png" alt></p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-140100.png" alt></p><p>输入你想执行的命令并保存就可以了。我这里的命令行执行的分别是，先 cd 至博客目录，然后执行 新建文章的命令，然后打开 Typora，我的 Typora 目录就是文章目录。最后退出终端。因为我 iTerm 设置使用快捷键从顶部呼出，但 Workflow 执行的时候会打开一下终端的窗口，因此执行的时候并不后影响我原有的窗口，所以我用了 exit 命令，执行完毕直接退出终端，不然的话每次执行都会有一个终端窗口遗留，会很乱。</p><p>执行时只要呼出 Alfred  然后输入之前设置的关键字，再输入文件名就可以了。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-140726.png" alt></p><p>部署的话，也差不多，就是在设置关键字的时候选择 No Argument 项就可以了，然后在脚本部分写：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~<span class="regexp">/Public/</span>Myblog &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; <span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p> 完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Mac 上有个叫 Alfred 的软件，堪称神器。想了解的可以去网上搜搜，一大把，这软件从来不缺人夸。&lt;/p&gt;
&lt;p&gt;其实我平时用到这个软件的功能才一小部分，但是已经给我带来了极大的便利，现在我已经无法习惯没有它的电脑。&lt;/p&gt;
&lt;p&gt;之
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="mac" scheme="https://github.com/Tit1e/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>0402 碎碎念</title>
    <link href="https://github.com/Tit1e/2019/04/02/61-2019-04-02/"/>
    <id>https://github.com/Tit1e/2019/04/02/61-2019-04-02/</id>
    <published>2019-04-02T12:44:27.000Z</published>
    <updated>2019-04-02T13:06:40.592Z</updated>
    
    <content type="html"><![CDATA[<p>今天依旧是不停接需求改需求的一天，但自从前几天调整心态后，今天接到需求心态平稳了许多。现在做需求前会好好想想，做的时候也会想什么地方可能会被提出修改建议，虽然进度慢了点，但是质量上升了不少。希望这种心态能一直保持下去，相信这种心态会让我更加喜欢这个世界。</p><p>最近生活好像又恢复了”正常”，每天被安排得满满当当，包括下班后的空闲时间。这种充实的感觉非常好，希望继续保持。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天依旧是不停接需求改需求的一天，但自从前几天调整心态后，今天接到需求心态平稳了许多。现在做需求前会好好想想，做的时候也会想什么地方可能会被提出修改建议，虽然进度慢了点，但是质量上升了不少。希望这种心态能一直保持下去，相信这种心态会让我更加喜欢这个世界。&lt;/p&gt;
&lt;p&gt;最近
      
    
    </summary>
    
    
      <category term="碎碎念" scheme="https://github.com/Tit1e/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>斐讯 k2p 在已刷 Breed 情况下刷入其他固件</title>
    <link href="https://github.com/Tit1e/2019/04/01/60-k2p-breed/"/>
    <id>https://github.com/Tit1e/2019/04/01/60-k2p-breed/</id>
    <published>2019-04-01T13:19:17.000Z</published>
    <updated>2019-04-13T13:38:48.375Z</updated>
    
    <content type="html"><![CDATA[<ol><li>网线连接电脑与 k2p 任一 <strong>LAN</strong> 口，网卡设置为自动获取 ip。</li><li>拔掉 k2p 电源，按住 k2p 背后 reset 键不放，然后插入 k2p 电源通电，保持按住 reset 键几秒直至 k2p 前面板 灯颜色交替闪烁后放开。</li><li>浏览器访问 192.168.1.1，如成功则出现 Breed 不死控制台。</li><li>备份：在「固件备份」标签，选择备份「EEEPROM」和「编程器固件」。</li><li>在刷之前需执行：「恢复出厂设置」-&gt;「Config 区 (公版)」-&gt;「执行」。</li><li>刷入：点击「固件更新」标签，选中「固件」选项，选择固件，点击「上传」。</li></ol><p>然后等待刷入完毕并重启就可通过浏览器访问控制台。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;网线连接电脑与 k2p 任一 &lt;strong&gt;LAN&lt;/strong&gt; 口，网卡设置为自动获取 ip。&lt;/li&gt;
&lt;li&gt;拔掉 k2p 电源，按住 k2p 背后 reset 键不放，然后插入 k2p 电源通电，保持按住 reset 键几秒直至 k2p 前面板 灯
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>0331 一周总结</title>
    <link href="https://github.com/Tit1e/2019/03/31/59-2019-03-31-week-summary/"/>
    <id>https://github.com/Tit1e/2019/03/31/59-2019-03-31-week-summary/</id>
    <published>2019-03-31T15:06:37.000Z</published>
    <updated>2019-04-02T13:07:22.435Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>最近的开发任务很重，前端我一个人得负责系统的视觉、交互和前端的开发。<br><a id="more"></a><br>由于是后台管理平台，对视觉的要求相对来说会低一点，但是如何将系统布局得合理，能让用户以最快的方式获取到想要的信息还是得下一番功夫。</p><p>交互这块比较重要，旧的平台其实也是我开发的，但是由于当初缺少项目经验，系统中存在大量的不合理的地方，给运维人员带来了许多不方便。趁着这次系统的重新开发，将功补过。</p><p>系统开发的话，最近在写一个为公司系统定制，基于 <a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">element-ui</a> 二次封装的库 <a href="https://www.npmjs.com/package/hzsj-components" target="_blank" rel="noopener">hzsj-component</a>。因为公司内部有多个系统，但是系统之间又多多少少有相似的业务模块，因此为了提高开发的效率，就决定封装一个库。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最近都比较忙，所以时间一直都不够用，忙着忙着一周就过去了。这周将手头上零碎的事情处理得差不多了，下周应该可以将大部分经历放在新版系统的开发上。希望不要出什么岔子。</p><p>这周与一位同事一同开发一个功能模块，闹的我心里有点不愉快，一个东西经常改来改去，让我很暴躁，因为我这周事情本来就比较多，而这个同事喜欢扣细节，时不时提出点建议来，当然有些也是客户那的要求，但对我来说没什么区别。不过回过头想想，自己也是有责任的，一个需求给我，我就真的只做了那个需求描述的功能，但其实这样做出来的功能完全经不起推敲，根本就是在写 bug。所以在开发方面，还是得静下心来，将需求分析得透彻之后再进行开发，切记不可毛躁。</p><p>还有就是将手头上的事情排个轻重缓急，公司目前只有我一个前端，事情杂是免不了的，但事情又只能一件一件来，因此，合理安排开发顺序非常重要，不然只会在思维切换过程中浪费大量时间。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;最近的开发任务很重，前端我一个人得负责系统的视觉、交互和前端的开发。&lt;br&gt;
    
    </summary>
    
    
      <category term="一周总结" scheme="https://github.com/Tit1e/tags/%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>hexo rss 报错解决方案</title>
    <link href="https://github.com/Tit1e/2019/03/30/58-hexo-rss-error/"/>
    <id>https://github.com/Tit1e/2019/03/30/58-hexo-rss-error/</id>
    <published>2019-03-30T01:24:37.000Z</published>
    <updated>2019-04-13T13:38:35.456Z</updated>
    
    <content type="html"><![CDATA[<p>这几天一直在折腾博客主题，原来用的 <a href="https://github.com/pinggod/hexo-theme-apollo">hexo-theme-apollo</a> 去看了下作者已经停止维护了，apollo 主题本身已经是一个比较简洁的主题了，配色来源于 <a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue</a> 的官网，但看久了还是觉得审美疲劳，我有个关注的博主 <a href="https://ky0n.xyz/" target="_blank" rel="noopener">ky0n</a> 的博客主题我挺喜欢的，非常简洁，所以我就想照着他的主题修改一个，但改的过程中发现，他主题里面的 class 命名，dom结构跟 apollo 的非常相似，所以我猜他可能也是在 apollo 基础上改的。</p><p>改样式过程很顺利，但这次我想把 RSS 功能给放出来，这就出现问题了，RSS 页面出现了错误：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This<span class="built_in"> page </span>contains the following errors:</span><br><span class="line"><span class="builtin-name">error</span> on line 264 at column 238: PCDATA invalid Char value 8</span><br><span class="line">Below is a rendering of the<span class="built_in"> page </span>up <span class="keyword">to</span> the first error.</span><br></pre></td></tr></table></figure><p>这个问题其实是由于文章中的隐藏字符 <code>^H</code> 导致的，这个字符在 VS Code 跟 Typora 下并不会显示，但在 vim 下会显示。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-03-30-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-03-28%2023.45.15.png" alt></p><h3 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h3><p>用编辑器打开 <code>/public/atom.xml</code>，定位到报错的行，看看报错是在哪篇文章中，然后用 vim 打开这篇文章，查看有没有 删掉文章里的 <code>^H</code> 字符，当然保险起见你可以过一遍所有文章，然后再执行 <code>hexo g &amp;&amp; hexo d</code> 部署到线上，就不会有错误信息了。</p><p><a href="https://www.leejia.me/code/id_rss_vscode_bug.html" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这几天一直在折腾博客主题，原来用的 &lt;a href=&quot;https://github.com/pinggod/hexo-theme-apollo&quot;&gt;hexo-theme-apollo&lt;/a&gt; 去看了下作者已经停止维护了，apollo 主题本身已经是一个比较简洁的主题了，配色来
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>element-ui 树形控件使用右键菜单</title>
    <link href="https://github.com/Tit1e/2019/03/29/57-el-tree-contextmenu/"/>
    <id>https://github.com/Tit1e/2019/03/29/57-el-tree-contextmenu/</id>
    <published>2019-03-29T13:16:20.000Z</published>
    <updated>2019-04-13T13:38:28.094Z</updated>
    
    <content type="html"><![CDATA[<p>element-ui 的树形控件本身是不支持右键的，官方文档上推荐把操作按钮展示在对应的项上，但是如果操作项比较多，或者本身就有信息需要展示在项上，再加上这些操作按钮就会比较凌乱。正好公司业务上有这个需求，因此我在网上搜了一圈，找到比较好的解决方式。</p><p>整体思路就是：当右键时，调用左键的 <code>node-click</code> 方法，通过 <code>node-click</code> 将获取到的数据储存起来，然后展示右键菜单，获取到数据后，怎么处理就可以自由发挥了。</p><p>右键菜单我使用了 <a href="https://github.com/xunleif2e/vue-context-menu">vue-context-menu</a> 插件，引入方式可看 <code>README</code>。</p><p><a href="https://evolly.one/demos/57.el-tree-contextmenu/dist/" target="_blank" rel="noopener">Demo</a></p><p>下面是具体代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-tree</span> <span class="attr">:data</span>=<span class="string">"data"</span> <span class="attr">id</span>=<span class="string">"el-tree"</span> <span class="attr">:props</span>=<span class="string">"defaultProps"</span> @<span class="attr">node-click</span>=<span class="string">"handleNodeClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-tree</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-menu</span> <span class="attr">class</span>=<span class="string">"right-menu"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:target</span>=<span class="string">"contextMenuTarget"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:show</span>=<span class="string">"contextMenuVisible"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">update:show</span>=<span class="string">"(show) =&gt; contextMenuVisible = show"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>操作1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>操作2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>操作3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-menu</span>&gt;</span></span><br><span class="line">  当前右键获取到的节点为：&#123;&#123;JSON.stringify(nodeData)&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      contextMenuTarget: <span class="literal">null</span>,</span><br><span class="line">      contextMenuVisible: <span class="literal">false</span>,</span><br><span class="line">      nodeData: &#123;&#125;,</span><br><span class="line">      data: [&#123;</span><br><span class="line">        label: <span class="string">'一级 1'</span>,</span><br><span class="line">        children: [&#123;</span><br><span class="line">          label: <span class="string">'二级 1-1'</span>,</span><br><span class="line">          children: [&#123;</span><br><span class="line">            label: <span class="string">'三级 1-1-1'</span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        label: <span class="string">'一级 2'</span>,</span><br><span class="line">        children: [&#123;</span><br><span class="line">          label: <span class="string">'二级 2-1'</span>,</span><br><span class="line">          children: [&#123;</span><br><span class="line">            label: <span class="string">'三级 2-1-1'</span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          label: <span class="string">'二级 2-2'</span>,</span><br><span class="line">          children: [&#123;</span><br><span class="line">            label: <span class="string">'三级 2-2-1'</span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        label: <span class="string">'一级 3'</span>,</span><br><span class="line">        children: [&#123;</span><br><span class="line">          label: <span class="string">'二级 3-1'</span>,</span><br><span class="line">          children: [&#123;</span><br><span class="line">            label: <span class="string">'三级 3-1-1'</span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          label: <span class="string">'二级 3-2'</span>,</span><br><span class="line">          children: [&#123;</span><br><span class="line">            label: <span class="string">'三级 3-2-1'</span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;],</span><br><span class="line">      defaultProps: &#123;</span><br><span class="line">        children: <span class="string">'children'</span>,</span><br><span class="line">        label: <span class="string">'label'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// vue-context-menu 需要传入一个触发右键事件的元素，等页面 dom 渲染完毕后才可获取</span></span><br><span class="line">      <span class="keyword">this</span>.contextMenuTarget = <span class="built_in">document</span>.querySelector(<span class="string">'#el-tree'</span>)</span><br><span class="line">      <span class="comment">// 获取所有的 treeitem，循环监听右键事件</span></span><br><span class="line">      <span class="keyword">const</span> tree = <span class="built_in">document</span>.querySelectorAll(<span class="string">'#el-tree [role="treeitem"]'</span>)</span><br><span class="line">      tree.forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">        i.addEventListener(<span class="string">'contextmenu'</span>,event =&gt; &#123;</span><br><span class="line">          <span class="comment">// 如果右键了，则模拟点击这个treeitem</span></span><br><span class="line">          event.target.click()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleNodeClick(data) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">      <span class="keyword">this</span>.nodeData = data</span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick()&#123;</span><br><span class="line">      <span class="keyword">this</span>.contextMenuVisible = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Microsoft Yahei'</span>, <span class="string">'Avenir'</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">  <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">  <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 右键会选中文字，为了美观将它禁用</span><br><span class="line"><span class="selector-id">#el-tree</span>&#123;</span><br><span class="line">  <span class="attribute">user-select</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-menu</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="built_in">rgba</span>(0, 0, 0, .2);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1a1a1a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-menu</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-menu</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0.5em</span> <span class="number">1em</span> <span class="number">0</span> <span class="built_in">rgba</span>(0,0,0,.1);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-menu</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#42b983</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是完整代码。</p><p>当然还有另外一种思路。el-tree 自带有 <code>node-contextmenu</code> 事件，如果使用了这个事件，原生的右键事件都会被阻止，因此上面方法不能与这个事件一起使用，会造成右键插件无法正常显示。但是 <code>node-contextmenu</code> 事件返回了非常详细的参数：依次为 event、传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。由于可以获取到 event，里面带有鼠标右击的坐标，因此完全可以自己写一个右键菜单，而且这个事件的回调参数更为丰富。</p><p><a href="https://segmentfault.com/q/1010000012940760" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;element-ui 的树形控件本身是不支持右键的，官方文档上推荐把操作按钮展示在对应的项上，但是如果操作项比较多，或者本身就有信息需要展示在项上，再加上这些操作按钮就会比较凌乱。正好公司业务上有这个需求，因此我在网上搜了一圈，找到比较好的解决方式。&lt;/p&gt;
&lt;p&gt;整体思路
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>编写一个全局 SVG 图标组件</title>
    <link href="https://github.com/Tit1e/2019/03/27/56-global-icon-component/"/>
    <id>https://github.com/Tit1e/2019/03/27/56-global-icon-component/</id>
    <published>2019-03-27T04:30:06.000Z</published>
    <updated>2019-04-13T13:38:24.144Z</updated>
    
    <content type="html"><![CDATA[<p>在现在网站开发中， icon 是必不可少的元素，它可以使页面更加美观，内容更加丰富，某些场景也能更加直观地表达含义。icon 也分好多种类型，以前是使用图片，后来有了字体图标，SVG。由于占用空间大以及使用不方便（比如不同终端需要不同尺寸的图片），用图片做图标的方式已经渐渐被淘汰了，取而代之的是字体图标以及 SVG，这两种都是矢量图形，光放大不失真这个特点就很让人心动，并且体积还比图片小。</p><p>字体图标顾名思义就是这个图标就是一个字体，只是它显示的是个图标。因此 CSS 能对字体设置的属性，对字体图标也同样适用。</p><p>缺点的话可能只是想使用这个图标库的某几个图标，但是却必须把整个图标库引入，造成了资源浪费。不过现在这个问题在 <a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里妈妈</a> 图标管理平台得到了很好的解决，可以自己定义需要用到的图标，然后系统会帮你生成一个图标库，可以在线引入，也可以下载到本地，可以说是造福了广大前端工程师和设计师。</p><p>虽然阿里的这个平台已经做得很好了，但是就我而言，在实际项目开发中还是遇到了不方便的问题：</p><ul><li>之前没考虑周全，或者后来来了新的需求，需要增加新图标，而要更新图标库是需要账号的，更新一个图标可能会涉及到根很多人沟通。</li><li>更新完图标库后还需去更新在线引用地址或更新本地文件。</li></ul><p>SVG，以下是 <a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%B8%AE%E6%94%BE%E5%90%91%E9%87%8F%E5%9C%96%E5%BD%A2" target="_blank" rel="noopener">维基百科</a> 对它的描述：</p><blockquote><p><strong>可缩放矢量图形</strong>（英语：<strong>Scalable Vector Graphics</strong>，<strong>SVG</strong>）是一种基于 <a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">可扩展标记语言</a> （<a href="https://zh.wikipedia.org/wiki/XML" target="_blank" rel="noopener">XML</a>），用于描述二维 <a href="https://zh.wikipedia.org/wiki/%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%BD%A2" target="_blank" rel="noopener">矢量图形</a> 的图形格式。SVG由 <a href="https://zh.wikipedia.org/wiki/W3C" target="_blank" rel="noopener">W3C</a> 制定，是一个 <a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E6%A0%87%E5%87%86" target="_blank" rel="noopener">开放标准</a>。</p></blockquote><p>SVG 其实是 XML格式的文件，因此你可以直接使用编辑器打开 .svg 文件，并且可对它进行编辑。它的优点在于：</p><ul><li>一个图标就是一个文件，灵活性高。</li><li>不同区域可以使用不同颜色，也就是说可以用它绘制彩色图标。</li><li>矢量图形，放大不失真。</li></ul><p>SVG 文件的使用可以分为很多种，你可以把它当作图片直接在 <code>img</code> 标签或 CSS 的 <code>background-image</code> 属性中使用，也可使用 <code>svg</code> 标签中使用。但是这样使用会很麻烦，避免不了一串很长的地址，如果只要写一个标签，并传入一个图标名字就可直接使用，那就完美了。</p><p>我在  <a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a> 项目中发现了这种使用方式，因此把它提取了出来。</p><p>首先参考 <a href="https://evolly.one/2019/03/12/53.vue-cli3-use-svg-sprite-loader/" target="_blank" rel="noopener">在 Vue CLI 3 中配置 svg-sprite-loader</a> 在 webpack 添加 SVG 的 loader。并建好相应的目录，文章中我的目录建在 <code>src/icons</code>。</p><p>在 <code>icons</code> 文件夹下新建 <code>svg</code> 文件夹用来存放图标，在同级目录下新建 <code>index.js</code>。</p><p>然后我们去编写组件，名字就命名为 <code>SvgIcon</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">// SvgIcon.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;svg :class=&quot;svgClass&quot; aria-hidden=&quot;true&quot; v-on=&quot;$listeners&quot;&gt;</span><br><span class="line">    &lt;use :xlink:href=&quot;iconName&quot; /&gt;</span><br><span class="line">  &lt;/svg&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;SvgIcon&apos;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    iconClass: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    className: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    iconName() &#123;</span><br><span class="line">      return `#icon-$&#123;this.iconClass&#125;`</span><br><span class="line">    &#125;,</span><br><span class="line">    svgClass() &#123;</span><br><span class="line">      if (this.className) &#123;</span><br><span class="line">        return &apos;svg-icon &apos; + this.className</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return &apos;svg-icon&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.svg-icon &#123;</span><br><span class="line">  width: 1em;</span><br><span class="line">  height: 1em;</span><br><span class="line">  vertical-align: -0.15em;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>然后继续编写 <code>src/icons/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/icons/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> SvgIcon <span class="keyword">from</span> <span class="string">'@/components/SvgIcon'</span><span class="comment">// svg组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册为全局组件</span></span><br><span class="line">Vue.component(<span class="string">'svg-icon'</span>, SvgIcon)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>.context(<span class="string">'./svg'</span>, <span class="literal">false</span>, /\.svg$/)</span><br><span class="line"><span class="keyword">const</span> requireAll = <span class="function"><span class="params">requireContext</span> =&gt;</span> requireContext.keys().map(requireContext)</span><br><span class="line">requireAll(req)</span><br></pre></td></tr></table></figure><p>最后，在 <code>main.js</code> 中引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@/icons'</span></span><br></pre></td></tr></table></figure><p>这样你就可以在系统任何地方使用 <code>&lt;svg-icon icon-name=&quot;svg名称&quot; /&gt;</code> 引入图标了，当你想增加图标时，只要往 <code>src/icons/svg</code> 中添加图标就可以了。</p><p>结合 <a href="https://evolly.one/2019/03/26/54.vuecl3-npm-publish/" target="_blank" rel="noopener">使用 Vue CLI3 编写组件库并发布至 npm</a>，你就可以拥有一个属于自己的图标库。你只要维护这个图标库，然后在其他项目中安装与更新它就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在现在网站开发中， icon 是必不可少的元素，它可以使页面更加美观，内容更加丰富，某些场景也能更加直观地表达含义。icon 也分好多种类型，以前是使用图片，后来有了字体图标，SVG。由于占用空间大以及使用不方便（比如不同终端需要不同尺寸的图片），用图片做图标的方式已经渐渐
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
</feed>
