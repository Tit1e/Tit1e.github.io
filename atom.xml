<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tit1e</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Tit1e/"/>
  <updated>2020-11-29T12:25:17.916Z</updated>
  <id>https://github.com/Tit1e/</id>
  
  <author>
    <name>Tit1e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>flex-grow 属性无效，宽度被撑开问题解决方法</title>
    <link href="https://github.com/Tit1e/2020/11/29/136-flex-grow-invalid/"/>
    <id>https://github.com/Tit1e/2020/11/29/136-flex-grow-invalid/</id>
    <published>2020-11-29T12:02:18.000Z</published>
    <updated>2020-11-29T12:25:17.916Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 flex 布局的时候，有时会遇到 flex-grow 属性无效的情况，期望是两个子元素宽度平均分，但是实际情况就是无法平均分布，设置 <code>flex-shrink: 0;</code> 也无效，我用文字超出不换行来复现这种情况。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#flex-box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#flex-box</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#flex-box</span> <span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"flex-box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>超出不换行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>超出不换行，超出不换行，超出不换行，超出不换行，超出不换行，超出不换行，超出不换行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码渲染出的 dom 是这个样子的：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-11-29-120940.png" alt></p><p>明明对 div 元素设置了 <code>flex-grow: 1;</code> 属性，但是，实际上两个 div 的宽度并没有被平均分。</p><p>解决办法很简单，只要把 div 的 width 属性设置为 0px，这样 div 的宽度就是由 <code>flex-grow: 1;</code> 来决定的了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#flex-box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#flex-box</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="comment">/* 加上这一行 css */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#flex-box</span> <span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把宽度设置为 0 后，浏览器中渲染出的效果就是我们想要的效果了。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-11-29-121707.png" alt></p><p>同理，如果设置了 <code>flex-direction: column;</code> ，那就需要把 height 属性设置为0px。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用 flex 布局的时候，有时会遇到 flex-grow 属性无效的情况，期望是两个子元素宽度平均分，但是实际情况就是无法平均分布，设置 &lt;code&gt;flex-shrink: 0;&lt;/code&gt; 也无效，我用文字超出不换行来复现这种情况。&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue 报 Failed to mount component 错误</title>
    <link href="https://github.com/Tit1e/2020/09/28/135-Failed-to-mount-component/"/>
    <id>https://github.com/Tit1e/2020/09/28/135-Failed-to-mount-component/</id>
    <published>2020-09-28T14:00:34.000Z</published>
    <updated>2020-09-28T14:17:14.139Z</updated>
    
    <content type="html"><![CDATA[<p>开发过程中遇到了个奇怪的报错</p><blockquote><p>Failed to mount component: template or render function not defined.</p></blockquote><p>看内容应该是模板引用出了问题，但是这个报错不会显示具体是哪行报错了。我 debug 了好久最终才发现问题。</p><p>在用 vue-cli 开发项目时，我会图省事在引用组件时经常省略<code>index.vue</code>，比如正常的路径是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@/<span class="keyword">views</span>/<span class="keyword">home</span>/<span class="keyword">index</span>.<span class="keyword">vue</span></span><br></pre></td></tr></table></figure><p>而我经常写成</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@/<span class="keyword">views</span>/<span class="keyword">home</span></span><br></pre></td></tr></table></figure><p>正常情况下这样写并没有问题，本来也支持这种写法，</p><p>当时当你的 home 目录下存在<code>index.js</code>时，它默认引用的是 js 文件而不是.vue文件，因此就会产生上面的报错，解决方法就是写上完整的文件路径。</p><p>这其实就是个很简单的问题，就是 debug 比较难。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发过程中遇到了个奇怪的报错&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Failed to mount component: template or render function not defined.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看内容应该是模板引用出了问
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack 报错 error：Support for the experimental syntax &#39;classProperties&#39; isn&#39;t currently enable</title>
    <link href="https://github.com/Tit1e/2020/09/01/134-webpack-experimental-syntax/"/>
    <id>https://github.com/Tit1e/2020/09/01/134-webpack-experimental-syntax/</id>
    <published>2020-09-01T01:29:52.000Z</published>
    <updated>2020-11-03T15:05:19.056Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子封装完波形插件在用 webpack 打包的时候，出现了异常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error：Support <span class="keyword">for</span> the experimental syntax <span class="string">'classProperties'</span> isn<span class="string">'t currently enable</span></span><br></pre></td></tr></table></figure><p>从这个报错中可以知道出现这个异常的原因是我封装的类中用了 Class 的实验性语法，虽然我已经装了 Babel，但我安装的 Babel 并不支持试验性语法的转译，所以需要单独安装转译试验性语法的插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @babel/plugin-proposal-class-properties</span><br></pre></td></tr></table></figure><p>另外还需要在 .babelrc 中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"@babel/plugin-proposal-class-properties"</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后再进行编译就不会出现上面的报错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前阵子封装完波形插件在用 webpack 打包的时候，出现了异常：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="webpack" scheme="https://github.com/Tit1e/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>el-tree 更新节点信息</title>
    <link href="https://github.com/Tit1e/2020/08/06/133-el-tree-update-node/"/>
    <id>https://github.com/Tit1e/2020/08/06/133-el-tree-update-node/</id>
    <published>2020-08-06T14:23:07.000Z</published>
    <updated>2020-08-06T14:56:46.552Z</updated>
    
    <content type="html"><![CDATA[<p>公司组织机构管理中需要用到 <code>element-u</code> 的 <code>el-tree</code> 组件，会对公司的结构进行添加或删除，<code>el-tree</code> 节点的加载方式有两种：一种是直接传入所有的节点信息，当然前提是先整理好上下级关系；另一种就是异步动态加载节点。</p><p>如果采用第一种方式因为所有数据都已经被加载，所以新增、编辑、删除节点后都可以在源数据上进行更改操作。而用异步加载的方式，新增，可以在新增成功后让后端返回新增节点的 id，然后通过组件提供的 <code>append</code> 、<code>insertBefore</code> 或 <code>insertAfter</code> 直接追加节点，删除可以通过 <code>remove</code> 直接移除，但是如果是编辑的话，需要更新节点信息，而组件并没有提供这样的方法，如果重新加载整个树，那树又要从第一级重新展开。最后我想到的方法是模拟父节点重新加载：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">refreshNode(id) &#123;</span><br><span class="line">  <span class="comment">// 先根据节点 id 获取到节点的父节点</span></span><br><span class="line">  <span class="keyword">const</span> node = <span class="keyword">this</span>.$refs.elTree.getNode(id)</span><br><span class="line">  <span class="comment">// 将父节点的 loaded 设置为 false, 这样在展开父节点的时候，就会重新请求子节点</span></span><br><span class="line">  node.parent.loaded = <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 展开父节点</span></span><br><span class="line">  node.parent.expand()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就完成了节点的更新，也不用重载整个树。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;公司组织机构管理中需要用到 &lt;code&gt;element-u&lt;/code&gt; 的 &lt;code&gt;el-tree&lt;/code&gt; 组件，会对公司的结构进行添加或删除，&lt;code&gt;el-tree&lt;/code&gt; 节点的加载方式有两种：一种是直接传入所有的节点信息，当然前提是先整理好上下级
      
    
    </summary>
    
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
      <category term="element-ui" scheme="https://github.com/Tit1e/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>vue 监听子组件生命周期</title>
    <link href="https://github.com/Tit1e/2020/06/09/132-vue-listen-child-component/"/>
    <id>https://github.com/Tit1e/2020/06/09/132-vue-listen-child-component/</id>
    <published>2020-06-09T13:42:13.000Z</published>
    <updated>2020-06-09T13:58:48.043Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子做业务的时候遇到一个需求，需要在用户进入系统时加一个全局的 loading 遮罩层，在页面渲染完成后关闭遮罩，在正常的用户登录，进入系统这个流程下，实现这个并没有难度：</p><p>进入登录页-用户登录-显示 loading - 进入首页 - 在首页的 mounted 钩子中关闭 loading</p><p>但主要是用户不按这套来，用户直接在一个其他页面刷新的时候，这套就不适用了，除非你去每个页面的 mounted 钩子中都写一个关闭loading 的方法，但这样做明显不现实，页面少还好说，但我们的系统已经有几十个页面，每个都加一遍，实在过于麻烦。</p><p>后来我 Google 了一番，查到了 <code>@hook:mounted</code> 这个事件可以监听子组件的生命周期，这样我把它加 <code>&lt;router-view /&gt;</code> 上，就实现了监听每个页面的 mounted 生命周期，然后在回调中写入关闭 loading 的方法，就实现了效果。</p><p><a href="https://www.cnblogs.com/mengfangui/p/12546866.html" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前阵子做业务的时候遇到一个需求，需要在用户进入系统时加一个全局的 loading 遮罩层，在页面渲染完成后关闭遮罩，在正常的用户登录，进入系统这个流程下，实现这个并没有难度：&lt;/p&gt;
&lt;p&gt;进入登录页-用户登录-显示 loading - 进入首页 - 在首页的 mounte
      
    
    </summary>
    
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>批量删除微博，可自定义删除内容</title>
    <link href="https://github.com/Tit1e/2020/05/23/131-delete-weibo/"/>
    <id>https://github.com/Tit1e/2020/05/23/131-delete-weibo/</id>
    <published>2020-05-23T07:36:40.000Z</published>
    <updated>2020-05-23T08:33:51.718Z</updated>
    
    <content type="html"><![CDATA[<p>首先浏览器上登录微博，浏览器要求： QQ浏览器，360极速浏览器，谷歌浏览器，火狐浏览器等都行，可以先试试，不行再换。Safari我记得默认是关闭调试模式的，</p><p>Windows 用户直接按 F12 打开控制台，或者在网页上右键，会有【元素审查】、【检查】类似这种的菜单项，打开它，正常情况浏览器内会出现一个窗口。</p><p>然后点击【console】标签页，复制代码，在箭头在的位置粘贴代码，如果你要按条件删除，那就先编辑好条件，然后按回车。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-05-23-082341.png" alt></p><p>根据实际使用来说，删除要等个十来秒才会执行，当页面在闪的时候说明在删除了。</p><p>使用的时候自动跳到下一页好像有点问题。如果页面长时间没反应，那就刷新一下页面，再粘贴执行一遍代码。</p><p>这是按条件删除微博的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">s.setAttribute(</span><br><span class="line">  <span class="string">'src'</span>,</span><br><span class="line">  <span class="string">'https://lib.sinaapp.com/js/jquery/2.0.3/jquery-2.0.3.min.js'</span></span><br><span class="line">)</span><br><span class="line">s.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!$(<span class="string">'div[action-type="feed_list_item"]'</span>).length) &#123;</span><br><span class="line">      <span class="comment">// 删完符合条件的微博，翻到下一页</span></span><br><span class="line">      $(<span class="string">'a.next'</span>).click()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> firstItem = $(<span class="string">'div[action-type="feed_list_item"]'</span>)[index]</span><br><span class="line">      <span class="keyword">const</span> text = $(firstItem).find(<span class="string">'.WB_feed_detail .WB_detail div[node-type="feed_list_content"]'</span>).text()</span><br><span class="line">      <span class="comment">// 删除微博正文中含有 “今天” 两个字的微博</span></span><br><span class="line">      <span class="keyword">const</span> needDelete = text.indexOf(<span class="string">'今天'</span>) &gt; <span class="number">0</span></span><br><span class="line">      <span class="comment">// 如果要匹配多个：</span></span><br><span class="line">      <span class="comment">// 下面这样写会把微博正文中含有 “今天” 或者 “第一” 的微博删除，含有其中之一就会被删</span></span><br><span class="line">      <span class="comment">// const needDelete = text.indexOf('今天') &gt; 0 || text.indexOf('第一') &gt; 0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 这样写是将微博正文中含有 “今天” 和 “第一” 的微博删除，必须两个都包含才会被删</span></span><br><span class="line">      <span class="comment">// const needDelete = text.indexOf('今天') &gt; 0 &amp;&amp; text.indexOf('第一') &gt; 0</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(needDelete)&#123;</span><br><span class="line">        $(firstItem).find(<span class="string">'a[action-type="feed_list_delete"]'</span>)[<span class="number">0</span>].click()</span><br><span class="line">        $(firstItem).find(<span class="string">'a[action-type="ok"]'</span>)[<span class="number">0</span>].click()</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滚动到底部自动加载</span></span><br><span class="line">    $(<span class="string">'html, body'</span>).animate(&#123; <span class="attr">scrollTop</span>: $(<span class="built_in">document</span>).height() &#125;, <span class="string">'slow'</span>)</span><br><span class="line">  &#125;, <span class="number">800</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(s)</span><br></pre></td></tr></table></figure><p>这是删除所有微博的代码：<a href="https://greasyfork.org/en/scripts/14709-weibored-js/code" target="_blank" rel="noopener">来源</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">s.setAttribute(</span><br><span class="line">  <span class="string">'src'</span>,</span><br><span class="line">  <span class="string">'https://lib.sinaapp.com/js/jquery/2.0.3/jquery-2.0.3.min.js'</span></span><br><span class="line">);</span><br><span class="line">s.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!$(<span class="string">'a[action-type="feed_list_delete"]'</span>)) &#123;</span><br><span class="line">      $(<span class="string">'a.next'</span>).click();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $(<span class="string">'a[action-type="feed_list_delete"]'</span>)[<span class="number">0</span>].click();</span><br><span class="line">      $(<span class="string">'a[action-type="ok"]'</span>)[<span class="number">0</span>].click();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// scroll bottom let auto load</span></span><br><span class="line">    $(<span class="string">'html, body'</span>).animate(&#123; <span class="attr">scrollTop</span>: $(<span class="built_in">document</span>).height() &#125;, <span class="string">'slow'</span>);</span><br><span class="line">  &#125;, <span class="number">800</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(s);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先浏览器上登录微博，浏览器要求： QQ浏览器，360极速浏览器，谷歌浏览器，火狐浏览器等都行，可以先试试，不行再换。Safari我记得默认是关闭调试模式的，&lt;/p&gt;
&lt;p&gt;Windows 用户直接按 F12 打开控制台，或者在网页上右键，会有【元素审查】、【检查】类似这种
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>uni-app 小程序给所有页面添加分享</title>
    <link href="https://github.com/Tit1e/2020/04/28/130-mini-program-share/"/>
    <id>https://github.com/Tit1e/2020/04/28/130-mini-program-share/</id>
    <published>2020-04-28T14:59:39.000Z</published>
    <updated>2020-04-28T15:21:35.304Z</updated>
    
    <content type="html"><![CDATA[<p>小程序的转发按钮默认是关闭的，需要人为打开，为小程序更方便地传播，所以我需要给小程序加上这个功能。</p><p>我的目的只是方便传播小程序，需求跟其他小程序相比没那么复杂，分享后我只需固定进入小程序首页。</p><p>小程序在 Page 注册小程序页面时，有一个 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onShareAppMessage-Object-object" target="_blank" rel="noopener">onShareAppMessage</a> 函数，这个函数需要 <code>return</code> 一个<code>Object</code> ，这个对象中是聊天界面显示的小程序卡片的一些信息，标题，默认图片，页面路径。</p><p>原生小程序使用就是这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (res.from === <span class="string">'button'</span>) &#123;</span><br><span class="line">      <span class="comment">// 来自页面内转发按钮</span></span><br><span class="line">      <span class="built_in">console</span>.log(res.target)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title: <span class="string">'自定义转发标题'</span>,</span><br><span class="line">      path: <span class="string">'/page/user?id=123'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是这个函数需要在每个页面都写一遍，就很麻烦。我用的是 uni-app，所以 mixins 又派上用场了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/mixins/share.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">onShareAppMessage(res) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">path: <span class="string">'pages/tabBar/tools/tools'</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>main.js</code> 中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mixin <span class="keyword">from</span> <span class="string">'@/mixins/share.js'</span></span><br><span class="line"></span><br><span class="line">Vue.mixin(mixin)</span><br></pre></td></tr></table></figure><p>这样，小程序中的所有页面都可以发起转发了，不过我转发的路径固定都是小程序首页，你也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/getCurrentPages.html" target="_blank" rel="noopener">getCurrentPages()</a>  来获取当前页面栈，从而获取当前页面路径，这样就可以实现动态转发路径，转发当前页面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;小程序的转发按钮默认是关闭的，需要人为打开，为小程序更方便地传播，所以我需要给小程序加上这个功能。&lt;/p&gt;
&lt;p&gt;我的目的只是方便传播小程序，需求跟其他小程序相比没那么复杂，分享后我只需固定进入小程序首页。&lt;/p&gt;
&lt;p&gt;小程序在 Page 注册小程序页面时，有一个 &lt;a 
      
    
    </summary>
    
    
      <category term="小程序" scheme="https://github.com/Tit1e/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>uni-app 小程序设置自定义字体</title>
    <link href="https://github.com/Tit1e/2020/04/27/129-mini-program-font/"/>
    <id>https://github.com/Tit1e/2020/04/27/129-mini-program-font/</id>
    <published>2020-04-27T14:21:56.000Z</published>
    <updated>2020-04-28T15:21:37.954Z</updated>
    
    <content type="html"><![CDATA[<p>最近在开发动森的一款小程序，到目前为止踩了不少坑，今天记录一下小程序引入自定义字体的方式。后续会陆续更新其他踩坑记录。</p><p>首先，小程序是支持使用自定义字体的，使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/font/wx.loadFontFace.html" target="_blank" rel="noopener">wx.loadFontFace()</a> 就可以引入字体，但是使用这个 api 有一些限制：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-143333.png" alt></p><p>需要特别注意的点有：</p><p>第一点：字体格式，保险起见使用 ttf 格式，如果不是 ttf 格式，可以在 <a href="https://transfonter.org/" target="_blank" rel="noopener">https://transfonter.org/</a> 在线转一下。</p><p>第二点：字体链接必须是 <strong>https</strong>，意味着不支持引入本地字体。</p><p>第三点：链接必须<strong>同源</strong>或者开启了 <strong>cors</strong> 支持。</p><p>其他几点注意点对使用有影响，但没以上三点重要。</p><p>我将字体上传到了腾讯的对象存储上，因此我要在存储桶的设置中对 servicewechat.com 开启 cors 支持：</p><p>1、登录腾讯云，进入对象存储控制台</p><p>2、点击<strong>【存储桶列表】</strong>菜单</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-144352.png" alt></p><p>3、点击上传了字体的存储桶，进入存储桶详情</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-144625.png" alt></p><p>4、点击左侧<strong>【基础配置】</strong>菜单</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-144749.png" alt></p><p>5、找到<strong>【跨域访问CORS设置】</strong>卡片，点击添加规则，照下图填写表单并保存，过一会儿就会生效。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-144838.png" alt></p><p>官方文档上说如果需要全局支持字体的话 <code>wx.loadFontFace</code> 需要在 <code>app.js</code> 中调用并且设置 <code>global</code> 为 <code>true</code>。</p><p>并且使用 <code>global</code> 属性对调试基础库版本有要求，需要 2.10.0 以上，否则字体只会在调用这个 api 的页面生效。<img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-150114.png" alt></p><p>还有注意中提到的第四点也注意一下，可能会有个报错，但是字体实际已经生效，这个报错可以忽略。</p><p>但是我使用的是 <code>uni-app</code>，我尝试写在 <code>main.js</code> 入口文件中，但是并没有生效，不过 <code>uni-app</code> 支持 vue 的 mixins，创建一个font.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/mixins/font.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">onLoad() &#123;</span><br><span class="line">uni.loadFontFace(&#123;</span><br><span class="line">family: <span class="string">'DFYuanW9'</span>,</span><br><span class="line">source: <span class="string">'url("https://xxxxxxx.ttf")'</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>main.js</code> 中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mixin <span class="keyword">from</span> <span class="string">'@/mixins/font.js'</span></span><br><span class="line"></span><br><span class="line">Vue.mixin(mixin)</span><br></pre></td></tr></table></figure><p>并在全局 css 中使用字体：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">page</span>&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'DFYuanW9'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样每个页面就都会生效了。</p><p>下面是字体使用效果：</p><p>不使用字体：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-IMG_2437.PNG" alt></p><p>使用字体：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-IMG_2436.PNG" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在开发动森的一款小程序，到目前为止踩了不少坑，今天记录一下小程序引入自定义字体的方式。后续会陆续更新其他踩坑记录。&lt;/p&gt;
&lt;p&gt;首先，小程序是支持使用自定义字体的，使用 &lt;a href=&quot;https://developers.weixin.qq.com/minipro
      
    
    </summary>
    
    
      <category term="小程序" scheme="https://github.com/Tit1e/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>element-ui el-table 表格高度自适应问题解决方案</title>
    <link href="https://github.com/Tit1e/2020/04/14/128-element-ui-table-auto-height/"/>
    <id>https://github.com/Tit1e/2020/04/14/128-element-ui-table-auto-height/</id>
    <published>2020-04-14T13:14:40.000Z</published>
    <updated>2020-08-27T15:14:19.171Z</updated>
    
    <content type="html"><![CDATA[<p>工作中由于公司业务需要，要求 table 做到整个 table 始终能在页面上完全显示， head 固定，body 超出滚动，由于公司使用的是 element-ui，el-table 组件提供了 height 属性，但是这个属性的值必须是具体的像素，因此，当页面的窗口大小发生变化时，想要表格高度自适应，一般的做法就是监听窗口大小是否改变，如果改变了就重新计算 table 的高度，然后重新设置。我之前的做法是这样的：</p><p>我们公司基本都是后台应用，结构差不多就是这个样子，菜单与顶栏的宽度与高度是固定的，而且菜单部分与表格高度的计算其实没有关系。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-14-134209.png" alt></p><p>因此我计算表格高度的时候，一般都是：</p><p>整个网页的高度 - 顶栏的高度 - 各种 margin，padding 的高度 = 表格高度</p><p>然后监听窗口的变化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, () =&gt; &#123;</span><br><span class="line"><span class="comment">//重新计算高度</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>直到后来我遇到了这个需求：</p><p>页面分为左右两部分，可拖动改变左侧部分的宽度，右侧还是自适应。乍一看这个左侧改变宽度跟右侧好像没什么关系，原来那套也适用啊，但是再仔细一想，左侧改变了有可能导致右侧筛选条件宽度不够而换行，一换行筛选条件的高度就改变了，这时候是需要重新计算高度的，但是上面监听的代码只监听窗口大小改变，而现在的情况窗口的大小并没有被改变，只是 div 的宽度发生了变化，后来我 google 了一圈，发现了 <a href="https://github.com/marcj/css-element-queries">css-element-queries</a> 这个库中的 <code>ResizeSensor</code>  这个类可以实现对元素大小改变的监听，使用方法也很简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * element 需要监听的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> ResizeSensor(element, () =&gt; &#123;</span><br><span class="line"><span class="comment">//callback</span></span><br><span class="line">  <span class="comment">//重新计算高度</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>并且在这次调整的过程中，我想到了用 flex 属性来让右侧的筛选条件跟 table 自行分配空间，因为这类表格的页面结构基本是固定的，上面是筛选条件，下面是表格，于是我封装了一个  <code>&lt;form-page&gt;</code> 组件，结构就是大概 是这样：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-14-141421.png" alt></p><p>这个结构下，我就不用再去关心除了筛选条件的高度外我还需要减去多少的额外高度，我只要关心我的 table slot 区域有多少高度，我就把 table 设为多少高度就可以了。</p><p>当然内容展示区域的高度是需要计算过的，但是这个只要在全局样式中用 <code>calc</code> 计算一次高度就可以了。</p><p>下面是 demo 的演示效果：</p><video src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-14-element-ui-table-auto-height.mp4" style="width: 100%" controls></video><p><a href="https://github.com/Tit1e/element-ui-table-auto-height">demo 源码</a></p><p><strong>2020年8月27日更新：</strong></p><p>目前 2.13 版本的 table 已经支持height=“100%”，所以可以放弃上面的实现方式了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工作中由于公司业务需要，要求 table 做到整个 table 始终能在页面上完全显示， head 固定，body 超出滚动，由于公司使用的是 element-ui，el-table 组件提供了 height 属性，但是这个属性的值必须是具体的像素，因此，当页面的窗口大小发
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>AppleScript 初尝试</title>
    <link href="https://github.com/Tit1e/2020/03/14/127-appleScript-Thunder/"/>
    <id>https://github.com/Tit1e/2020/03/14/127-appleScript-Thunder/</id>
    <published>2020-03-14T02:15:48.000Z</published>
    <updated>2020-03-14T02:59:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>迅雷有时候会出现刚开始下载的时候速度很快，但是过几十秒，速度就只有几十 kb 的情况。正常下载太慢，循环暂停启动方法倒是可以，但是我总不能什么都不做就光坐电脑前不停点开始任务，暂停任务吧？况且我一般都是睡觉的时候挂着迅雷。</p><p>想起以前在用 windows 的时候接触过按键精灵这类模拟键鼠操作的软件，我觉得 Mac OS 平台应该也有类似的软件，但是一圈搜下来并没有找到，倒是找到了官方的脚本语言 AppleScript。它倒是可以模拟键鼠操作，只是得自己折腾。</p><p>那我能怕折腾么？于是直接开干，边在<a href="applescript://" target="_blank" rel="noopener">脚本编辑器</a>测试边 Google，没多久折腾出来了个能将就用的。后来我又</p><p>优化了一下，并且集成到了 Alfred 中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 如果直接用脚本编辑器执行，不需要第一行与最后行，这是要在 Alfred 中执行才需要的。</span><br><span class="line">on alfred_script(q)</span><br><span class="line">  tell application "System Events"</span><br><span class="line">tell application "Thunder"</span><br><span class="line"><span class="comment">--激活主窗口</span></span><br><span class="line">activate</span><br><span class="line"><span class="keyword">end</span> tell</span><br><span class="line"><span class="comment">--暂停一秒</span></span><br><span class="line">delay <span class="number">1</span></span><br><span class="line"><span class="comment">--全选任务，因只有选中才能暂停开始任务</span></span><br><span class="line"><span class="keyword">key</span> code <span class="number">0</span> <span class="keyword">using</span> &#123;command down&#125;</span><br><span class="line">tell process <span class="string">"Thunder"</span></span><br><span class="line">tell <span class="keyword">window</span> <span class="string">"迅雷"</span></span><br><span class="line">entire <span class="keyword">contents</span></span><br><span class="line"><span class="comment">--q 是传进来的参数，表示循环次数</span></span><br><span class="line"><span class="comment">--本代码中一次循环用时 20 + 2 秒，可根据实际情况调整</span></span><br><span class="line"><span class="comment">--q 的次数根据每次循环的时长来计算</span></span><br><span class="line"><span class="keyword">repeat</span> q times</span><br><span class="line"><span class="comment">--等待20秒后暂停任务</span></span><br><span class="line">delay <span class="number">20</span></span><br><span class="line">click button <span class="number">7</span></span><br><span class="line"><span class="comment">--暂停2秒后重新开始任务</span></span><br><span class="line">delay <span class="number">2</span></span><br><span class="line">click button <span class="number">6</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">repeat</span></span><br><span class="line"><span class="keyword">end</span> tell</span><br><span class="line"><span class="keyword">end</span> tell</span><br><span class="line"><span class="keyword">end</span> tell</span><br><span class="line"><span class="keyword">end</span> alfred_script</span><br></pre></td></tr></table></figure><p>在集成到 Alfred 的过程中踩了个坑，就是传参问题，我之前一直用 <code>{query}</code> 来获取传过来的参数，但是一直不成功，查了后原来这要直接用 <code>q</code> 就行了。其实在脚本第一行已经说明，但我一直以为是固定格式。</p><p>之后我发现使用 AppleScript 还有个好处就是脚本执行的时候可以不保持窗口最前：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-03-14-%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B6%202020-03-14%2010.47.37.gif" alt></p><p>由于 AppleScript 的资料太少了，官方文档也很简单，没有实现我想要的效果。其实我本来的逻辑是每次循环前先判断下载列表中有没有任务，有的话就执行，没有就退出循环。但是目前还没找到获取的方法，所以只能先将就一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;迅雷有时候会出现刚开始下载的时候速度很快，但是过几十秒，速度就只有几十 kb 的情况。正常下载太慢，循环暂停启动方法倒是可以，但是我总不能什么都不做就光坐电脑前不停点开始任务，暂停任务吧？况且我一般都是睡觉的时候挂着迅雷。&lt;/p&gt;
&lt;p&gt;想起以前在用 windows 的时候
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>阻止表单只有一个 input 时回车自动提交</title>
    <link href="https://github.com/Tit1e/2020/03/08/126-form-single-input/"/>
    <id>https://github.com/Tit1e/2020/03/08/126-form-single-input/</id>
    <published>2020-03-08T07:13:44.000Z</published>
    <updated>2020-03-08T07:35:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在开发过程中遇到过这个问题，就是当一个表单中只有一个 input 时，enter 会直接提交表单。当初我用的是 Element-UI  的表单组件，本来我以为是 Element-UI的问题，后来查了后发现是原生表单就有这个特性。我当时是使用异步请求的数据，因此并不需要原生的提交，所以只有一个 input 时得想办法阻止原生的提交功能。</p><p>Element-UI 因为是封装过的，可以用它自己的方法来解决：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只要在表单元素上加入 @submit.native.prevent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form</span> @<span class="attr">submit.native.prevent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原生表单的组织方式我也查了一下，在这总结一下：</p><p>方法一：</p><p>在表单中再加入一个隐藏的 input</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法二：</p><p>表单提交时阻止提交</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">"return false;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法三：</p><p>监听 input  <code>keydown</code> 事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeydown</span>=<span class="string">"if(event.keyCode === 13) &#123; return false &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前在开发过程中遇到过这个问题，就是当一个表单中只有一个 input 时，enter 会直接提交表单。当初我用的是 Element-UI  的表单组件，本来我以为是 Element-UI的问题，后来查了后发现是原生表单就有这个特性。我当时是使用异步请求的数据，因此并不需要原
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>快捷键粘贴上传至七牛</title>
    <link href="https://github.com/Tit1e/2020/03/08/125-paste-upload-qiniu/"/>
    <id>https://github.com/Tit1e/2020/03/08/125-paste-upload-qiniu/</id>
    <published>2020-03-08T06:00:24.000Z</published>
    <updated>2020-03-08T07:13:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前<a href="/2020/03/08/124-qiniu-axios/">这篇博客</a>解决了 axios 直传七牛的问题，这篇来讲一下从粘贴板直接上传到七牛云的实现方式。</p><p>首先需要了解的是出于安全问题，js 是没权限主动读取用户粘贴板中的内存的，当用户主动触发粘贴事件时，js 是可以通过 <code>paste</code> 事件来获取到其中内容的。如何触发这个粘贴事件这里就不做讨论，单说事件触发后怎么获取到文件，其实很简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 我的处理方式是给用户一个 input 用于粘贴</span></span><br><span class="line">  <span class="comment">// 因此这个判断是用于判断用户的粘贴事件是否是在指定元素上触发的</span></span><br><span class="line">  <span class="comment">// 这个判断并不是必须的</span></span><br><span class="line">  <span class="keyword">if</span> (event.srcElement.id === <span class="string">'up_snapshot_img_paste'</span>) &#123;</span><br><span class="line">    <span class="comment">// 获取粘贴板中的内容</span></span><br><span class="line">    <span class="keyword">const</span> items = event.clipboardData &amp;&amp; event.clipboardData.items</span><br><span class="line">    <span class="keyword">let</span> file = <span class="literal">null</span></span><br><span class="line">    <span class="keyword">if</span> (items &amp;&amp; items.length) &#123;</span><br><span class="line">      <span class="comment">// 检索粘贴板items</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length; i++) &#123;</span><br><span class="line">        <span class="comment">// 获取图片</span></span><br><span class="line">        <span class="keyword">if</span> (items[i].type.indexOf(<span class="string">'image'</span>) !== <span class="number">-1</span>) &#123;</span><br><span class="line">          file = items[i].getAsFile()</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 触发上传</span></span><br><span class="line">    <span class="keyword">if</span> (file) &#123;</span><br><span class="line">      <span class="comment">// 此时file就是剪切板中的图片文件</span></span><br><span class="line">      <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData()</span><br><span class="line">      formData.append(<span class="string">'file'</span>, file)</span><br><span class="line">      formData.append(<span class="string">'token'</span>, <span class="string">'token'</span>)</span><br><span class="line">      formData.append(<span class="string">'key'</span>, <span class="string">'key'</span>)</span><br><span class="line">      <span class="keyword">const</span> $axios = axios.create(&#123; <span class="attr">withCredentials</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">      $axios(&#123;</span><br><span class="line">        url: <span class="string">'url'</span>,</span><br><span class="line">        data: formData,</span><br><span class="line">        method: <span class="string">'POST'</span></span><br><span class="line">      &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 上传成功处理逻辑</span></span><br><span class="line">      &#125;).catch(<span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 上传失败处理逻辑</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 没有获取到图片时的处理逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 绑定监听</span></span><br><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">'paste'</span>, uploadFile)</span><br></pre></td></tr></table></figure><p>以上就是实现的代码了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前&lt;a href=&quot;/2020/03/08/124-qiniu-axios/&quot;&gt;这篇博客&lt;/a&gt;解决了 axios 直传七牛的问题，这篇来讲一下从粘贴板直接上传到七牛云的实现方式。&lt;/p&gt;
&lt;p&gt;首先需要了解的是出于安全问题，js 是没权限主动读取用户粘贴板中的内存的，当
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>axios 直传七牛问题</title>
    <link href="https://github.com/Tit1e/2020/03/08/124-qiniu-axios/"/>
    <id>https://github.com/Tit1e/2020/03/08/124-qiniu-axios/</id>
    <published>2020-03-08T03:33:26.000Z</published>
    <updated>2020-03-08T03:58:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>前几天遇到了这样一个需求：监听粘贴事件，将粘贴板中的文件上传至七牛。</p><p>这个需求的实现过程我会另开一片文章，这篇文章主要用来记录我在使用 axios 直传七牛的过程中遇到的问题。</p><p>我本想这不是很简单：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData()</span><br><span class="line">  formData.append(<span class="string">'file'</span>, file)</span><br><span class="line">  formData.append(<span class="string">'token'</span>, <span class="keyword">this</span>.token)</span><br><span class="line">  formData.append(<span class="string">'key'</span>, <span class="keyword">this</span>.key)</span><br><span class="line">  axios.post(<span class="string">'url'</span>, formData).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// code......</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果返回的却是：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;error: "invalid multipart format: no multipart boundary param in Content-Type"&#125;</span><br></pre></td></tr></table></figure><p>然后我就开始在网上搜，试着改了 <code>Content-Type</code>，但还是没用，最后我在<a href="https://blog.qiatia.cn/2019/05/18/Axios/" target="_blank" rel="noopener">这里</a>找到了与我遇到相同问题的人，于是我用他的方法试了一下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $axios = axios.create(&#123; <span class="attr">withCredentials</span>: <span class="literal">false</span> &#125;)</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData()</span><br><span class="line">  formData.append(<span class="string">'file'</span>, file)</span><br><span class="line">  formData.append(<span class="string">'token'</span>, <span class="keyword">this</span>.token)</span><br><span class="line">  formData.append(<span class="string">'key'</span>, <span class="keyword">this</span>.key)</span><br><span class="line">  $axios(&#123;</span><br><span class="line">    url: <span class="string">'url'</span>,</span><br><span class="line">    data: formData,</span><br><span class="line">    method: <span class="string">'post'</span></span><br><span class="line">  &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// code......</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果果然成功了！</p><p>不过发生了个诡异的事情，在我写这篇文章的时候，我想重新复现一下问题，结果发现我上面直接使用 <code>axios.post</code> 也可以正常上传了，但前几天在试的时候的确是返回错误信息的！所以我现在有点怀疑人生。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前几天遇到了这样一个需求：监听粘贴事件，将粘贴板中的文件上传至七牛。&lt;/p&gt;
&lt;p&gt;这个需求的实现过程我会另开一片文章，这篇文章主要用来记录我在使用 axios 直传七牛的过程中遇到的问题。&lt;/p&gt;
&lt;p&gt;我本想这不是很简单：&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>TypeError: CleanWebpackPlugin is not a constructor</title>
    <link href="https://github.com/Tit1e/2020/02/27/123-webpack4-clean-webpack-plugin/"/>
    <id>https://github.com/Tit1e/2020/02/27/123-webpack4-clean-webpack-plugin/</id>
    <published>2020-02-27T13:23:27.000Z</published>
    <updated>2020-02-27T13:53:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天在用 webpack 4.0 搭服务的时候，使用 clean-webpack-plugin 插件时遇上了一个报错：</p><p><code>TypeError: CleanWebpackPlugin is not a constructor</code></p><p>使用方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> CleanWebpackPlugin = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="comment">// 在 plugins 中</span></span><br><span class="line"><span class="keyword">new</span> CleanWebpackPlugin([<span class="string">'dist'</span>])</span><br></pre></td></tr></table></figure><p>这个插件是用于打包时清空输出目录下上一次的打包文件，dist 是要清空的目标文件夹名称，之前就是这么使用的，现在却不行了，初步猜测应该是版本问题导致的。</p><p>既然报 <code>CleanWebpackPlugin is not a constructor</code> ，那我就打印一下这默认导出的是个什么：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-02-27-134644.png" alt></p><p>从打印中可以看出 <code>CleanWebpackPlugin</code> 是个对象，对象内部还有个 <code>CleanWebpackPlugin</code> 是个 class 类，那解决方法显而易见了：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; CleanWebpackPlugin &#125; = <span class="built_in">require</span>(<span class="string">'clean-webpack-plugin'</span>)</span><br><span class="line"><span class="comment">// 后来在网上了解到在这个插件的 3.0.0 版本中，可以不传路径，默认就是 output 中设置的文件夹</span></span><br><span class="line"><span class="keyword">new</span> CleanWebpackPlugin()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天在用 webpack 4.0 搭服务的时候，使用 clean-webpack-plugin 插件时遇上了一个报错：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;TypeError: CleanWebpackPlugin is not a constructor&lt;/code&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="webpack" scheme="https://github.com/Tit1e/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>js 多文件下载</title>
    <link href="https://github.com/Tit1e/2020/02/24/122-download-files/"/>
    <id>https://github.com/Tit1e/2020/02/24/122-download-files/</id>
    <published>2020-02-24T13:37:48.000Z</published>
    <updated>2020-02-25T01:35:54.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天我接到了这样一个需求，因为同事无法搞定，就丢到我这边来了：前端点击一个按钮后发送一个请求，请求返回来一个数组，数组中是文件的下载地址，需要前端获取到数据后自动下载这些文件。</p><p>我刚接到这个需求的时候，想当然地觉得：这不是很简单嘛，平时也经常用到 js 模拟点击 <code>a</code> 标签进行下载，只是之前都只有一个文件。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-02-25-aclick-1.png" alt></p><p>现在是个数组嘛无非就是再加个循环咯：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-02-25-aforeach.png" alt></p><p>但实际情况却是，这种循环只会下载第一个文件，循环虽然执行了，但是点击事件却没有生效，于是我想是不是需要加个定时器：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-02-25-settimeout.png" alt></p><p>然而结果依旧与之前一样，只会下载第一个文件，哪怕我把时间设置成 5000，第二次下载依旧没有触发。</p><p>最后 Google 了一下，下载方式出了模拟点击 <code>a</code> 标签，还有用 <code>iframe</code> 模拟打开标签页的方式，于是我赶紧试了下：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-02-25-iframe-2.png" alt></p><p>果然没问题了，两个文件都自动进行了下载。</p><p>而且用 <code>iframe</code> 还有一个好处就是用户体验上比使用 <code>a</code> 标签好，因为用模拟点击，在新页面打开的时候难免会闪一下，哪怕这个时间不到一秒，但对用户还是会有影响，而使用 <code>iframe</code> 就不会有这种使用上的割裂感。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天我接到了这样一个需求，因为同事无法搞定，就丢到我这边来了：前端点击一个按钮后发送一个请求，请求返回来一个数组，数组中是文件的下载地址，需要前端获取到数据后自动下载这些文件。&lt;/p&gt;
&lt;p&gt;我刚接到这个需求的时候，想当然地觉得：这不是很简单嘛，平时也经常用到 js 模拟点
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>《数据结构与算法 JavaScript 描述》</title>
    <link href="https://github.com/Tit1e/2020/02/22/121-data-structures-algorithms-with-javascript/"/>
    <id>https://github.com/Tit1e/2020/02/22/121-data-structures-algorithms-with-javascript/</id>
    <published>2020-02-22T13:44:55.000Z</published>
    <updated>2020-02-22T14:45:07.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-02-22-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%20javascript%20%E8%AF%AD%E8%A8%80%E6%8F%8F%E8%BF%B0.jpg" alt></p><p>平时工作中业务代码写得比较多，关于数据结构在工作中几乎涉及不到，之前在同事那看到了这本书，于是借了过来，今天把它给看完了。</p><p>这本书要我评价的话，有收获，但是内容质量不高，甚至是偏低。完全对不起它 49 元的定价，虽然这不是我出的钱。书中的 demo 有不少印刷或者说是语法错误，也有逻辑错误。开始看到错误我还怀疑自己，特地去网上搜索了本书的评价，结果发现果然是代码本身有问题。作为一本技术读物，书中竟然会出现如此明显的错误，而且是代码错误，我觉得这有点夸张了。</p><p>这本“动物书”有点儿掉价。</p><p>书中的例子都比较基础，讲得浅显易懂，入门来说还行，但也仅仅是入门罢了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-02-22-%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>js 模拟鼠标拖拽 mouseup 与 click 事件冲突解决方案</title>
    <link href="https://github.com/Tit1e/2019/12/11/120-drag-and-click/"/>
    <id>https://github.com/Tit1e/2019/12/11/120-drag-and-click/</id>
    <published>2019-12-11T13:48:47.000Z</published>
    <updated>2020-02-22T13:47:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>公司项目中最近有个需要需要拖拽框选日期，也能单击选择，类似桌面选择文件这种，于是我 google + 自己改造终于实现了这个需求，但是在使用过程中有个问题一直存在，就是有时候单击无法选中日期。后来我打印 events 发现无法选择的时候，events 是拖拽时候显示的虚线框，而不是真正想点击的点击的元素。之后我就一直在网上找寻解决方法，无意中发现了一个冷门 CSS 属性：pointer-events: none。MDN对它的定义是：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-12-18-142800.png" alt></p><p>说简单点就是不会触发元素的 <code>onclick</code> 事件了。</p><p>我使用了这个属性后，的确不会再打印出虚线框了，但是问题还是没解决，于是继续排查，最后发现是有的点击只是看起来是点击，其实是触发了拖动事件，而问题就出在拖动结束时的鼠标抬起 <code>mouseup</code> 事件与<code>click</code> 事件一起触发，从而导致出现了新的问题。</p><p>最后的解决方案是定义了一个变量，平时为 <code>false</code>，一但触发了 <code>mousemove</code> 事件，就把它设置为 <code>true</code> ，然后在 <code>mouseup</code> 事件结束时设置一个定时器，延时 200 毫秒，200毫秒后把这个变量设为 <code>false</code> ，因为 <code>mouseup</code> 之后马上会触发 <code>click</code> 事件，这个时间肯定是小于 200 毫秒的，所以在 点击事件的函数中再判断下这个变量是否为 <code>true</code> 就可以了，如果为 <code>true</code> 则直接 <code>return</code> 。</p><p><a href="https://evolly.one/demos/drag-and-click/" target="_blank" rel="noopener">Demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;公司项目中最近有个需要需要拖拽框选日期，也能单击选择，类似桌面选择文件这种，于是我 google + 自己改造终于实现了这个需求，但是在使用过程中有个问题一直存在，就是有时候单击无法选中日期。后来我打印 events 发现无法选择的时候，events 是拖拽时候显示的虚线框
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 报错：Data too long for column</title>
    <link href="https://github.com/Tit1e/2019/07/05/119-mysql-data-too-long-for-column/"/>
    <id>https://github.com/Tit1e/2019/07/05/119-mysql-data-too-long-for-column/</id>
    <published>2019-07-05T07:07:41.000Z</published>
    <updated>2020-02-22T13:47:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子写了一个 <a href="https://github.com/Tit1e/Js-Practice">Js-Practice</a> 项目，由于是纯前端页面，所以所有的题目都是写死在文件中的，导致题目更新后，代码很容易出现冲突，所以我就想着把题目存到数据库去，用 nodejs 写一个服务端，因为正好有一台空闲着的服务器，顺便学习一下 nodejs。</p><p>项目中数据库用的 Mysql，在使用过程中，本地都没什么问题，但是到了线上，就有问题了。在执行某条 sql 的时候，数据库抛出这样一个错误：</p><blockquote><p>Data too long for column ‘XXXX’ at row 1</p></blockquote><p>网上找了一圈发现了解决方法：</p><blockquote><p>首先连接数据库：</p><p>mysql -h 127.0.0.1 -u root -p 123;</p><p>然后执行：</p><p>SET @@global.sql_mode= ‘’;</p><p>最后退出：</p><p>quit</p></blockquote><p>之后就可以正常运行 sql 了。</p><p>这个问题好像是因为 Mysql 使用严格模式导致的，严格模式下，Mysql 会截断过长的插入值，所以导致了报错，上面的命令就是关闭了 Mysql 的严格模式。</p><p><a href="http://huanyouchen.github.io/2018/05/22/mysql-error-1406-Data-too-long-for-column/" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前阵子写了一个 &lt;a href=&quot;https://github.com/Tit1e/Js-Practice&quot;&gt;Js-Practice&lt;/a&gt; 项目，由于是纯前端页面，所以所有的题目都是写死在文件中的，导致题目更新后，代码很容易出现冲突，所以我就想着把题目存到数据库去，用 n
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli3 直接将 markdown 转为 html</title>
    <link href="https://github.com/Tit1e/2019/07/01/118-vue-markdown-loader/"/>
    <id>https://github.com/Tit1e/2019/07/01/118-vue-markdown-loader/</id>
    <published>2019-07-01T13:56:15.000Z</published>
    <updated>2020-02-22T13:47:13.000Z</updated>
    
    <content type="html"><![CDATA[<p>vue-cli3 中直接将 <code>.md</code> 文件转为 html。我用到的是 webpack 的 <a href="https://github.com/QingWei-Li/vue-markdown-loader">vue-markdown-loader</a>，这个 loader 可以直接将 <code>.md</code> 文件转换为 vue 的组件，然后可以直接在页面中使用，非常的方便。</p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm i vue-markdown-loader -D</span><br><span class="line">npm i  vue-loader vue-template-compiler -D</span><br><span class="line"><span class="comment"># 样式</span></span><br><span class="line">npm i github-markdown-css -D</span><br><span class="line">npm i highlight.js -D</span><br></pre></td></tr></table></figure><p>配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// vue.config.js 如果没有就在项目根目录新建</span></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">    config.module.rule(<span class="string">'md'</span>)</span><br><span class="line">      .test(<span class="regexp">/\.md/</span>)</span><br><span class="line">      .use(<span class="string">'vue-loader'</span>)</span><br><span class="line">      .loader(<span class="string">'vue-loader'</span>)</span><br><span class="line">      .end()</span><br><span class="line">      .use(<span class="string">'vue-markdown-loader'</span>)</span><br><span class="line">      .loader(<span class="string">'vue-markdown-loader/lib/markdown-compiler'</span>)</span><br><span class="line">      .options(&#123;</span><br><span class="line">        raw: <span class="literal">true</span></span><br><span class="line">      &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">&lt;!-- class markdown-body 必须加，否则标签样式会出现问题 --&gt;</span><br><span class="line">  &lt;div class=&quot;markdown-body&quot;&gt;</span><br><span class="line">    &lt;markdown /&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">// 引入 markdown 文件，引入后是一个组件，需要在 components 中注册</span><br><span class="line">import markdown from &apos;@/assets/ApiDocument.md&apos;</span><br><span class="line">// 代码高亮</span><br><span class="line">import &apos;highlight.js/styles/github.css&apos;</span><br><span class="line">// 其他元素使用 github 的样式</span><br><span class="line">import &apos;github-markdown-css&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">  components: &#123;</span><br><span class="line">    markdown</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;vue-cli3 中直接将 &lt;code&gt;.md&lt;/code&gt; 文件转为 html。我用到的是 webpack 的 &lt;a href=&quot;https://github.com/QingWei-Li/vue-markdown-loader&quot;&gt;vue-markdown-loader&lt;
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>小程序报错：Page is not constructed because it is not found</title>
    <link href="https://github.com/Tit1e/2019/06/24/117-mini-program-page-is-not-constructed/"/>
    <id>https://github.com/Tit1e/2019/06/24/117-mini-program-page-is-not-constructed/</id>
    <published>2019-06-24T13:07:52.000Z</published>
    <updated>2020-02-22T13:46:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近之前写的小程序进行了修改，目录结构进行了调整，导致程序报了错，找了很久才解决问题。</p><p>控制台报错如下：</p><blockquote><p>Page is not constructed because it is not found</p></blockquote><p>网上搜了很多的答案，但是都没解决我的问题。问题发生的前提是这样的：小程序是我用 mp-vue 开发的，这次底部加了个导航，于是多了个目录，原来的目录命名有点问题，我就把原来的一个目录名字改了，然后把引用的一些资源路径什么的都改完之后，这个问题就存在了。我重启了微信开发者工具，重跑了 mp-vue 的服务器，网上搜了一大圈，都没解决问题。</p><p>最后，解决方法是：把 mp-vue 的服务器停止，然后把输出目录整个删除，在重新启动服务器生成一下目录就好了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近之前写的小程序进行了修改，目录结构进行了调整，导致程序报了错，找了很久才解决问题。&lt;/p&gt;
&lt;p&gt;控制台报错如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Page is not constructed because it is not found&lt;/p&gt;
&lt;/blo
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="小程序" scheme="https://github.com/Tit1e/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
</feed>
