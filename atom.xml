<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I&#39;m Tit1e</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-05-12T07:50:32.130Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tit1e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mac 下为 MAMP (Pro) 安装 redis 扩展</title>
    <link href="http://yoursite.com/2018/05/12/47.mac-mamp-redis/"/>
    <id>http://yoursite.com/2018/05/12/47.mac-mamp-redis/</id>
    <published>2018-05-12T07:04:42.000Z</published>
    <updated>2018-05-12T07:50:32.130Z</updated>
    
    <content type="html"><![CDATA[<p>Mac 用户一般开本地服务器环境的时候用得比较多的就是 <a href="https://www.mamp.info/en/" target="_blank" rel="external">MAMP</a> 这款软件吧，指定目录，一键开启，甚至可以什么都不用配置就可以将服务跑起来。不过前阵子开发的时候，由于公司项目用了 <a href="https://redis.io/" target="_blank" rel="external">redis</a> ，但 MAMP 本身的 php 是不带有 redis 插件的，为了装这个东西，我折腾了好几个小时，所以在这里记录一下。</p>
<h3 id="下载-amp-解压-amp-amp-编译-PHP-源码"><a href="#下载-amp-解压-amp-amp-编译-PHP-源码" class="headerlink" title="下载 &amp; 解压 &amp;&amp; 编译 PHP 源码"></a>下载 &amp; 解压 &amp;&amp; 编译 PHP 源码</h3><p><strong>教程中将以 php 5.5.30 版本作为例子，实际操作中请将版本号做相应替换</strong></p>
<p>为方便下载，我在这放上下载地址，我这里的地址是 5.5.30 的 php 版本，如果需要其他版本，只需将地址中的版本号进行相应替换。<br>下载地址： <a href="http://us3.php.net/get/php-5.5.30.tar.gz/from/a/mirror" target="_blank" rel="external">http://us3.php.net/get/php-5.5.30.tar.gz/from/a/mirror</a></p>
<p>下载完成后，将源码解压至 <code>/applications/MAMP/bin/php/php5.5.30/include/php</code></p>
<p>cd 至源码目录，并执行：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">cd <span class="meta-keyword">/applications/</span>MAMP<span class="meta-keyword">/bin/</span>php/php5<span class="number">.5</span><span class="number">.30</span><span class="meta-keyword">/include/</span>php</div><div class="line"></div><div class="line">./configure</div></pre></td></tr></table></figure></p>
<p>当前目录下继续操作：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/nicolasff/phpredis.git</div><div class="line"></div><div class="line">cd phpredis</div></pre></td></tr></table></figure></p>
<p>接下来就是进行编译，但为了确保期间，建议在执行下列操作前先执行，除非你很确定你已经安装 <code>autoconf</code><br>通过 <a href="https://brew.sh/index_zh-cn" target="_blank" rel="external">Homebrew</a> 安装</p>
<p><code>brew install autoconf</code></p>
<p>下面进行编译<br>注：此时的目录应该为<code>/applications/MAMP/bin/php/php5.5.30/include/php/phpredis</code></p>
<p>执行下列命令：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">/Applications/</span>MAMP<span class="regexp">/bin/</span>php<span class="regexp">/php5.5.30/</span>bin/phpize</div><div class="line"></div><div class="line">.<span class="regexp">/configure --with-php-config=/</span>Applications<span class="regexp">/MAMP/</span>bin<span class="regexp">/php/</span>php5<span class="number">.5</span><span class="number">.30</span><span class="regexp">/bin/</span>php-config</div><div class="line"></div><div class="line">make</div></pre></td></tr></table></figure></p>
<p>所有命令执行完成之后，会在当前目录下生成一个 <code>modules</code> 文件夹，里面有 <code>redis.so</code>，将这个文件复制至 <code>/Applications/MAMP/bin/php/php5.5.30/lib/php/extensions/no-debug-non-zts-XXXXXXXX</code>（最后的文件夹名每个用户有所差别）。</p>
<p>最后，修改 <code>/Applications/MAMP/conf/php5.3.30/php.ini</code>,在文件的 545 行加上 <code>extension=redis.so</code>，保存关闭，重启服务器。</p>
<p>到此，redis 扩展安装完毕。</p>
<h3 id="安装-redis"><a href="#安装-redis" class="headerlink" title="安装 redis"></a>安装 redis</h3><p>安装 redis 就很简单了，一句命令行搞定：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">brew </span><span class="keyword">install </span>redis</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac 用户一般开本地服务器环境的时候用得比较多的就是 &lt;a href=&quot;https://www.mamp.info/en/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MAMP&lt;/a&gt; 这款软件吧，指定目录，一键开启，甚至可以什么都不用配置就可以将服
    
    </summary>
    
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
      <category term="折腾笔记" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mac 创建 .htaccess 文件</title>
    <link href="http://yoursite.com/2018/05/07/46.mac-create-htaccess/"/>
    <id>http://yoursite.com/2018/05/07/46.mac-create-htaccess/</id>
    <published>2018-05-07T12:41:53.000Z</published>
    <updated>2018-05-10T14:50:16.286Z</updated>
    
    <content type="html"><![CDATA[<p>在正常情况下，Mac 不允许用户创建以 <code>.</code> 开头的为文件或文件夹，如果创建，你将得到下图中的提示信息。<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144331.png" alt=""><br><a id="more"></a><br>但是有时候我们又必须要创建，比如用 Apache 的服务器要重写路径，<code>.htaccess</code>文件必不可少。接下来就来说说如何创建以 <code>.</code> 开头的为文件或文件夹：<br>先打开终端，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.finder AppleShowAllFiles -boolean <span class="literal">true</span> ; killall Finder</div></pre></td></tr></table></figure></p>
<p>然后你会发现 Finder 重启了，而且可能目录中多了很多半透明的文件夹，这些都是隐藏文件或文件夹，平时是受系统保护的。现在就可以创建以 <code>.</code> 开头的文件或文件夹了，修改完成后，只要运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">defaults write com.apple.finder AppleShowAllFiles -boolean <span class="literal">false</span> ; killall Finder</div></pre></td></tr></table></figure></p>
<p>就可以恢复原状。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在正常情况下，Mac 不允许用户创建以 &lt;code&gt;.&lt;/code&gt; 开头的为文件或文件夹，如果创建，你将得到下图中的提示信息。&lt;br&gt;&lt;img src=&quot;https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144331.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 打包静态资源路径出错</title>
    <link href="http://yoursite.com/2018/05/03/45.vue-webpack-static/"/>
    <id>http://yoursite.com/2018/05/03/45.vue-webpack-static/</id>
    <published>2018-05-03T11:53:26.000Z</published>
    <updated>2018-05-10T14:50:16.320Z</updated>
    
    <content type="html"><![CDATA[<p>今天同事整理服务器的文件结构，把页面和资源文件移动了位置，由于我之前资源引用用的是绝对路径，所以我把 <code>index.html</code> 和 <code>static</code> 文件夹都放在根目录下，结果现在一移动就出现了问题，绝对路径不能用了，那只好把打包的绝对路径改成相对路径，结果是打包生成的 <code>js</code> 、 <code>css</code> 文件引用正常了，但是图片什么静态资源路径全部出错了，然后 Google 了好久，终于在 <a href="https://blog.csdn.net/a120120yyyy/article/details/78048838" target="_blank" rel="external">这里</a> 找到了解决办法，就是在 <code>build/utils.js</code> 文件中，找到<code>ExtractTextPlugin.extract</code>，加上 <code>publicPath: &#39;../../&#39;</code> 就能使静态资源正确引用。<br><a id="more"></a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天同事整理服务器的文件结构，把页面和资源文件移动了位置，由于我之前资源引用用的是绝对路径，所以我把 &lt;code&gt;index.html&lt;/code&gt; 和 &lt;code&gt;static&lt;/code&gt; 文件夹都放在根目录下，结果现在一移动就出现了问题，绝对路径不能用了，那只好把打包的绝对路径改成相对路径，结果是打包生成的 &lt;code&gt;js&lt;/code&gt; 、 &lt;code&gt;css&lt;/code&gt; 文件引用正常了，但是图片什么静态资源路径全部出错了，然后 Google 了好久，终于在 &lt;a href=&quot;https://blog.csdn.net/a120120yyyy/article/details/78048838&quot;&gt;这里&lt;/a&gt; 找到了解决办法，就是在 &lt;code&gt;build/utils.js&lt;/code&gt; 文件中，找到&lt;code&gt;ExtractTextPlugin.extract&lt;/code&gt;，加上 &lt;code&gt;publicPath: &amp;#39;../../&amp;#39;&lt;/code&gt; 就能使静态资源正确引用。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vue-cli" scheme="http://yoursite.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 localStorage 和 sessionStorage</title>
    <link href="http://yoursite.com/2018/04/26/44.sessionStorage-localStorage/"/>
    <id>http://yoursite.com/2018/04/26/44.sessionStorage-localStorage/</id>
    <published>2018-04-26T12:52:47.000Z</published>
    <updated>2018-05-10T14:50:16.309Z</updated>
    
    <content type="html"><![CDATA[<p>说到前端的本地存储，一般人都会想到 localStorage、sessionStorage 和 Cookie。但这里我暂且不谈 cookie，来说说这两个长得比较像的。<br><a id="more"></a><br><code>localStorage</code> 是 HTML5 的新特性，用于数据的存储，但是不同于 <code>sessionStorage</code>，它的存储期限可以是无期限，只要用户不手动去清除它。而 <code>sessionStorage</code> 则在页面被关闭时就会被清除。它们可以存储的大小都为 5M。而 <code>Cookie</code> 则如它的名字，存储空间也只有小小的 4kb。</p>
<p>我们先来看下 <code>localStroage</code> 是个什么东西，在 chrome 的控制台直接打印，我门可以看到这些东西：</p>
<p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144749.png" alt=""></p>
<p>我们可以直观地看到 <code>localStroage</code> 是一个对象，并且在有一个 length 属性，先猜测它是用来表示键值对数量的，并且我们可以看到 <code>localStroage</code> 的一些 API ：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 最常用的为上面三个</span></div><div class="line">localStorage.setItem() <span class="comment">//设置 localStorage</span></div><div class="line">localStorage.getItem() <span class="comment">//读取 localStorage</span></div><div class="line">localStorage.removeItem() <span class="comment">//移除 localStorage</span></div><div class="line"></div><div class="line">localStorage.clear() <span class="comment">//清空 localStorage</span></div><div class="line">localStorage.key() <span class="comment">//获取某个位置的键名</span></div></pre></td></tr></table></figure></p>
<p>不过需要注意的是，<code>localStorage</code> 不能直接存储对象，需要先将对象转成 json 才能存储。否则你将看到这样的结果：</p>
<p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144803.png" alt=""></p>
<p>接下来我们来实际操作一下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>设置<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">    键：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"key"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">    值：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"setValue()"</span>&gt;</span>写入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>读取<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">    键：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"getKey"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"getValue()"</span>&gt;</span>读取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></div><div class="line">    读取内容：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>清除<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></div><div class="line">    键：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"removeKey"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"removeValue()"</span>&gt;</span>清除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">setValue</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> key = <span class="built_in">document</span>.getElementById(<span class="string">'key'</span>).value</div><div class="line">  <span class="keyword">var</span> value = <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>).value</div><div class="line">  localStorage.setItem(key,value)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 获取</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> getKey = <span class="built_in">document</span>.getElementById(<span class="string">'getKey'</span>).value</div><div class="line">  <span class="keyword">var</span> value = localStorage.getItem(getKey)</div><div class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'value'</span>).innerText = value</div><div class="line">&#125;</div><div class="line"><span class="comment">// 移除</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeValue</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  <span class="keyword">var</span> removeKey = <span class="built_in">document</span>.getElementById(<span class="string">'removeKey'</span>).value</div><div class="line">  localStorage.removeItem(removeKey)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面的代码渲染出来的界面应该这这样的：</p>
<p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144820.png" alt=""></p>
<p>然后，在对应输入框中输入内容就可以进行操作了。<br>至于存储的内容，我们可以在控制台的 Application 中看到：</p>
<p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144835.png" alt=""></p>
<p>值得注意的是，如果键名相同，之前的键值会被覆盖。并且，因为这些存储的内容可以在控制台被浏览和修改，所以这里并不推荐用来存一些比较私密的信息，避免信息的泄露。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说到前端的本地存储，一般人都会想到 localStorage、sessionStorage 和 Cookie。但这里我暂且不谈 cookie，来说说这两个长得比较像的。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>你好呀，2018</title>
    <link href="http://yoursite.com/2017/12/31/43.hello-2018/"/>
    <id>http://yoursite.com/2017/12/31/43.hello-2018/</id>
    <published>2017-12-31T15:18:51.000Z</published>
    <updated>2018-05-10T14:50:16.304Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2017-回顾"><a href="#2017-回顾" class="headerlink" title="2017 回顾"></a>2017 回顾</h3><p>回顾了一下 <a href="https://tit1e.xyz/2017/01/28/hello-2017/" target="_blank" rel="external">2017 年的计划</a>，其实太多没有完成的，比如后端的 ThinkPHP 框架，可以说是毫无长进，不过精力倒是全放在前端上了。身体方面，开始去健身房了，不过是从 10 月份才刚开始的锻炼，到现在的话，体重略有上升，可能两三斤吧，练的部位肉的确是结实了不少。爱好方面我就不谈了，今年过的狗一样，快过年了情况才有所好转。哪来的闲钱买这个！积蓄没有，MacBook 的钱是换完了（爸妈帮我还的……）。</p>
<p>今年对我来说还是发生了挺多变化的一年。去年这个时候，我刚步入前端，入职 2 个月而已，然后到年后2月份的辞职，三月份的再入职，无论是哪方面，去年的这个时候和今年的这个时候都有了挺大的变化。</p>
<p>希望在迎接 2019 年的时候，我还是能像现在这样开心。<br><a id="more"></a></p>
<h3 id="2018-计划"><a href="#2018-计划" class="headerlink" title="2018 计划"></a>2018 计划</h3><ol>
<li>前端技能上能有大的提升（如何衡量大呢？我也不知道）</li>
<li>增重到130斤（是增肌，不是增脂！）</li>
<li>一定要买个 switch（塞尔达天下第一！）</li>
<li>薪水上涨 30%</li>
<li>攒钱</li>
<li>希望认识更多的人？（这个太难了）</li>
</ol>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2017-回顾&quot;&gt;&lt;a href=&quot;#2017-回顾&quot; class=&quot;headerlink&quot; title=&quot;2017 回顾&quot;&gt;&lt;/a&gt;2017 回顾&lt;/h3&gt;&lt;p&gt;回顾了一下 &lt;a href=&quot;https://tit1e.xyz/2017/01/28/hello-2017/&quot;&gt;2017 年的计划&lt;/a&gt;，其实太多没有完成的，比如后端的 ThinkPHP 框架，可以说是毫无长进，不过精力倒是全放在前端上了。身体方面，开始去健身房了，不过是从 10 月份才刚开始的锻炼，到现在的话，体重略有上升，可能两三斤吧，练的部位肉的确是结实了不少。爱好方面我就不谈了，今年过的狗一样，快过年了情况才有所好转。哪来的闲钱买这个！积蓄没有，MacBook 的钱是换完了（爸妈帮我还的……）。&lt;/p&gt;
&lt;p&gt;今年对我来说还是发生了挺多变化的一年。去年这个时候，我刚步入前端，入职 2 个月而已，然后到年后2月份的辞职，三月份的再入职，无论是哪方面，去年的这个时候和今年的这个时候都有了挺大的变化。&lt;/p&gt;
&lt;p&gt;希望在迎接 2019 年的时候，我还是能像现在这样开心。&lt;br&gt;
    
    </summary>
    
    
      <category term="新年计划" scheme="http://yoursite.com/tags/%E6%96%B0%E5%B9%B4%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>vuex的简单使用教程</title>
    <link href="http://yoursite.com/2017/12/26/42.vuex-use/"/>
    <id>http://yoursite.com/2017/12/26/42.vuex-use/</id>
    <published>2017-12-26T13:11:39.000Z</published>
    <updated>2018-05-10T14:50:16.306Z</updated>
    
    <content type="html"><![CDATA[<p>公司数据平台现在的规模已经有点大了，考虑到以后，可能会出现数据共享的问题，所以我先粗略了解一下<code>vuex</code>以备不时之需。<br>首先安装<code>vuex</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#生产环境中也需要使用</span></div><div class="line">npm install vuex --save</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><code>src</code>目录下新建<code>vuex</code>目录</p>
<p>vuex文件夹下新建<code>store.js</code><br>先在<code>store.js</code>中写入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></div><div class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line">Vue.use(Vuex)</div><div class="line"><span class="comment">//state用于存储数据</span></div><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line">  <span class="attr">count</span>: <span class="number">10</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//mutations用于声明方法</span></div><div class="line"><span class="keyword">const</span> mutations = &#123;</div><div class="line">  add(state,n) &#123;</div><div class="line">    state.count += n</div><div class="line">  &#125;,</div><div class="line">  reduce(state,n) &#123;</div><div class="line">    state.count -= n</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//getters用于监听，比如数据变化时执行某个函数</span></div><div class="line"><span class="keyword">const</span> getters = &#123;</div><div class="line">    <span class="comment">//count变化时就会执行</span></div><div class="line">    count: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</div><div class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(state.count)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//actions类似于mutations，但actions可以异步执行</span></div><div class="line"><span class="keyword">const</span> actions = &#123;</div><div class="line">  addAction(&#123; commit &#125;) &#123;</div><div class="line">    commit(<span class="string">'add'</span>,<span class="number">1</span>)</div><div class="line">  &#125;,</div><div class="line">  reduceAction(&#123; commit &#125;) &#123;</div><div class="line">    commit(<span class="string">'reduce'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//暴露这些对象</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</div><div class="line">  state,</div><div class="line">  mutations,</div><div class="line">  getters,</div><div class="line">  actions</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>组件中使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">tempate</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">        &#123;&#123; count &#125;&#125;</div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add(10)"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"reduce(10)"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//引入</span></div><div class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../vuex/store'</span></div><div class="line"><span class="comment">//使用这种方式引入后，可以像平时一样使用store从的值与方法，其实还有另外两种调用方法，但我个人喜欢这种，这也是最简单的写法，所以另外两种我就不赘述了。</span></div><div class="line"><span class="keyword">import</span> &#123; mapState,mapMutations,mapGetters,mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</div><div class="line">    store,</div><div class="line">    <span class="attr">computed</span>: &#123;</div><div class="line">        ...mapState([<span class="string">'count'</span>]),</div><div class="line">        ...mapGetters([<span class="string">'count'</span>])</div><div class="line">      &#125;,</div><div class="line">      <span class="attr">methods</span>:&#123;</div><div class="line">        ...mapMutations([<span class="string">'add'</span>,<span class="string">'reduce'</span>]),</div><div class="line">        ...mapActions([<span class="string">'addAction'</span>,<span class="string">'reduceAction'</span>])</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司数据平台现在的规模已经有点大了，考虑到以后，可能会出现数据共享的问题，所以我先粗略了解一下&lt;code&gt;vuex&lt;/code&gt;以备不时之需。&lt;br&gt;首先安装&lt;code&gt;vuex&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#生产环境中也需要使用&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install vuex --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vuex" scheme="http://yoursite.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>局域网请求 webpack 反向代理</title>
    <link href="http://yoursite.com/2017/12/21/41.webpack-dev-server/"/>
    <id>http://yoursite.com/2017/12/21/41.webpack-dev-server/</id>
    <published>2017-12-21T12:15:47.000Z</published>
    <updated>2018-05-10T14:50:16.289Z</updated>
    
    <content type="html"><![CDATA[<p>今天继续在公司思考关于前后端分离的问题，困扰我最大的问题其实就是我用 vue-cli 在本地开发的时候，怎么和后端进行接口的调试，总不可能每次都打包一下放到服务器上看运行正不正常，有没有报错吧？我知道有个反向代理的东西，可是知道它的大致作用，但是我没用过导致我无从下手，但前段时间折腾模拟数据的时候，有用到用<code>json-server</code>和<code>faker.js</code>本地开服务器，批量生成模拟数据，然后通过反向代理去请求本地另一个服务器的数据。于是我想，既然这样我可以请求到数据，那么局域网的话我也可以直接通过 ip 直接访问局域网内的服务器，那么我应该也可以通过代理去请求局域网上内其他同事开的本地服务器中的接口，于是就开始折腾了。<br><a id="more"></a><br>由于之前去请求模拟数据的时候，代理配置是写在<code>/config/index.js</code>中的，于是我依样画葫芦，把之前的配置的地址，路径全改了，但结果却发现请求一只 404 ，这就让我很难受了，于是我去 Google 了一圈，原来这个代理是用的<code>webpack-dev-server</code>，于是我找到了<code>/build/webpack.dev.conf.js</code>,按照网上说的，在<code>devServer</code>中添加了一个<code>proxy</code>属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">proxy: &#123;</div><div class="line">  <span class="string">'/Home'</span>: &#123;</div><div class="line">    <span class="attr">target</span>: <span class="string">'http://192.168.1.1/'</span>,</div><div class="line">    <span class="attr">secure</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样，我就成功通过代理请求到了同事服务器上的数据。</p>
<p>突然想起来了，利用<code>json-server</code>和<code>faker.js</code>模拟数据的过程还没记录，下篇文章记录一下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天继续在公司思考关于前后端分离的问题，困扰我最大的问题其实就是我用 vue-cli 在本地开发的时候，怎么和后端进行接口的调试，总不可能每次都打包一下放到服务器上看运行正不正常，有没有报错吧？我知道有个反向代理的东西，可是知道它的大致作用，但是我没用过导致我无从下手，但前段时间折腾模拟数据的时候，有用到用&lt;code&gt;json-server&lt;/code&gt;和&lt;code&gt;faker.js&lt;/code&gt;本地开服务器，批量生成模拟数据，然后通过反向代理去请求本地另一个服务器的数据。于是我想，既然这样我可以请求到数据，那么局域网的话我也可以直接通过 ip 直接访问局域网内的服务器，那么我应该也可以通过代理去请求局域网上内其他同事开的本地服务器中的接口，于是就开始折腾了。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>element-theme 配合 vue-cli 进行二次开发</title>
    <link href="http://yoursite.com/2017/12/20/40.element-theme-develop-twice/"/>
    <id>http://yoursite.com/2017/12/20/40.element-theme-develop-twice/</id>
    <published>2017-12-20T07:38:03.000Z</published>
    <updated>2018-05-10T14:50:16.308Z</updated>
    
    <content type="html"><![CDATA[<p>公司新平台我打算使用<code>element-ui</code>和<code>vue-cli</code>来开发，既然用的是现成的ui，那么就涉及到ui的定制问题，虽然是一个后台项目，并且让设计参照<code>element-ui</code>的文档去作图，但是设计不可能照搬默认主题，不在组件功能上修改，但在主题配色上肯定会进行调整。虽然官方有 <a href="https://elementui.github.io/theme-chalk-preview/#/zh-CN" target="_blank" rel="external">在线主题生成工具</a> ，但这个工具只能修改一个整体的主题色，连按钮的颜色都无法定制，更不用说定制圆角阴影这些效果了，所以还是要自己改文件编译才能实现最大化定制。折腾过程中遇到了点问题，在此记录一下。</p>
<p>官方也提供了定制的 <a href="https://github.com/ElementUI/element-theme" target="_blank" rel="external">文档</a> ，那当然是相信官方，照着官方的教程来！<br><a id="more"></a></p>
<h4 id="安装element-theme"><a href="#安装element-theme" class="headerlink" title="安装element-theme"></a>安装<code>element-theme</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#只在当前项目安装</span></div><div class="line">npm i element-theme -D</div><div class="line"></div><div class="line"><span class="comment">#全局安装</span></div><div class="line">sudo npm i element-theme -g</div></pre></td></tr></table></figure>
<p>然而我第一步就报错了……ORZ。</p>
<p>我使用的是<code>npm</code>命令，但源用的是淘宝的源。但安装的时候报错：<code>not found python2</code>。于是我去找安装<code>python2</code>的方法，结果发现 Mac 是默认集成了<code>python</code>的，那我就郁闷了，试了半天，一直报错，最后突发奇想想用<code>cnpm</code>试试，结果竟然成功了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#终于装上了</span></div><div class="line">sudo cnpm i element-theme -g</div></pre></td></tr></table></figure></p>
<p>好，继续。</p>
<h4 id="安装-theme-chalk"><a href="#安装-theme-chalk" class="headerlink" title="安装 theme-chalk"></a>安装 <code>theme-chalk</code></h4><p>因为我一开始构思的定制流程是在其他目录下把样式写好编译后到现有项目中替换，所以我就建了一个空文件夹，然后执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i element-theme-chalk -D</div></pre></td></tr></table></figure></p>
<p>结果当然是提醒我找不到<code>package.json</code>文件。后来我望着命令中的<code>-D</code>若有所思……，终于反应过来了，这是装在项目中的。</p>
<p>好，顺利安装，继续。</p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#初始化</span></div><div class="line">et -i</div></pre></td></tr></table></figure>
<p>执行完后会在根目录下生成一个<code>element-variables.scss</code>的文件。然后你就可以在这个文件中修改主题色，按钮颜色，圆角，阴影等这些样式，修改好了之后，就可以编译了。</p>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 监听并编译</span></div><div class="line">et --watch [--config variable file path] [--out theme path]</div><div class="line"></div><div class="line"><span class="comment"># 编译</span></div><div class="line">et [--config variable file path] [--out theme path] [--minimize]</div></pre></td></tr></table></figure>
<p><code>et --watch</code>可以监听<code>element-variables.scss</code>文件。如果文件被修改了，那么就会自动进行编译。</p>
<p><code>et --config 文件路径/element-variables.scss</code>这个命令是可以指定<code>element-variables.scss</code>的路径，因为这个文件不一定放在项目根目录下。</p>
<p><code>et --out 目录</code>这个命令是指定编译后的文件输出目录，默认是输出在根目录下的<code>theme</code>文件夹中。</p>
<p>但这就会产生一个文件替换问题，每次编译后都需要手动替换文件，之后才能看效果。所以我直接把输出路径改成了项目引用的<code>element-ui</code>的路径：<code>node_modules/element-ui/lib/theme-chalk/</code>，这样配合<code>-w</code>就可以实现实时编译，再配合<code>npm run dev</code>就可以实时编译实时预览了。</p>
<p>如果还需要更深度的定制，则修改 <code>node_modules/element-theme-chalk/src/</code> 目录下的的<code>.scss</code>文件，然后执行编译后就能生效。注意直接修改<code>.scss</code>文件不会触发自动编译。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司新平台我打算使用&lt;code&gt;element-ui&lt;/code&gt;和&lt;code&gt;vue-cli&lt;/code&gt;来开发，既然用的是现成的ui，那么就涉及到ui的定制问题，虽然是一个后台项目，并且让设计参照&lt;code&gt;element-ui&lt;/code&gt;的文档去作图，但是设计不可能照搬默认主题，不在组件功能上修改，但在主题配色上肯定会进行调整。虽然官方有 &lt;a href=&quot;https://elementui.github.io/theme-chalk-preview/#/zh-CN&quot;&gt;在线主题生成工具&lt;/a&gt; ，但这个工具只能修改一个整体的主题色，连按钮的颜色都无法定制，更不用说定制圆角阴影这些效果了，所以还是要自己改文件编译才能实现最大化定制。折腾过程中遇到了点问题，在此记录一下。&lt;/p&gt;
&lt;p&gt;官方也提供了定制的 &lt;a href=&quot;https://github.com/ElementUI/element-theme&quot;&gt;文档&lt;/a&gt; ，那当然是相信官方，照着官方的教程来！&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="element-ui" scheme="http://yoursite.com/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>css 实现圆角平行四边形</title>
    <link href="http://yoursite.com/2017/12/17/39.radio-rhomboid/"/>
    <id>http://yoursite.com/2017/12/17/39.radio-rhomboid/</id>
    <published>2017-12-17T13:31:07.000Z</published>
    <updated>2018-05-10T14:50:16.303Z</updated>
    
    <content type="html"><![CDATA[<p>公司管理平台首页改版中有个圆角平行四边形的标签页。由于以前没接触到过这个，没什么经验，所以我只好求助万能的 google ，但是我用关键字“css 圆角平行四边形”并没有搜出答案来，于是我退而求其次，那就搜“css 平行四边形”，这个我有把握 100% 能用 强大的css 实现，果然一搜就出现了：<a href="https://www.w3cplus.com/css3/css-secrets/parallelograms.html" target="_blank" rel="external">CSS秘密花园：平行四边形</a>。<br><a id="more"></a><br>实现代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.button</span>&#123;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">skewX</span>(-30deg);</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, #7BBBB2, #46AEAA); </div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">20px</span>;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">5px</span> <span class="number">10px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.button</span> &gt; <span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">skewX</span>(30deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    首页</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    采集管理</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    数据管理</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>简单来说就是利用css的<code>transform: skewX(deg)</code>属性来实现元素的扭曲，但是元素扭曲的同时，会使元素内的内容也随之扭曲，所以就需要用另一个元素把不想扭曲的元素包裹起来，然后对外层使用扭曲，内层元素再使用反向扭曲来抵消，一次来实现效果。然后我又给外层元素添加了<code>border-radios</code>，于是圆角平行四边形就诞生啦！</p>
<p>效果图：<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144722.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司管理平台首页改版中有个圆角平行四边形的标签页。由于以前没接触到过这个，没什么经验，所以我只好求助万能的 google ，但是我用关键字“css 圆角平行四边形”并没有搜出答案来，于是我退而求其次，那就搜“css 平行四边形”，这个我有把握 100% 能用 强大的css 实现，果然一搜就出现了：&lt;a href=&quot;https://www.w3cplus.com/css3/css-secrets/parallelograms.html&quot;&gt;CSS秘密花园：平行四边形&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>v-charts 实现柱状图渐变效果</title>
    <link href="http://yoursite.com/2017/12/17/38.v-charts-bar/"/>
    <id>http://yoursite.com/2017/12/17/38.v-charts-bar/</id>
    <published>2017-12-17T13:03:48.000Z</published>
    <updated>2018-05-10T14:50:16.318Z</updated>
    
    <content type="html"><![CDATA[<p>其实在考虑使用<code>echarts</code>之前我还考虑过使用饿了么的<code>v-charts</code>，但后来考虑到实际情况，还是使用了没有经过二次封装的<code>echarts</code>。虽然没有最终没有使用<code>v-charts</code>，但还是记录一下。</p>
<p><code>v-charts</code>的使用方法<a href="https://elemefe.github.io/v-charts/#/" target="_blank" rel="external"> 官方文档 </a>讲得已经比较详细了，但我的需求有个柱状图使用渐变色的需求，这里没有详细讲，但其实运行报错已经说得很清楚了。<br>首先安装<code>v-charts</code><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="selector-tag">i</span> v-charts -S</div></pre></td></tr></table></figure></p>
<p>在<code>main.js</code>引入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> VCharts <span class="keyword">from</span> <span class="string">'v-charts'</span></div><div class="line">Vue.use(VCharts)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>如果这时候你去组件里写入以下代码并运行：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ve-histogram</span> <span class="attr">:data</span>=<span class="string">"chartData"</span> <span class="attr">:settings</span>=<span class="string">"chartSettings"</span>&gt;</span><span class="tag">&lt;/<span class="name">ve-histogram</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">created</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.chartData = &#123;</div><div class="line">      <span class="attr">columns</span>: [<span class="string">"日期"</span>, <span class="string">"成本"</span>, <span class="string">"利润"</span>, <span class="string">"占比"</span>, <span class="string">"其他"</span>],</div><div class="line">      <span class="attr">rows</span>: [</div><div class="line">        &#123; 日期: <span class="string">"1月1日"</span>, 成本: <span class="number">1523</span>, 利润: <span class="number">1523</span>, 占比: <span class="number">0.12</span>, 其他: <span class="number">100</span> &#125;,</div><div class="line">        &#123; 日期: <span class="string">"1月2日"</span>, 成本: <span class="number">1223</span>, 利润: <span class="number">1921</span>, 占比: <span class="number">0.345</span>, 其他: <span class="number">100</span> &#125;,</div><div class="line">        &#123; 日期: <span class="string">"1月3日"</span>, 成本: <span class="number">2123</span>, 利润: <span class="number">5523</span>, 占比: <span class="number">0.7</span>, 其他: <span class="number">100</span> &#125;,</div><div class="line">        &#123; 日期: <span class="string">"1月4日"</span>, 成本: <span class="number">4123</span>, 利润: <span class="number">6523</span>, 占比: <span class="number">0.31</span>, 其他: <span class="number">100</span> &#125;</div><div class="line">      ]</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.chartSettings = &#123;</div><div class="line">      <span class="attr">metrics</span>: [<span class="string">"成本"</span>],</div><div class="line">      <span class="attr">itemStyle</span>: &#123;</div><div class="line">        <span class="attr">normal</span>: &#123;</div><div class="line">          <span class="attr">color</span>: <span class="keyword">new</span> echarts.graphic.LinearGradient(</div><div class="line">            <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</div><div class="line">            [</div><div class="line">              &#123;<span class="attr">offset</span>: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">'#83bff6'</span>&#125;,</div><div class="line">              &#123;<span class="attr">offset</span>: <span class="number">0.5</span>, <span class="attr">color</span>: <span class="string">'#188df0'</span>&#125;,</div><div class="line">              &#123;<span class="attr">offset</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">'#188df0'</span>&#125;</div><div class="line">            ]</div><div class="line">          )</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>控制台会报错：”<strong>echarts is not defined</strong>“。所以解决方法很明显，只要引入<code>echarts</code>就行了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts/lib/echarts'</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实在考虑使用&lt;code&gt;echarts&lt;/code&gt;之前我还考虑过使用饿了么的&lt;code&gt;v-charts&lt;/code&gt;，但后来考虑到实际情况，还是使用了没有经过二次封装的&lt;code&gt;echarts&lt;/code&gt;。虽然没有最终没有使用&lt;code&gt;v-charts&lt;/code&gt;，但还是记录一下。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v-charts&lt;/code&gt;的使用方法&lt;a href=&quot;https://elemefe.github.io/v-charts/#/&quot;&gt; 官方文档 &lt;/a&gt;讲得已经比较详细了，但我的需求有个柱状图使用渐变色的需求，这里没有详细讲，但其实运行报错已经说得很清楚了。&lt;br&gt;首先安装&lt;code&gt;v-charts&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;selector-tag&quot;&gt;i&lt;/span&gt; v-charts -S&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;main.js&lt;/code&gt;引入&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; VCharts &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;v-charts&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.use(VCharts)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 使用 ECharts 水球图</title>
    <link href="http://yoursite.com/2017/12/17/37.vue-cli-use-echarts-liquidfill/"/>
    <id>http://yoursite.com/2017/12/17/37.vue-cli-use-echarts-liquidfill/</id>
    <published>2017-12-17T12:14:50.000Z</published>
    <updated>2018-05-10T14:50:16.305Z</updated>
    
    <content type="html"><![CDATA[<p>公司有个平台有改版的打算，UI 出了首页的设计稿，我看了下，大致构思了一下，打算用 vue 和 Element-UI 来写。前阵子刚忙完，这几天比较空，我就看着 UI 稿在想实现方式，其中一个是水球图。这篇先记录一下 vue-cli 中生成水球图的方法。<br><a id="more"></a><br>首先<code>npm</code>包下载必不可少：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//安装 ECharts</span></div><div class="line">npm install echarts</div><div class="line"><span class="comment">//安装 水球图插件</span></div><div class="line">npm install echarts-liquidfill</div></pre></td></tr></table></figure></p>
<p>随后在<code>.vue</code>文件中引入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">"echarts"</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">"echarts-liquidfill/src/liquidFill.js"</span>;</div></pre></td></tr></table></figure></p>
<p>之后就该怎么用就怎么用。可以参考 <a href="http://gallery.echartsjs.com/editor.html?c=liquidfill-basic" target="_blank" rel="external">官方例子</a> ，也可以参考 echarts-liquidfill 的 <a href="https://github.com/ecomfe/echarts-liquidfill" target="_blank" rel="external">github</a> 文档。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司有个平台有改版的打算，UI 出了首页的设计稿，我看了下，大致构思了一下，打算用 vue 和 Element-UI 来写。前阵子刚忙完，这几天比较空，我就看着 UI 稿在想实现方式，其中一个是水球图。这篇先记录一下 vue-cli 中生成水球图的方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 引入全局 scss 文件</title>
    <link href="http://yoursite.com/2017/12/14/36.vue-import-sass-global/"/>
    <id>http://yoursite.com/2017/12/14/36.vue-import-sass-global/</id>
    <published>2017-12-14T14:11:52.000Z</published>
    <updated>2018-05-10T14:50:16.315Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>我们平时在使用 vue-cli 开发项目的时候，写 css 会用到预处理器来提高 css 的编写效率。我们在使用 sass 的时候一般会先在一个全局的<code>.scss</code>文件中定义好一些颜色变量或其他变量，然后在需要用的这些变量的组件内把这个文件通过<code>@import</code>的方式引入，然后就可以使用文件中定义的变量了。但是这也出现一个问题，因为这个文件中定义的都是比较通用的变量，所以几乎每个<code>.vue</code>文件几乎都会将它引入，当组件多了之后，没次要引入这个文件就显得累赘，而且如果这个文件换了路径，那维护起来就比较麻烦，还容易出错。所以最好就是一个地方配置后，全局都可以直接使用，这样是最高效，也是最容易维护的。于是我在网上找了一圈，试了网上的 N 多方法，终于在 <a href="https://segmentfault.com/q/1010000008731809" target="_blank" rel="external">这里</a> 找到了我能用的方法，而且配置简单。<br><a id="more"></a></p>
<h4 id="使用sass，这两个包是前提"><a href="#使用sass，这两个包是前提" class="headerlink" title="使用sass，这两个包是前提:"></a>使用<code>sass</code>，这两个包是前提:</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install <span class="keyword">node</span><span class="title">-sass</span> --save-dev</div><div class="line">npm install sass-loader --save-dev</div></pre></td></tr></table></figure>
<h4 id="要全局引用-scss还需要安装sass-resources-loader"><a href="#要全局引用-scss还需要安装sass-resources-loader" class="headerlink" title="要全局引用.scss还需要安装sass-resources-loader"></a>要全局引用<code>.scss</code>还需要安装<code>sass-resources-loader</code></h4><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install sass-resources-loader --<span class="built_in">save</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure>
<h4 id="修改-build-utils-js，在return中新增如下代码"><a href="#修改-build-utils-js，在return中新增如下代码" class="headerlink" title="修改/build/utils.js，在return中新增如下代码"></a>修改<code>/build/utils.js</code>，在<code>return</code>中新增如下代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">scss: generateLoaders(<span class="string">'sass'</span>).concat(</div><div class="line">  &#123;</div><div class="line">    <span class="attr">loader</span>: <span class="string">'sass-resources-loader'</span>,</div><div class="line">    <span class="attr">options</span>: &#123;</div><div class="line">      <span class="comment">//你要引入的 .scss 文件的路径</span></div><div class="line">      resources: path.resolve(__dirname, <span class="string">'../src/assets/your.scss'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>完成以上步骤后，你就可以在<code>&lt;style lang=&quot;scss&quot;&gt;</code>标签中直接使用先前定义好的变量了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;我们平时在使用 vue-cli 开发项目的时候，写 css 会用到预处理器来提高 css 的编写效率。我们在使用 sass 的时候一般会先在一个全局的&lt;code&gt;.scss&lt;/code&gt;文件中定义好一些颜色变量或其他变量，然后在需要用的这些变量的组件内把这个文件通过&lt;code&gt;@import&lt;/code&gt;的方式引入，然后就可以使用文件中定义的变量了。但是这也出现一个问题，因为这个文件中定义的都是比较通用的变量，所以几乎每个&lt;code&gt;.vue&lt;/code&gt;文件几乎都会将它引入，当组件多了之后，没次要引入这个文件就显得累赘，而且如果这个文件换了路径，那维护起来就比较麻烦，还容易出错。所以最好就是一个地方配置后，全局都可以直接使用，这样是最高效，也是最容易维护的。于是我在网上找了一圈，试了网上的 N 多方法，终于在 &lt;a href=&quot;https://segmentfault.com/q/1010000008731809&quot;&gt;这里&lt;/a&gt; 找到了我能用的方法，而且配置简单。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 使用记录以及使用过程中遇到的问题总结</title>
    <link href="http://yoursite.com/2017/10/19/35.low-net-problems/"/>
    <id>http://yoursite.com/2017/10/19/35.low-net-problems/</id>
    <published>2017-10-19T11:19:51.000Z</published>
    <updated>2018-05-10T14:50:16.299Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间抽空重写了陋网,还没开发完成, 还有很多细节需要完善. 所以这篇博客随着开发还会更新.<br><a id="more"></a></p>
<h3 id="配置记录"><a href="#配置记录" class="headerlink" title="配置记录"></a>配置记录</h3><h4 id="注-下面的文件都是以实际项目中的-program-目录为根目录来写路径的"><a href="#注-下面的文件都是以实际项目中的-program-目录为根目录来写路径的" class="headerlink" title="注: 下面的文件都是以实际项目中的 program 目录为根目录来写路径的"></a>注: 下面的文件都是以实际项目中的 <code>program</code> 目录为根目录来写路径的</h4><h4 id="package-json"><a href="#package-json" class="headerlink" title="/package.json"></a><code>/package.json</code></h4><p>用过 <code>node.js</code> 的基本都知道, 主要用来管理包依赖,当然里面还会有些项目作者, 项目描述等配置,不过这都不是主要的.<br>说到依赖, 在 <code>/package.json</code> 中有两种依赖,分别是 <code>dependencies</code> 和 <code>devDependencies</code>, 从字面上大致可以看出两者的区别在于一个是生产环境用到的依赖, 一个是开发环境用到的依赖, 比如 <code>axios</code> 要在线上用于 <code>http</code> 请求, 所以这个依赖肯定得配置在 <code>dependencies</code> 下, 在安装的时候只要在命令后面加上 <code>--save</code> 就能自动写进 <code>dependencies</code>. 而像 <code>eslint</code> 这种依赖是在开发阶段用于代码检查的, 生产环境中不需要的,那么就配置在 <code>devDependencies</code> 下, 安装的时候在命令后面加上 <code>--save-dev</code>就自动写进 <code>devDependencies</code> 中.</p>
<h4 id="config-index-js"><a href="#config-index-js" class="headerlink" title="/config/index.js"></a><code>/config/index.js</code></h4><p>可配置 <code>index.html</code> 和 <code>static</code> 文件夹的打包输出路径.</p>
<h4 id="build-webpack-base-conf"><a href="#build-webpack-base-conf" class="headerlink" title="/build/webpack.base.conf"></a><code>/build/webpack.base.conf</code></h4><p>可在这个文件下的 ‘resolve’ 下的 <code>alias</code> 对象中配置资源引用路径的缩写.     <code>vue-cli</code> 在构建的时候默认会有 <code>&#39;@&#39;: resolve(&#39;src&#39;)</code> 这条配置, 意思是引用文件的时候, <code>src</code> 这个路径可以用 <code>@</code> 表示, 当路径长了这个配置的优势就会提现出来. </p>
<h3 id="项目记录"><a href="#项目记录" class="headerlink" title="项目记录"></a>项目记录</h3><h4 id="index-html"><a href="#index-html" class="headerlink" title="/index.html"></a><code>/index.html</code></h4><p>入口文件, 项目最后打包的时候, 所有代码都会压缩到这个 <code>html</code> 文件中.<br>需要注意的是, 由于vue作了限制, 在文件中引用静态资源时, 静态资源不可放于src目录下, 要放于与这个文件同级的 <code>static</code> 目录下.</p>
<h4 id="sass"><a href="#sass" class="headerlink" title="sass"></a><code>sass</code></h4><p>要使用 <code>sass</code> 需要安装 <code>node-sass</code> 和 <code>sass-loader</code> 两个包<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install <span class="keyword">node</span><span class="title">-sass</span> --save-dev</div><div class="line">npm install sass-loader --save-dev</div></pre></td></tr></table></figure></p>
<p>然后在 <code>style</code> 标签中声明 <code>&lt;style lang=&quot;scss&quot;&gt;&lt;/style&gt;</code> 就可以使用了.</p>
<h4 id="fastclick"><a href="#fastclick" class="headerlink" title="fastclick"></a><code>fastclick</code></h4><p>移动端用 <code>fastclick</code> 来解决300毫秒点击延迟问题.<br><code>npm install fastclick --save</code><br>在 <code>main.js</code> 中 import: <code>import fastclick from &#39;fastclick&#39;</code> .<br>并且在绑定在 <code>body</code> 上: <code>fastclick.attach(document.body)</code> .</p>
<h4 id="better-scroll"><a href="#better-scroll" class="headerlink" title="better-scroll"></a><code>better-scroll</code></h4><p>使用 <code>better-scroll</code> 来获得更好的移动端体验<br><code>npm install better-scroll --save</code><br>由于项目中需要滚动的地方都需要用到 <code>better-scroll</code>, 所以将它封装成一个通用的基础组件,需要使用的时候直接引用就可以了.<br>很多刚使用 <code>better-scroll</code> 的人会遇到使用了插件,并且初始化也成功了,但是却滚动不了. 网上一查有很多的相关问题,我在使用的时候也遇到了这个问题,其实在 <code>better-scroll</code> 的 github 上已经说得比较清楚了:<br><img src="https://camo.githubusercontent.com/fd2fd41d5bc70502acb590d53f2084248587cb85/687474703a2f2f7374617469632e67616c696c656f2e7869616f6a756b656a692e636f6d2f7374617469632f746d732f736869656c642f7363726f6c6c2d342e706e67"><br>包裹的元素需要设置一个固定高度,当子元素的高度大于父元素的高度的时候就好出现滚动条. <code>better-scroll</code> 的核心原理就是禁用默认滚动条, 父元素设固定高度, 内容超出部分隐藏, 然后用 <code>css</code> 动画来做滚动效果.<br>所以只需要给父元素加个固定高度就可以解决页面不滚动问题.</p>
<h4 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a><code>vue-router</code></h4><ul>
<li><p>添加路由<br>在 <code>/src/router/index.js</code> 中可配置路由. 先将组件 import 进来, 然后在 <code>routes</code> 数组中添加路由配置. 一般路由格式如下:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">path</span>: <span class="string">'/home'</span>,</div><div class="line">  component: Home</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>默认路由<br><code>redirect</code> 可配置项目的默认路由:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">path</span>: <span class="string">'/'</span>,</div><div class="line">  redirect: <span class="string">'/index'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>嵌套路由</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">path</span>: <span class="string">'/home'</span>,</div><div class="line">  children: [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/home/index'</span>,</div><div class="line">      component: Index</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>动态路由</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">path</span>: <span class="string">'/people/id/:id'</span>,</div><div class="line">  component: People</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>例子中的配置在地址中的渲染效果会是 <code>/people/id/1</code>.</p>
<p>未完待续…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间抽空重写了陋网,还没开发完成, 还有很多细节需要完善. 所以这篇博客随着开发还会更新.&lt;br&gt;
    
    </summary>
    
    
      <category term="前端，前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%EF%BC%8C%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>陋 网</title>
    <link href="http://yoursite.com/2017/10/18/34.low-net/"/>
    <id>http://yoursite.com/2017/10/18/34.low-net/</id>
    <published>2017-10-18T14:28:16.000Z</published>
    <updated>2018-05-10T14:50:16.314Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前阵子把今年四五月份时候写的陋网重写了. 之前用的是 vue.js, vue-resource 和 jQuery, 现在想想就算是那时候, jQuery也是完全没必要引入的.后来不知道为何网站在 PC 端列表无法渲染了, 原因是 PC 端获取到的 data 编程字符串格式了, 而我之前开发的时候明明是能正常获取的, 而且移动端是能正确渲染列表的, 这个原因我至今没有想明白. </p>
<p>现在会了 vue-cli 之后, 就想着把网站重写了, 做成 SPA 单页应用, 这样才更像个 App.于是就有了这个项目.<br><a id="more"></a></p>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址:"></a>项目地址:</h3><p><a href="https://github.com/Tit1e/simpleWeb" target="_blank" rel="external">https://github.com/Tit1e/simpleWeb</a></p>
<h3 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h3><ul>
<li>采用 vue-cli 开发</li>
<li>vue-router 进行页面路由控制</li>
<li>采用 sass CSS 预处理, 对网站整体风格进行统一控制</li>
<li>localstorage HTML5本地存储</li>
<li>ThinkPHP 后台框架</li>
<li>前后端分离</li>
</ul>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><ul>
<li><code>/数据库结构.sql</code> - 数据库结构,其实实际只用到了2张表而已</li>
<li><code>/program</code> - vue 项目目录</li>
<li><code>/static</code> - vue 打包后的静态资源目录</li>
<li><code>/Application/Home/View/Index/</code> - 打包后的 index.html 文件目录</li>
</ul>
<p><strong> 下篇文章将总结开发过程中遇到的问题. </strong> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;前阵子把今年四五月份时候写的陋网重写了. 之前用的是 vue.js, vue-resource 和 jQuery, 现在想想就算是那时候, jQuery也是完全没必要引入的.后来不知道为何网站在 PC 端列表无法渲染了, 原因是 PC 端获取到的 data 编程字符串格式了, 而我之前开发的时候明明是能正常获取的, 而且移动端是能正确渲染列表的, 这个原因我至今没有想明白. &lt;/p&gt;
&lt;p&gt;现在会了 vue-cli 之后, 就想着把网站重写了, 做成 SPA 单页应用, 这样才更像个 App.于是就有了这个项目.&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端总结" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>块级元素靠右的实现方式</title>
    <link href="http://yoursite.com/2017/10/12/33.div_to_right/"/>
    <id>http://yoursite.com/2017/10/12/33.div_to_right/</id>
    <published>2017-10-12T13:07:56.000Z</published>
    <updated>2018-05-10T14:50:16.316Z</updated>
    
    <content type="html"><![CDATA[<p>一个块级元素靠右的实现方式有那些呢? 今天从别人哪里刚刚又学到了点东西, 整理了一下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 基本结构 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"block"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="使用-margin-属性"><a href="#使用-margin-属性" class="headerlink" title="使用 margin 属性"></a>使用 margin 属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#block</span>&#123;</div><div class="line">  <span class="attribute">margin-left</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将 <code>margin-left</code> 设为 <code>auto</code> 后, 元素左边的 <code>margin</code> 会被尽可能的撑大, 所以自然就把元素挤到右边去了. </p>
<h4 id="使用-position-属性"><a href="#使用-position-属性" class="headerlink" title="使用 position 属性"></a>使用 position 属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#parent</span>&#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#block</span>&#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用定位, 绝对能把元素放到右边去. </p>
<h4 id="使用-float-属性"><a href="#使用-float-属性" class="headerlink" title="使用 float 属性"></a>使用 float 属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#block</span>&#123;</div><div class="line">  <span class="attribute">float</span>: right;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用浮动将元素浮动到右边. </p>
<h4 id="使用-text-align-属性"><a href="#使用-text-align-属性" class="headerlink" title="使用 text-align 属性"></a>使用 text-align 属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#parent</span>&#123;</div><div class="line">  <span class="attribute">text-align</span>: right;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#block</span>&#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将块设为行内元素,然后父元素使用 <code>text-align: right;</code> 是块到右边. </p>
<h4 id="使用-flex-属性"><a href="#使用-flex-属性" class="headerlink" title="使用 flex 属性"></a>使用 flex 属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#parent</span>&#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将父元素变为弹性容器, 然后将 <code>justify-content</code> 设为 <code>flex-end</code>, 那么容器中的弹性元素会从右开始排列. </p>
<p>以上就是我整理块级元素靠右排列的几种方式, 如有遗漏, 欢迎补充. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个块级元素靠右的实现方式有那些呢? 今天从别人哪里刚刚又学到了点东西, 整理了一下:&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 基本结构 --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;block&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>div 包裹 img 底部出现空隙问题</title>
    <link href="http://yoursite.com/2017/10/12/32.div-img/"/>
    <id>http://yoursite.com/2017/10/12/32.div-img/</id>
    <published>2017-10-12T11:33:53.000Z</published>
    <updated>2018-05-10T14:50:16.296Z</updated>
    
    <content type="html"><![CDATA[<p>工作中我们有时候会遇到一个 div 包裹着一个 img 的时候, img 底部和 div 之间会有空隙, 如下图所示: </p>
<p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144347.png" alt=""></p>
<a id="more"></a>
<p>页面代码如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"background-color:blueviolet"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:#000;color:#fff;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./2.png"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这是什么造成的呢? 这样看也许你看不出来, 但是像下面这样也许你就大概知道是为什么了:</p>
<p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144403.png" alt=""></p>
<p>没错, 就是因为 <code>&lt;img&gt;</code> 不是块级元素,所以在一个 DIV 中它相当于一个文字, 而文字是有 baseline 的, 英文四线格中, baseline 处于倒数第二条而不是最后一条, 所以在图像底部才会出现一段空隙. 所以可以推测出: 在文字变大的时候, 空隙也会相应变大:</p>
<p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144416.png" alt=""></p>
<p>在<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img" target="_blank" rel="external"> MDN </a>中有这样一段文字来描述 <code>&lt;img&gt;</code> 标签: </p>
<p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144435.png" alt=""></p>
<p>那么什么是替换元素呢? </p>
<p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144447.png" alt=""></p>
<p>也就是说 <code>&lt;img&gt;</code> 是一个可以设置款高的行内元素, 是不是和 css 属性中的 <code>display: inline-block</code> 有点像呢? 不过 <code>&lt;img&gt;</code> 可是一个实打实的 <strong>行内元素</strong> (第 3 排第 4 个):</p>
<p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144508.png" alt=""></p>
<p>到这里已经完全了解了问题产生的原因, 那么相应解决问题的方法也就比较好找了:</p>
<ol>
<li>设置图片的 <code>vertical-align</code> 属性为 <code>bottom / top / middle</code> , 这样 <code>&lt;img&gt;</code> 的 baseline 就是最下面的线了,  也就不会产生空隙了. </li>
<li>既然因为它是替换元素的缘故, 那把它转为块级元素不就好了吗? 所以设置<code>display: block</code> 也可以解决这个问题.</li>
<li>把父元素的高度直接设置为图片想要的高度, 如果这个高度不是图片默认的高度, 再把图片的高度设为<code>height: 100%</code> 也可以解决这个问题. </li>
</ol>
<p>效果如图: </p>
<p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144519.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作中我们有时候会遇到一个 div 包裹着一个 img 的时候, img 底部和 div 之间会有空隙, 如下图所示: &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144347.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 GET 和 POST 使用场景</title>
    <link href="http://yoursite.com/2017/10/12/31.post-and-get/"/>
    <id>http://yoursite.com/2017/10/12/31.post-and-get/</id>
    <published>2017-10-12T08:55:43.000Z</published>
    <updated>2018-05-10T14:50:16.311Z</updated>
    
    <content type="html"><![CDATA[<p>网上涉及到 GET 和 POST 的讨论大多都是对比他们的区别, 而这些对比区别的文章之间又不断地打脸, 总之就是我说你是错的,他又说我是错的, 另一个跑过来又说他是错的. 看着真的是心累. 像我这种半路出家, 又是初涉前端的新人, 暂且不去讨论这两者之间原理如何如何, 总之现在能达成一致的观点是: <strong>这两者的本质是一样的.</strong> </p>
<a id="more"></a>
<p>现在抛开那些东西不谈, 我就单单来谈谈 GET 和 POST 在语义和应用场景方面我的理解. 单单从语义上来讲, 能很容易理解 GET 和 POST 之间的区别. 很多刚接触前端的新人一开始接触这两个请求的时候可能第一直觉就是 GET 是用来获取数据的, POST 是用来发送数据的. 到后来他们可能才会知道原来 GET 是可以发送数据的, POST 也是可以单单来获取数据的. </p>
<p>虽然这两者到可以用来获取/发送数据, 但是在实际场景中, 还是要按需来使用比较合适的请求方式. 比如你要分享一片文章给朋友, 那么在文章的地址中就必须带有这篇文章的一些信息, 比如文章的 ID . 当你想分享一个带有搜索条件的页面时, 那么页面的地址中也必须包含又相应的搜索信息, 不然对方打开的是一个不带任何参数的url, 那对方怎么知道你在当时选中的文章或搜索条件是什么呢? 所以这种场景下, 用 GET 就比 POST 更加符合我们实际的应用场景. 而如果你发表了一片文章, 那么 GET 提交就不是太合适了, 因为 url 是有长度限制的, 虽然各家浏览器对 url 对长度的限制各不相同, 但是开发者又如何知道用户用什么浏览器来访问呢. 所以这种情况下, POST 明显比 GET 更加适合. </p>
<p>所以我觉得下面这些最最表面的区别从使用场景的角度来说并没有错, 因为这些的的确确是在实际的使用场景中能直观感受到的区别</p>
<blockquote>
<p>1.GET后退按钮/刷新无害，POST数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</p>
<p>2.GET书签可收藏，POST为书签不可收藏。GET能被缓存，POST不能缓存 。</p>
<p>3.GET历史参数保留在浏览器历史中。POST参数不会保存在浏览器历史中。GET对数据长度有限制，当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。POST无限制。</p>
<p>4.GET只允许 ASCII 字符。POST没有限制。也允许二进制数据。与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</p>
<p>5.GET的数据在 URL 中对所有人都是可见的。POST的数据不会显示在 URL 中。</p>
</blockquote>
<p>而要往深了说的话,这些答案就给人一种答非所问的感觉了. </p>
<p>所以,在问这个问题的时候最好也带上一些” GET 参数”, 比如: “ GET 和 POST 在使用场景下有什么区别?”; 再如: “ GET 和 POST 本质上有什么区别?”</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上涉及到 GET 和 POST 的讨论大多都是对比他们的区别, 而这些对比区别的文章之间又不断地打脸, 总之就是我说你是错的,他又说我是错的, 另一个跑过来又说他是错的. 看着真的是心累. 像我这种半路出家, 又是初涉前端的新人, 暂且不去讨论这两者之间原理如何如何, 总之现在能达成一致的观点是: &lt;strong&gt;这两者的本质是一样的.&lt;/strong&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>一些工作中常用到的代码(二)</title>
    <link href="http://yoursite.com/2017/07/22/30.work-tips2/"/>
    <id>http://yoursite.com/2017/07/22/30.work-tips2/</id>
    <published>2017-07-22T12:11:41.000Z</published>
    <updated>2018-05-10T14:50:16.301Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery操作单选、复选框选中状态"><a href="#jQuery操作单选、复选框选中状态" class="headerlink" title="jQuery操作单选、复选框选中状态"></a>jQuery操作单选、复选框选中状态</h2><p>工作中时常会遇到使用 jQuery 操作选中、取消选中状态，之前是通过添加和移除 <code>checked</code> 属性来操作的，但是这种方法会在判断选中状态时会出现不一致的问题。使用如下方法就不会有什么问题(与第一次的内容有点重复)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//修改选中状态</span></div><div class="line">$(<span class="string">'input[type=checkbox],input[type=radio]'</span>).prop(<span class="string">'checked'</span>,<span class="literal">true</span>);<span class="comment">//选中</span></div><div class="line">$(<span class="string">'input[type=checkbox],input[type=radio]'</span>).prop(<span class="string">'checked'</span>,<span class="literal">false</span>);<span class="comment">//取消选中</span></div><div class="line"><span class="comment">//判断是否选中</span></div><div class="line">$(<span class="string">'input[type=checkbox],input[type=radio]'</span>).prop(<span class="string">'checked'</span>);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="使用FormData对象异步传输-form-表单数据"><a href="#使用FormData对象异步传输-form-表单数据" class="headerlink" title="使用FormData对象异步传输 form 表单数据"></a>使用FormData对象异步传输 form 表单数据</h2><p>我们工作中有时候会遇到表单需要用 Ajax 的方式传输，但是如果遇到表单元素数量比较多的情况，获取表单的数据内容会占据大量的时间，而 <code>formData</code> 可以将表单中的数据像提交表单那样将表单中的数据“打包”，然后通过 Ajax 传输。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"uploadForm"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- code... --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">'/upload'</span>,</div><div class="line">        <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">        <span class="attr">cache</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">data</span>: <span class="keyword">new</span> FormData($(<span class="string">'#uploadForm'</span>)[<span class="number">0</span>]),</div><div class="line">        <span class="attr">processData</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">contentType</span>: <span class="literal">false</span></div><div class="line">    &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line"></div><div class="line">    &#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>注意点</strong></p>
<ul>
<li><code>processData</code> 设置为 <code>false</code>。因为 <code>data</code> 值是 <code>FormData</code> 对象，不需要对数据做处理。</li>
<li><code>form</code> 标签添加 <code>enctype=&quot;multipart/form-data&quot;</code> 属性。</li>
<li><code>cache</code> 设置为 <code>false</code>，上传文件不需要缓存。</li>
<li><code>contentType</code> 设置为<code>false</code>。因为是由 <code>form</code> 表单构造的 <code>FormData</code>对象，且已经声明了属性 <code>enctype=&quot;multipart/form-data&quot;</code>，所以这里设置为 <code>false</code>。<h2 id="使网页文字无法被选中"><a href="#使网页文字无法被选中" class="headerlink" title="使网页文字无法被选中"></a>使网页文字无法被选中</h2>给 html 标签加上 <code>onselectstart=&quot;return false&quot;</code> 就可以实现<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onselectstart</span>=<span class="string">"return false"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="不让-input-输入框显示历史输入记录"><a href="#不让-input-输入框显示历史输入记录" class="headerlink" title="不让 input 输入框显示历史输入记录"></a>不让 input 输入框显示历史输入记录</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="layDate日期插件，样式发生错位"><a href="#layDate日期插件，样式发生错位" class="headerlink" title="layDate日期插件，样式发生错位"></a>layDate日期插件，样式发生错位</h2><p>layDate日期插件在与 bootstrap 一起使用的时候，layDate的日期选择框按钮会发生错位的现象，在layDate的 css 文件中加入一下几行样式可解决：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.laydate_box</span>, <span class="selector-class">.laydate_box</span> * &#123;</div><div class="line">    <span class="attribute">box-sizing</span>:content-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="代码触发-change-事件"><a href="#代码触发-change-事件" class="headerlink" title="代码触发 change 事件"></a>代码触发 change 事件</h2><p>有些时候，我们希望用代码触发change事件，可以直接调用无参数的 <code>change()</code>方法来触发该事件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jQuery操作单选、复选框选中状态&quot;&gt;&lt;a href=&quot;#jQuery操作单选、复选框选中状态&quot; class=&quot;headerlink&quot; title=&quot;jQuery操作单选、复选框选中状态&quot;&gt;&lt;/a&gt;jQuery操作单选、复选框选中状态&lt;/h2&gt;&lt;p&gt;工作中时常会遇到使用 jQuery 操作选中、取消选中状态，之前是通过添加和移除 &lt;code&gt;checked&lt;/code&gt; 属性来操作的，但是这种方法会在判断选中状态时会出现不一致的问题。使用如下方法就不会有什么问题(与第一次的内容有点重复)。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//修改选中状态&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;input[type=checkbox],input[type=radio]&#39;&lt;/span&gt;).prop(&lt;span class=&quot;string&quot;&gt;&#39;checked&#39;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//选中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;input[type=checkbox],input[type=radio]&#39;&lt;/span&gt;).prop(&lt;span class=&quot;string&quot;&gt;&#39;checked&#39;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//取消选中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断是否选中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;input[type=checkbox],input[type=radio]&#39;&lt;/span&gt;).prop(&lt;span class=&quot;string&quot;&gt;&#39;checked&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>移动端网页底部导航被虚拟键盘顶起解决方法</title>
    <link href="http://yoursite.com/2017/07/16/29.mobile_web_footer/"/>
    <id>http://yoursite.com/2017/07/16/29.mobile_web_footer/</id>
    <published>2017-07-16T09:20:28.000Z</published>
    <updated>2018-05-10T14:50:16.313Z</updated>
    
    <content type="html"><![CDATA[<p>在写移动端的网页应用的时候经常会遇到底部导航，或者说是底部菜单。而当触发虚拟键盘的时候，底部的导航会被顶起来，遮挡住网页内容。定位方法对此也并不管用。我这有两种解决方式（都基于jQuery）。<br><a id="more"></a><br>第一种：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  这种方法的思路是，当输入框获得焦点的时候，就隐藏，失去焦点就显示</span></div><div class="line">$(<span class="string">'input[type=text],textarea'</span>).focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'footer'</span>).hide();</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'input[type=text],textarea'</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'footer'</span>).show();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>但第一种方法有个缺点，就是当用户输入完成后可能只是收起了键盘，而此时输入框并没有失去焦点，但底部的导航还是隐藏状态，这样容易给用户造成困惑，所以第二种方法能很好地解决这个问题。</p>
<p>第二种：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这种方法的思路是监听窗口高度的变化来判断是否有触发虚拟键盘，以此来控制底部导航的显示与隐藏</span></div><div class="line"><span class="keyword">var</span> height = $(<span class="built_in">window</span>),height();</div><div class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> n_height = $(<span class="built_in">window</span>).height();</div><div class="line">    <span class="keyword">if</span>( height != n_height )&#123;</div><div class="line">        $(<span class="string">'footer'</span>).hide();</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        $(<span class="string">'footer'</span>).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种方法也间接解释了为什么会定位失效，因为因为虚拟键盘是把整个浏览器窗口顶起来了，而不是覆盖在浏览器上，所以定位在底部还是会在输入法上方。</p>
<p>上述第一种方法来自网络，由于时间太久，来源已无从考察；第二种方法是同事的思路，至于来源我并不清楚是来自网络还是自己远程，我只是在此做一个总结。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写移动端的网页应用的时候经常会遇到底部导航，或者说是底部菜单。而当触发虚拟键盘的时候，底部的导航会被顶起来，遮挡住网页内容。定位方法对此也并不管用。我这有两种解决方式（都基于jQuery）。&lt;br&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>你快看那片星空</title>
    <link href="http://yoursite.com/2017/05/31/28.The_star_sky%20/"/>
    <id>http://yoursite.com/2017/05/31/28.The_star_sky /</id>
    <published>2017-05-31T11:56:09.000Z</published>
    <updated>2018-05-10T14:50:16.300Z</updated>
    
    <content type="html"><![CDATA[<p>二十五日和同事一起去滨江的彩虹跑道相约跑步，跑完同事问我端午露营去吗？他说起的那一刻我非常心动，但想了想要回家，我还是拒绝了。第二天，我挣扎了好久还是决定去。因为觉得自己的生活实在太无聊，两点一线。<br><a id="more"></a><br>龙哥说他要去拍星空，这才是驱使我去的真正原因。我真的很喜欢星空啊！小时候天黑了，村子里也就黑了，天上还有很多的星星，但是现在天黑了，灯还亮着，星星都不见了。</p>
<p>曾经用 <strong>星灯亦是心灯</strong> 做过很长时间的网名。高中的时候喜欢听《星星点灯》，天上的星星也是我心中的明灯，这就是那个名字的来历。后来网名换了，换成了 <strong>evollyone</strong>、<strong>Tit1e</strong>，但我最喜欢的还是 <strong>星灯亦是心灯</strong> 。</p>
<p>我心中的明灯未曾灭过。</p>
<p>晚上九点多的时候，星星已经升起，但是由于露营地的照明灯太亮，站在下面只看得到稀疏的几颗星星。于是我和龙哥便一同登上天池大坝。1000米的海拔和200阶阶梯，登上大坝时已经气喘吁吁。一抬头，星星不再稀疏，北斗七星悬在头顶。这是我见过最美的星空。</p>
<p>十一点多的时候再次登坝，星星更密了，银河已从东边升起。架起拍星轨的相机后，我们一行人去了旁边拍照玩。</p>
<p>我望着头顶的星空，想着如果你在我旁边和我一同抬头仰望这片星空那该有多好。你望着星空，我望着你，透过你的眼睛感受你眼里温柔的星空。我的眼里，有星空，有你。</p>
<center><br><br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144643.jpg" alt=""><br><br></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二十五日和同事一起去滨江的彩虹跑道相约跑步，跑完同事问我端午露营去吗？他说起的那一刻我非常心动，但想了想要回家，我还是拒绝了。第二天，我挣扎了好久还是决定去。因为觉得自己的生活实在太无聊，两点一线。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
