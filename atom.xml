<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I&#39;m Tit1e</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-27T01:09:40.218Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tit1e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>网页打印指定区域内容</title>
    <link href="http://yoursite.com/2019/03/26/55.web-print/"/>
    <id>http://yoursite.com/2019/03/26/55.web-print/</id>
    <published>2019-03-26T14:26:32.000Z</published>
    <updated>2019-03-27T01:09:40.218Z</updated>
    
    <content type="html"><![CDATA[<p>公司业务上有打印需求，但打印内容在一个弹窗中，在网上找了一圈，找到了解决办法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>)</span><br><span class="line"><span class="keyword">let</span> win = <span class="built_in">window</span>.open(<span class="string">''</span>)</span><br><span class="line">win.document.write(dom.outerHTML)</span><br><span class="line">win.print()</span><br></pre></td></tr></table></figure><p>以上代码就实现了指定区域的打印功能。</p><p><a href="https://www.zhihu.com/question/20108278/answer/14142503" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;公司业务上有打印需求，但打印内容在一个弹窗中，在网上找了一圈，找到了解决办法。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="前端学习&#39;" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>使用 Vue CLI3 编写组件库并发布至 npm</title>
    <link href="http://yoursite.com/2019/03/26/54.vuecl3-npm-publish/"/>
    <id>http://yoursite.com/2019/03/26/54.vuecl3-npm-publish/</id>
    <published>2019-03-25T16:05:29.000Z</published>
    <updated>2019-03-25T17:14:15.174Z</updated>
    
    <content type="html"><![CDATA[<p>前几天研发部老大来跟我说，由于现在公司业务中台化，基本上公司所有的系统都要进行迁移，并将原来使用的jQuery + Bootstrap 技术栈更新为 Vue + Element。既然统一了技术栈，那么在开发过程中肯定会有很多组件是可以共用的，甚至登录页。因此要求我开发一个公共组件库，以避免开发过程中写重复代码，提高开发效率。我也正好趁此机会了解一下相关的知识。</p><p>先放上组件地址：<a href="https://www.npmjs.com/package/hzsj-components" target="_blank" rel="noopener">hzsj-components</a>。因为不涉及公司业务，所以就把它发布到了 npm 上。</p><p>这个组件库是在  <a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">Element</a> 的基础上进行开发的，而且是第一次开发，不了解如何合理配置目录，因此我的组件库目录部分参考了 <a href="https://github.com/ElemeFE/element" target="_blank" rel="noopener">element-ui</a> 的结构。</p><a id="more"></a><p>以  <code>HzCopy</code> 组件为例：</p><p>所有组件都放置在 <code>/packages</code> 目录下，<code>/packages/index.js</code> 用于整合所有组件，导出整个组件库。而 <code>/packages/copy/index.js</code> 用于导出单个组件，比如需要按需引入组件时。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /packages/index.js</span></span><br><span class="line"><span class="keyword">import</span> Copy <span class="keyword">from</span> <span class="string">'./copy'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储组件列表</span></span><br><span class="line"><span class="keyword">const</span> components = [</span><br><span class="line">  Copy</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 install 方法，接收 Vue 作为参数。如果使用 use 注册插件，则所有的组件都将被注册</span></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断是否安装</span></span><br><span class="line">  <span class="keyword">if</span> (install.installed) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// 遍历注册全局组件</span></span><br><span class="line">  components.map(<span class="function"><span class="params">component</span> =&gt;</span> Vue.component(component.name, component))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是直接引入文件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">  install(<span class="built_in">window</span>.Vue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install,</span><br><span class="line">  Copy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /packages/copy/index.js</span></span><br><span class="line"><span class="comment">// 导入组件，组件必须声明 name</span></span><br><span class="line"><span class="keyword">import</span> HzCopy <span class="keyword">from</span> <span class="string">'./src'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为组件提供 install 安装方法，供按需引入</span></span><br><span class="line">HzCopy.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.component(HzCopy.name, HzCopy)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认导出组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HzCopy</span><br></pre></td></tr></table></figure><p>这样就编写完了一个组件，但要发布还得做一些其他工作。</p><p>完善 <code>package.json</code>：</p><ul><li><p>name：包名，就是  <code>npm install</code>  的时候输入的包名</p></li><li><p>version：版本</p></li><li><p>description：对包的描述，有利于用户搜索</p></li><li><p>keywords：关键字，以空格分离，有利于搜索</p></li><li><p>private：是否私有，必须修改为 false</p></li><li><p>author：作者</p></li><li><p>license：开源协议</p></li><li><p>repository：在 npm 介绍页面显示项目入口，参考格式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"repository": &#123;</span><br><span class="line">  "type": "git",</span><br><span class="line">  "url": "https://github.com/xxxx/xxxx.git"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>scripts：新增一条打包库的命令</p><ul><li><code>--target</code>： 构建目标，默认为应用模式。这里修改为 <code>lib</code> 启用库模式。</li><li><code>--dest</code>：输出目录，默认 <code>dist</code>。这里我们改成 <code>lib</code>。</li><li><code>[entry]</code>： 最后一个参数为入口文件，默认为  <code>src/App.vue</code>。这里我们指定编译  <code>packages/</code>  组件库目录。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "lib": "vue-cli-service build --target lib --name hzsj-components --dest lib packages/index.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>main：定义包的入口文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"main": "lib/hzsj-components.umd.min.js"</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>engines：告诉用户运行你的包对 NodeJs 版本的要求</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"engines": &#123;</span><br><span class="line">  "node": "v11.8.0"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>修改好  <code>package.json</code> 后就可以准备发布包了。</p><p>首先如果使用了淘宝或其他镜像需先设置回 npm 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npmjs.org</span><br></pre></td></tr></table></figure><p>或者如果使用 <a href="https://www.npmjs.com/package/nrm" target="_blank" rel="noopener">nrm</a> 可使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm use npm</span><br></pre></td></tr></table></figure><p>然后去 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a> 注册一个账号，注册完了在终端登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><p>发布</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>如果你的包名以 @ 开头，用上面命令可能会发布失败，需要用以下命令发布</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish --access public</span><br></pre></td></tr></table></figure><p><a href="https://juejin.im/post/5bbab9de5188255c8c0cb0e3" target="_blank" rel="noopener">参考文章</a></p><p><a href="https://juejin.im/post/5b231f6ff265da595f0d2540" target="_blank" rel="noopener">参考文章2</a></p><p><a href="https://blog.csdn.net/u013727805/article/details/80849329" target="_blank" rel="noopener">参考文章3</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天研发部老大来跟我说，由于现在公司业务中台化，基本上公司所有的系统都要进行迁移，并将原来使用的jQuery + Bootstrap 技术栈更新为 Vue + Element。既然统一了技术栈，那么在开发过程中肯定会有很多组件是可以共用的，甚至登录页。因此要求我开发一个公共组件库，以避免开发过程中写重复代码，提高开发效率。我也正好趁此机会了解一下相关的知识。&lt;/p&gt;
&lt;p&gt;先放上组件地址：&lt;a href=&quot;https://www.npmjs.com/package/hzsj-components&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hzsj-components&lt;/a&gt;。因为不涉及公司业务，所以就把它发布到了 npm 上。&lt;/p&gt;
&lt;p&gt;这个组件库是在  &lt;a href=&quot;http://element-cn.eleme.io/#/zh-CN&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Element&lt;/a&gt; 的基础上进行开发的，而且是第一次开发，不了解如何合理配置目录，因此我的组件库目录部分参考了 &lt;a href=&quot;https://github.com/ElemeFE/element&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;element-ui&lt;/a&gt; 的结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vue-cli" scheme="http://yoursite.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>在 Vue CLI 3 中配置 svg-sprite-loader</title>
    <link href="http://yoursite.com/2019/03/12/53.vue-cli3-use-svg-sprite-loader/"/>
    <id>http://yoursite.com/2019/03/12/53.vue-cli3-use-svg-sprite-loader/</id>
    <published>2019-03-12T06:25:46.000Z</published>
    <updated>2019-03-12T06:45:13.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install svg-sprite-loader --save-dev</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在 Vue.config.js 中加入如下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> path.join(__dirname, <span class="string">'.'</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 重点:删除默认配置中处理svg</span></span><br><span class="line">        config.module.rules.delete(<span class="string">'svg'</span>)</span><br><span class="line">        config.module</span><br><span class="line">            .rule(<span class="string">'svg-sprite-loader'</span>)</span><br><span class="line">            .test(<span class="regexp">/\.svg$/</span>)</span><br><span class="line">            .include</span><br><span class="line">            .add(resolve(<span class="string">'src/icons'</span>)) <span class="comment">// 处理svg目录,根据实际情况修改</span></span><br><span class="line">            .end()</span><br><span class="line">            .use(<span class="string">'svg-sprite-loader'</span>)</span><br><span class="line">            .loader(<span class="string">'svg-sprite-loader'</span>)</span><br><span class="line">            .options(&#123;</span><br><span class="line">            symbolId: <span class="string">'icon-[name]'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然其他的 webpack 配置也可以在 Vue.config.js 中配置，包括反向代理等等。具体可查看<a href="https://cli.vuejs.org/zh/guide/webpack.html" target="_blank" rel="noopener">这里</a>。</p><p><a href="https://juejin.im/post/5bc93881f265da0aea69ae2e" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vue-cli" scheme="http://yoursite.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>你好呀，2019</title>
    <link href="http://yoursite.com/2018/12/31/52.hello-2019/"/>
    <id>http://yoursite.com/2018/12/31/52.hello-2019/</id>
    <published>2018-12-31T15:15:58.000Z</published>
    <updated>2019-03-12T06:20:18.812Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2018-计划"><a href="#2018-计划" class="headerlink" title="2018 计划"></a>2018 计划</h4><ol><li>前端技能上能有大的提升（如何衡量大呢？我也不知道） ❓</li><li>增重到130斤（是增肌，不是增脂！） ❎</li><li>一定要买个 switch（塞尔达天下第一！） ✅</li><li>薪水上涨 30% ✅</li><li>攒钱 ✅</li><li>希望认识更多的人？（这个太难了） ✅</li></ol><a id="more"></a><p>增重很明显失败了，18 年几乎没去健身房吧，放弃一件事实在是太容易了。开年的时候就开始忙，连着加了好几个月的班，之后后面又不确定性的日常加班，导致后来已经完全没了去健身房的兴致，当然我不是把锅甩在加班头上，毕竟后面不忙了，周末我也没去健身房了。</p><p>switch 的话已经买了，也有大半年了吧，玩倒也断断续续一直在玩，玩得最疯的就是当初肝《异度之刃2》的时候了，很久没有游戏能这样吸引我了，确实是个好游戏。</p><p>18 年也认识了两个可爱的同事，他们是我晋公司以来最处得来的同事，大概是因为都是逗比吧。</p><p>明年就不立计划了，只希望家人，我在意的以及在意我的人能快乐，身体能健康吧。与家人的关系也能更近一步，小时候不怎么跟家人交流，现在大了，事情多了，爸妈也会跟我来说一些事情了，与爸妈之间的话说的也就多了，但我希望还能更近一步吧。已经能明显感觉到爸妈在变老了，时间不等人呀。以前觉得“祝你身体健康”只是客套话，但是随着年龄变大，经历的事情增多，我越来越觉得这不是客套话。随着年龄的增大，这句话也将变得弥足珍贵。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;2018-计划&quot;&gt;&lt;a href=&quot;#2018-计划&quot; class=&quot;headerlink&quot; title=&quot;2018 计划&quot;&gt;&lt;/a&gt;2018 计划&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;前端技能上能有大的提升（如何衡量大呢？我也不知道） ❓&lt;/li&gt;
&lt;li&gt;增重到130斤（是增肌，不是增脂！） ❎&lt;/li&gt;
&lt;li&gt;一定要买个 switch（塞尔达天下第一！） ✅&lt;/li&gt;
&lt;li&gt;薪水上涨 30% ✅&lt;/li&gt;
&lt;li&gt;攒钱 ✅&lt;/li&gt;
&lt;li&gt;希望认识更多的人？（这个太难了） ✅&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="新年计划" scheme="http://yoursite.com/tags/%E6%96%B0%E5%B9%B4%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>从零开始：Ubuntu 部署 Node 环境</title>
    <link href="http://yoursite.com/2018/12/14/51.ubuntu-node/"/>
    <id>http://yoursite.com/2018/12/14/51.ubuntu-node/</id>
    <published>2018-12-14T12:29:48.000Z</published>
    <updated>2018-12-15T02:19:43.470Z</updated>
    
    <content type="html"><![CDATA[<p>最近注册了一个亚马逊的 AWS 账号，有一年的免费体验时间，于是打算这次机会来折腾折腾服务器方面的东西，顺便学学 Node。折腾过程中遇到了挺多问题，我都会一一记录下来。</p><p>这次记录的是我在 Ubuntu 下安装了 mysql 时，没提醒我输入密码，Google 了一圈解决，在这里做个记录。</p><a id="more"></a><p>……</p><p>……</p><p>……</p><p>本来这篇文章叫做“Ubuntu 安装 mysql 未提示输入密码”，但在我想去服务器上执行命令验证下命令是否正确的时候，发现 AWS 连不上了……然后我折腾了一个多小时，放弃了原来的服务器，重新新建了一个实例，又从头到尾折腾了一遍，所以这篇文章也正式更名为“从零开始：Ubuntu 部署 Node 环境”。</p><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><ul><li>服务器：<a href="https://aws.amazon.com/cn/" target="_blank" rel="noopener">Amazon Web Services</a> EC2（新用户免费体验 1 年）</li><li>服务器系统：Ubuntu 16.04.5 LTS</li><li>操作环境：mac OS Mojave 10.14.2</li><li>终端：iterm2</li></ul><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><h4 id="一、创建实例"><a href="#一、创建实例" class="headerlink" title="一、创建实例"></a>一、创建实例</h4><p>1、登录控制台，开始创建<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-14_23-35-09.png" alt><br>2、选择系统（免费用户只能选择带有“符合条件的免费套餐”字样的项）<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-14_23-37-31.png" alt><br>3、选择实例类型<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-14_23-37-57.png" alt><br>4、启动<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-14_23-38-26.png" alt><br>5、创建密钥<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-14_23-41-35.png" alt></p><p>密钥需要保管好，因为通过 SSH 连接服务器的时候需要用到。我将密钥存在 <code>~/.ssh/</code> 路径下。</p><p>注：新建的实例默认情况下是 ping 不通的，因为它默认只允许 SSH 流量，需要设置一下<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-15_01-36-33.png" alt></p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-15_01-39-26.png" alt></p><h4 id="二、SSH-连接服务器"><a href="#二、SSH-连接服务器" class="headerlink" title="二、SSH 连接服务器"></a>二、SSH 连接服务器</h4><p>打开终端，输入命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ip 或 公有 DNS 可在创建实例的第一步图中的列表中找到</span></span><br><span class="line">sudo ssh -i ~/.ssh/zyd.pem ubuntu@[ip 或 公有 DNS]</span><br></pre></td></tr></table></figure></p><h4 id="三、安装-node-js"><a href="#三、安装-node-js" class="headerlink" title="三、安装 node.js"></a>三、安装 node.js</h4><p>Ubuntu 下直接执行 <code>sudo apt install nodejs</code> 安装的 node 版本回会非常低，所以不推荐直接用这个命令安装。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">更新软件</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line"><span class="meta">#</span><span class="bash">添加 node 源</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_9.x | sudo -E shell -</span><br><span class="line"><span class="meta">#</span><span class="bash">安装</span></span><br><span class="line">sudo apt install -y nodejs</span><br></pre></td></tr></table></figure></p><p>安装完后安装 node 版本管理工具，我用的是 n ：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm <span class="keyword">install</span> n -g</span><br></pre></td></tr></table></figure></p><p>n 的使用方法可参考 <a href="https://www.npmjs.com/package/n" target="_blank" rel="noopener">这里</a>。</p><h4 id="四、Nginx-服务器代理设置"><a href="#四、Nginx-服务器代理设置" class="headerlink" title="四、Nginx 服务器代理设置"></a>四、Nginx 服务器代理设置</h4><p>1、安装 Nginx，安装完通过 <code>nginx -v</code> 查看版本号来看是否安装成功<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> nginx</span><br><span class="line">nginx -v</span><br></pre></td></tr></table></figure></p><p>2、配置代理<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx/conf.d/</span><br><span class="line"><span class="meta">#</span><span class="bash">文件名自定义</span></span><br><span class="line">sudo vi test-3000.conf</span><br></pre></td></tr></table></figure></p><p>按 <code>i</code> 进入 vim 的编辑模式，粘贴如下内容：</p><p>粘贴前把注释内容删除<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这里需要对应域名</span></span><br><span class="line">upstream test &#123;</span><br><span class="line">    #端口需要根据之后 node 服务运行后的实际端口来配置，Express 的默认端口为 3000</span><br><span class="line">    server 127.0.0.1:3000;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    #绑定的完整域名</span><br><span class="line">    server_name test.evolly.one;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header Host  $http_host;</span><br><span class="line">        proxy_set_header X-Real-IP  $remote_addr;  </span><br><span class="line">        proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Nginx-proxy true;</span><br><span class="line">        #这里需要对应域名</span><br><span class="line">        proxy_pass http://test;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按 <code>esc</code> 并直接在用键盘输出 <code>:wq</code> ，回车，保存并关闭文件。终端输入 <code>ls</code> 可查看当前目录下的文件列表。</p><p>将域名解析至服务器，我的域名是在 GoDaddy 上买的，域名解析都差不多，添加一条 A 类型的解析。<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-15_00-30-50.png" alt></p><p>然后输入运行 <code>sudo nginx -t</code> 查看是否配置成功<br>成功终端会打印如下信息：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx: the configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">syntax</span> <span class="keyword">is</span> ok</span><br><span class="line">nginx: configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> test <span class="keyword">is</span> successful</span><br></pre></td></tr></table></figure></p><p>重启 nginx<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure></p><h4 id="五、创建和部署-hello-world"><a href="#五、创建和部署-hello-world" class="headerlink" title="五、创建和部署 hello world"></a>五、创建和部署 hello world</h4><p>到根目录创建 <code>www</code> 目录并进入目录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">sudo mkdir www</span><br><span class="line">cd www</span><br></pre></td></tr></table></figure></p><p>创建 hello.js<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi hello.js</span><br></pre></td></tr></table></figure></p><p>写入以下内容：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;)</span><br><span class="line">res.end(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;).listen(<span class="number">3000</span>) <span class="comment">//端口对应之前 nginx 配置中配置的端口</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server test'</span>)</span><br></pre></td></tr></table></figure></p><p>运行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node hello.js</span><br></pre></td></tr></table></figure></p><p>现在访问之前解析的域名，就能在页面上看到 <code>hello world</code> 字样。<br>那么有个问题，现在 node 服务是启动了，但是终端被占用了，无法执行其他操作了。这时候我们就需要 pm2，pm2 是 node 进程管理工具，有了它，node 就不会占用你的终端了，当然它的功能不止只一个，还有如性能监控、自动重启、负载均衡等功能。</p><p>安装<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g pm2</span><br></pre></td></tr></table></figure></p><p>运行 node 服务<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start hello.js</span><br></pre></td></tr></table></figure></p><p>如果你使用了框架，如 Express，那你可以 cd 至项目跟目录，运行 <code>pm2 start &#39;./bin/WWW&#39;</code>。或者你可以看 <code>package.json</code> 中运行项目的实际命令是什么。</p><p>运行后可以看到终端打印出了所有进程状态，并且终端没有被占用。pm2 的其他用法可以 <a href="https://www.npmjs.com/package/pm2" target="_blank" rel="noopener">参考这里</a></p><h4 id="六、安装-mysql"><a href="#六、安装-mysql" class="headerlink" title="六、安装 mysql"></a>六、安装 mysql</h4><p>1、执行安装命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br><span class="line">sudo apt install mysql-client</span><br><span class="line">sudo apt install libmysqlclient-dev</span><br></pre></td></tr></table></figure></p><p>正常情况下安装过程中会让你输入两次初始密码</p><p>通过 <code>sudo netstat -tap | grep mysql</code> 测试是否安装成功，如果成功则显示如下：<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-15_01-05-52.png" alt></p><p>2、设置 mysql 允许远程访问，否则数据库工具无法远程连接<br>编辑文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></p><p>注释掉 bind-address = 127.0.0.1 行（最前面加<code>#</code>）</p><p>保存退出</p><p>连接 mysql,执行以下命令后，输入密码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></p><p>执行授权命令并退出（命令中的 <code>；</code> 也要复制）：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> root@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'你的密码'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line">quit</span><br></pre></td></tr></table></figure></p><p>重启 mysql<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure></p><p>现在你就可以通过 Navicat 工具连接 mysql 了。</p><h4 id="mysql-安装过程中没有提示输入初始密码"><a href="#mysql-安装过程中没有提示输入初始密码" class="headerlink" title="mysql 安装过程中没有提示输入初始密码"></a>mysql 安装过程中没有提示输入初始密码</h4><p>如果遇到这种情况，可以打开该文件查看默认密码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure></p><p>在这个文件里面有着 MySQL 默认的用户名和用户密码<br>正常情况下该文件中的 <code>user</code> 为 <code>debian-sys-maint</code>，而密码是由比较复杂的大小写数字构成，我们先通过这个账户连接 mysql,然后执行修改密码命令给 root 用户修改密码：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u debian-sys-maint -p</span><br></pre></td></tr></table></figure></p><p>输入密码后连接 mysql ,执行：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">'重置的密码'</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span><span class="keyword">and</span> Host = <span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure></p><p>如果显示以下内容则说明修改成功：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Query OK, <span class="number">1</span> <span class="built_in">row</span> affected, <span class="number">1</span> warning (<span class="number">0.00</span> <span class="built_in">sec</span>)</span><br><span class="line"><span class="built_in">Rows</span> <span class="built_in">match</span><span class="symbol">ed:</span> <span class="number">1</span>  Chang<span class="symbol">ed:</span> <span class="number">1</span>  Warnin<span class="symbol">gs:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>重启 mysql<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure></p><p>这样 root 用户的密码就被重置了。</p><p>教程到此结束，最后感谢下面这几位作者提供的参考：</p><ul><li><a href="https://segmentfault.com/a/1190000010098126" target="_blank" rel="noopener">nodejs 服务器部署教程</a></li><li><a href="https://blog.csdn.net/xiangwanpeng/article/details/54562362" target="_blank" rel="noopener">在 Ubuntu16.04 下安装 mysql</a></li><li><a href="https://blog.csdn.net/sinat_21302587/article/details/76870457" target="_blank" rel="noopener">ubuntu 安装 mysql 时未提示输入密码</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近注册了一个亚马逊的 AWS 账号，有一年的免费体验时间，于是打算这次机会来折腾折腾服务器方面的东西，顺便学学 Node。折腾过程中遇到了挺多问题，我都会一一记录下来。&lt;/p&gt;
&lt;p&gt;这次记录的是我在 Ubuntu 下安装了 mysql 时，没提醒我输入密码，Google 了一圈解决，在这里做个记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="折腾" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>jsTree 不同节点不同右键菜单</title>
    <link href="http://yoursite.com/2018/07/23/50.jstree/"/>
    <id>http://yoursite.com/2018/07/23/50.jstree/</id>
    <published>2018-07-23T12:36:59.000Z</published>
    <updated>2018-07-23T14:38:53.515Z</updated>
    
    <content type="html"><![CDATA[<p>公司系统中有个菜单管理的模块，用到了 <a href="https://www.jstree.com/" target="_blank" rel="noopener">jsTree</a> 的右键菜单功能，但是有个问题，就是菜单只有两级，一级菜单允许添加子菜单，二级菜单不允许添加子菜单，这就需要根据选中的菜单渲染不同的右键菜单。网上找了一番，在 <a href="https://blog.csdn.net/m0_37355951/article/details/78320254" target="_blank" rel="noopener">这里</a> 找到了解决方法。我在自己博客再记录一次，为了加深印象，也为了日后方便查找。<br><a id="more"></a></p><h3 id="引入资源"><a href="#引入资源" class="headerlink" title="引入资源"></a>引入资源</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/themes/default/style.min.css"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jquery/1.12.1/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdnjs.cloudflare.com/ajax/libs/jstree/3.2.1/jstree.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="用于初始化的-DOM-节点"><a href="#用于初始化的-DOM-节点" class="headerlink" title="用于初始化的 DOM 节点"></a>用于初始化的 DOM 节点</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"jstree_demo_div"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟数据</span></span><br><span class="line"><span class="keyword">var</span> DATA = [&#123;</span><br><span class="line">  <span class="string">"id"</span>: <span class="string">"276"</span>,</span><br><span class="line">  <span class="string">"text"</span>: <span class="string">"分析"</span>,</span><br><span class="line">  <span class="string">"parent_id"</span>: <span class="string">"0"</span>,</span><br><span class="line">  <span class="string">"children"</span>: [&#123;</span><br><span class="line">    <span class="string">"parent_id"</span>: <span class="string">"276"</span>,</span><br><span class="line">    <span class="string">"id"</span>: <span class="string">"281"</span>,</span><br><span class="line">    <span class="string">"text"</span>: <span class="string">"监测概况"</span></span><br><span class="line">  &#125;]</span><br><span class="line">&#125;]</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  $(<span class="string">'#jstree_demo_div'</span>).jstree(&#123;</span><br><span class="line">    core: &#123;</span><br><span class="line">      <span class="string">'data'</span>: DATA, <span class="comment">//数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'contextmenu'</span>: &#123;</span><br><span class="line">      <span class="string">'items'</span>: customMenu <span class="comment">//右键点击触发的函数，下面会讲到</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">'plugins'</span>: [<span class="string">'contextmenu'</span>] <span class="comment">//右键菜单插件，必须加载这个插件才能使用右键菜单</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="不同右键菜单的关键"><a href="#不同右键菜单的关键" class="headerlink" title="不同右键菜单的关键"></a>不同右键菜单的关键</h3><p>这个函数是让 jsTree 有不同右键菜单的关键，当右键点击的时候，会执行这个函数，我们只要根据某个参数来判断当前是什么菜单，然后根据这个菜单来 return 右键菜单的对象就行了。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">customMenu</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> items = &#123;</span><br><span class="line">    <span class="string">"new"</span>: &#123;</span><br><span class="line">      <span class="string">"label"</span>: <span class="string">"新建子菜单"</span>,</span><br><span class="line">      <span class="string">"action"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// code...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"edit"</span>: &#123;</span><br><span class="line">      <span class="string">"label"</span>: <span class="string">"编辑菜单"</span>,</span><br><span class="line">      <span class="string">"action"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// code...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"delete"</span>: &#123;</span><br><span class="line">      <span class="string">"label"</span>: <span class="string">"删除菜单"</span>,</span><br><span class="line">      <span class="string">"action"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// code...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// parent_id 为 0 的是一级菜单</span></span><br><span class="line">  <span class="keyword">if</span>(node.original.parent_id !== <span class="string">'0'</span>)&#123;</span><br><span class="line">    <span class="keyword">delete</span> items.new</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> items</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><a href="https://github.com/Tit1e/Demos/tree/master/50.jsTree" target="_blank" rel="noopener">参考代码</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司系统中有个菜单管理的模块，用到了 &lt;a href=&quot;https://www.jstree.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;jsTree&lt;/a&gt; 的右键菜单功能，但是有个问题，就是菜单只有两级，一级菜单允许添加子菜单，二级菜单不允许添加子菜单，这就需要根据选中的菜单渲染不同的右键菜单。网上找了一番，在 &lt;a href=&quot;https://blog.csdn.net/m0_37355951/article/details/78320254&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt; 找到了解决方法。我在自己博客再记录一次，为了加深印象，也为了日后方便查找。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>MAMP 配置虚拟主机</title>
    <link href="http://yoursite.com/2018/07/22/49.mamp-virtual-host/"/>
    <id>http://yoursite.com/2018/07/22/49.mamp-virtual-host/</id>
    <published>2018-07-22T14:16:31.000Z</published>
    <updated>2018-07-22T14:56:40.332Z</updated>
    
    <content type="html"><![CDATA[<p>公司由于项目调整，在跑本地项目的时候需要指定域名，当然可以通过配置修改这个指定的域名，但是借此机会折腾一下也好。教程网上有很多，我重新整理一下一是加深记忆，二是日后如有需要方便查找，于是有了这篇文章。参考的文章链接在文末。</p><p>MAMP 我用的是免费版的，MAMP Pro 好像可以直接在界面设置，但是免费版也是可以实现的，只是设置过程没那么简单明了，但也不是非常难。<br><a id="more"></a><br>第一步：打开 <code>/Applications/MAMP/conf/apache/httpd.conf</code></p><p>第二步：搜索 <code>httpd-vhosts</code>，定位至 <code>#Include /Applications/MAMP/conf/apache/extra/httpd-vhosts.conf</code>，删除前面的 <code>#</code>，保存。</p><p>第三步：打开 <code>/Applications/MAMP/conf/apache/extra/httpd-vhosts.conf</code>。这个文件中你可以看到被 <code>&lt;VirtualHost *:80&gt;&lt;/VirtualHost&gt;</code> 标签包裹的代码，我的是这样的，可能略微有些不同，但没关系。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="selector-tag">VirtualHost</span> *<span class="selector-pseudo">:80</span>&gt;</span><br><span class="line">    <span class="selector-tag">ServerAdmin</span> <span class="selector-tag">webmaster</span>@<span class="keyword">dummy</span>-<span class="keyword">host2</span>.<span class="keyword">example</span>.<span class="keyword">com</span></span><br><span class="line">    DocumentRoot <span class="string">"/Users/xxxx/Public/Program/dmp"</span></span><br><span class="line">    ServerName localhost</span><br><span class="line">    ServerAlias localhost</span><br><span class="line">    ErrorLog <span class="string">"logs/dummy-host2.example.com-error_log"</span></span><br><span class="line">    CustomLog <span class="string">"logs/dummy-host2.example.com-access_log"</span> common</span><br><span class="line">&lt;/VirtualHost&gt;</span><br></pre></td></tr></table></figure><p>这就是我们需要修改的配置。默认应该有个 localhost 的配置（有点忘了）。</p><p>第四步：修改 <code>DocumentRoot</code> 为这是项目目录，修改 <code>ServerName</code> 为你想设定的域名，<code>ServerAlias</code> 可以为域名设定别别名，可以不设置。保存文件。</p><p>到此 MAMP 的配置结束了，我们还需要配置 hosts 文件，将 127.0.0.1 指向我们设定的域名，不然用域名还是无法访问到。<br>Mac 上推荐使用 <a href="https://itunes.apple.com/cn/app/ihosts-%E7%BC%96%E8%BE%91%E7%A5%9E%E5%99%A8/id1102004240?mt=12" target="_blank" rel="noopener">iHosts</a> 来设置 hosts，很实用的一个小工具，免费版的足够日常使用了。当然你也可以用其他方式，具体也可以搜索引擎搜索，网上教程一大堆。</p><p>在 hosts 文件中加入 <code>127.0.0.1  配置的域名</code>，保存。重启服务器，重连一下网络即可。</p><p>用 shadowsocks 的小伙伴要注意，要把代理模式设为 PAC自动模式，全局模式会导致域名无法访问，这个问题当初找了好久才发现。</p><p><a href="https://blog.csdn.net/it_r00t/article/details/75254933" target="_blank" rel="noopener">参考地址</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司由于项目调整，在跑本地项目的时候需要指定域名，当然可以通过配置修改这个指定的域名，但是借此机会折腾一下也好。教程网上有很多，我重新整理一下一是加深记忆，二是日后如有需要方便查找，于是有了这篇文章。参考的文章链接在文末。&lt;/p&gt;
&lt;p&gt;MAMP 我用的是免费版的，MAMP Pro 好像可以直接在界面设置，但是免费版也是可以实现的，只是设置过程没那么简单明了，但也不是非常难。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
  </entry>
  
  <entry>
    <title>webpack 通过 NODE_ENV 判断当前环境</title>
    <link href="http://yoursite.com/2018/06/26/48.NODE_ENV/"/>
    <id>http://yoursite.com/2018/06/26/48.NODE_ENV/</id>
    <published>2018-06-26T11:19:39.000Z</published>
    <updated>2018-07-22T14:53:32.820Z</updated>
    
    <content type="html"><![CDATA[<p>公司开发系统过程中，因为使用了反向代理，所以在每个接口前都加了一个通用前缀，但这个前缀在生产环境下是不要加的，我之前的做法是，定义一个变量，然后在开发的时候将变量定义成通用前缀，打包的时候就将变量清空成空字符串，但是这个每次打包的时候都需要去改变，打包后继续开发又要再改回来，偶尔还会出现忘记清前缀的情况，这多多少少造成了不便。</p><a id="more"></a><p>后来从网上找到了判断环境的变量：<code>process.env.NODE_ENV</code>，这可以在 js 中直接获取到，如果它的值为 development 则说明是开发环境，否则就是生产环境，通过这个判断，我就可以用三元运算符给变量赋值，这样打包就不用每次去改吧，变量值了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司开发系统过程中，因为使用了反向代理，所以在每个接口前都加了一个通用前缀，但这个前缀在生产环境下是不要加的，我之前的做法是，定义一个变量，然后在开发的时候将变量定义成通用前缀，打包的时候就将变量清空成空字符串，但是这个每次打包的时候都需要去改变，打包后继续开发又要再改回来，偶尔还会出现忘记清前缀的情况，这多多少少造成了不便。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Mac 下为 MAMP (Pro) 安装 redis 扩展</title>
    <link href="http://yoursite.com/2018/05/12/47.mac-mamp-redis/"/>
    <id>http://yoursite.com/2018/05/12/47.mac-mamp-redis/</id>
    <published>2018-05-12T07:04:42.000Z</published>
    <updated>2018-07-15T14:02:06.686Z</updated>
    
    <content type="html"><![CDATA[<p>Mac 用户一般开本地服务器环境的时候用得比较多的就是 <a href="https://www.mamp.info/en/" target="_blank" rel="noopener">MAMP</a> 这款软件吧，指定目录，一键开启，甚至可以什么都不用配置就可以将服务跑起来。不过前阵子开发的时候，由于公司项目用了 <a href="https://redis.io/" target="_blank" rel="noopener">redis</a> ，但 MAMP 本身的 php 是不带有 redis 插件的，为了装这个东西，我折腾了好几个小时，所以在这里记录一下。<br><a id="more"></a></p><h3 id="下载-amp-解压-amp-amp-编译-PHP-源码"><a href="#下载-amp-解压-amp-amp-编译-PHP-源码" class="headerlink" title="下载 &amp; 解压 &amp;&amp; 编译 PHP 源码"></a>下载 &amp; 解压 &amp;&amp; 编译 PHP 源码</h3><p><strong>教程中将以 php 5.5.30 版本作为例子，实际操作中请将版本号做相应替换</strong></p><p>为方便下载，我在这放上下载地址，我这里的地址是 5.5.30 的 php 版本，如果需要其他版本，只需将地址中的版本号进行相应替换。<br>下载地址： <a href="http://us3.php.net/get/php-5.5.30.tar.gz/from/a/mirror" target="_blank" rel="noopener">http://us3.php.net/get/php-5.5.30.tar.gz/from/a/mirror</a></p><p>下载完成后，将源码解压至 <code>/applications/MAMP/bin/php/php5.5.30/include/php</code></p><p>cd 至源码目录，并执行：<br><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd <span class="meta-keyword">/applications/</span>MAMP<span class="meta-keyword">/bin/</span>php/php5<span class="number">.5</span><span class="number">.30</span><span class="meta-keyword">/include/</span>php</span><br><span class="line"></span><br><span class="line">./configure</span><br></pre></td></tr></table></figure></p><p>当前目录下继续操作：<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="keyword">clone</span> <span class="title">https</span>://github.com/nicolasff/phpredis.git</span><br><span class="line"></span><br><span class="line">cd phpredis</span><br></pre></td></tr></table></figure></p><p>接下来就是进行编译，但为了确保期间，建议在执行下列操作前先执行，除非你很确定你已经安装 <code>autoconf</code><br>通过 <a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">Homebrew</a> 安装</p><p><code>brew install autoconf</code></p><p>下面进行编译<br>注：此时的目录应该为<code>/applications/MAMP/bin/php/php5.5.30/include/php/phpredis</code></p><p>执行下列命令：<br><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="regexp">/Applications/</span>MAMP<span class="regexp">/bin/</span>php<span class="regexp">/php5.5.30/</span>bin/phpize</span><br><span class="line"></span><br><span class="line">.<span class="regexp">/configure --with-php-config=/</span>Applications<span class="regexp">/MAMP/</span>bin<span class="regexp">/php/</span>php5<span class="number">.5</span><span class="number">.30</span><span class="regexp">/bin/</span>php-config</span><br><span class="line"></span><br><span class="line">make</span><br></pre></td></tr></table></figure></p><p>所有命令执行完成之后，会在当前目录下生成一个 <code>modules</code> 文件夹，里面有 <code>redis.so</code>，将这个文件复制至 <code>/Applications/MAMP/bin/php/php5.5.30/lib/php/extensions/no-debug-non-zts-XXXXXXXX</code>（最后的文件夹名每个用户有所差别）。</p><p>最后，修改 <code>/Applications/MAMP/bin/php/php5.3.30/conf/php.ini</code>,在文件的 545 行加上 <code>extension=redis.so</code>，保存关闭，重启服务器。</p><p>到此，redis 扩展安装完毕。</p><h3 id="安装-redis"><a href="#安装-redis" class="headerlink" title="安装 redis"></a>安装 redis</h3><p>安装 redis 就很简单了，一句命令行搞定：<br><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">brew </span><span class="keyword">install </span>redis</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Mac 用户一般开本地服务器环境的时候用得比较多的就是 &lt;a href=&quot;https://www.mamp.info/en/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MAMP&lt;/a&gt; 这款软件吧，指定目录，一键开启，甚至可以什么都不用配置就可以将服务跑起来。不过前阵子开发的时候，由于公司项目用了 &lt;a href=&quot;https://redis.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;redis&lt;/a&gt; ，但 MAMP 本身的 php 是不带有 redis 插件的，为了装这个东西，我折腾了好几个小时，所以在这里记录一下。&lt;br&gt;
    
    </summary>
    
    
      <category term="Mac" scheme="http://yoursite.com/tags/Mac/"/>
    
      <category term="折腾笔记" scheme="http://yoursite.com/tags/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mac 创建 .htaccess 文件</title>
    <link href="http://yoursite.com/2018/05/07/46.mac-create-htaccess/"/>
    <id>http://yoursite.com/2018/05/07/46.mac-create-htaccess/</id>
    <published>2018-05-07T12:41:53.000Z</published>
    <updated>2018-05-10T14:50:16.286Z</updated>
    
    <content type="html"><![CDATA[<p>在正常情况下，Mac 不允许用户创建以 <code>.</code> 开头的为文件或文件夹，如果创建，你将得到下图中的提示信息。<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144331.png" alt><br><a id="more"></a><br>但是有时候我们又必须要创建，比如用 Apache 的服务器要重写路径，<code>.htaccess</code>文件必不可少。接下来就来说说如何创建以 <code>.</code> 开头的为文件或文件夹：<br>先打开终端，输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -boolean <span class="literal">true</span> ; killall Finder</span><br></pre></td></tr></table></figure></p><p>然后你会发现 Finder 重启了，而且可能目录中多了很多半透明的文件夹，这些都是隐藏文件或文件夹，平时是受系统保护的。现在就可以创建以 <code>.</code> 开头的文件或文件夹了，修改完成后，只要运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder AppleShowAllFiles -boolean <span class="literal">false</span> ; killall Finder</span><br></pre></td></tr></table></figure></p><p>就可以恢复原状。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在正常情况下，Mac 不允许用户创建以 &lt;code&gt;.&lt;/code&gt; 开头的为文件或文件夹，如果创建，你将得到下图中的提示信息。&lt;br&gt;&lt;img src=&quot;https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144331.png&quot; alt&gt;&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 打包静态资源路径出错</title>
    <link href="http://yoursite.com/2018/05/03/45.vue-webpack-static/"/>
    <id>http://yoursite.com/2018/05/03/45.vue-webpack-static/</id>
    <published>2018-05-03T11:53:26.000Z</published>
    <updated>2018-05-10T14:50:16.320Z</updated>
    
    <content type="html"><![CDATA[<p>今天同事整理服务器的文件结构，把页面和资源文件移动了位置，由于我之前资源引用用的是绝对路径，所以我把 <code>index.html</code> 和 <code>static</code> 文件夹都放在根目录下，结果现在一移动就出现了问题，绝对路径不能用了，那只好把打包的绝对路径改成相对路径，结果是打包生成的 <code>js</code> 、 <code>css</code> 文件引用正常了，但是图片什么静态资源路径全部出错了，然后 Google 了好久，终于在 <a href="https://blog.csdn.net/a120120yyyy/article/details/78048838" target="_blank" rel="noopener">这里</a> 找到了解决办法，就是在 <code>build/utils.js</code> 文件中，找到<code>ExtractTextPlugin.extract</code>，加上 <code>publicPath: &#39;../../&#39;</code> 就能使静态资源正确引用。<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天同事整理服务器的文件结构，把页面和资源文件移动了位置，由于我之前资源引用用的是绝对路径，所以我把 &lt;code&gt;index.html&lt;/code&gt; 和 &lt;code&gt;static&lt;/code&gt; 文件夹都放在根目录下，结果现在一移动就出现了问题，绝对路径不能用了，那只好把打包的绝对路径改成相对路径，结果是打包生成的 &lt;code&gt;js&lt;/code&gt; 、 &lt;code&gt;css&lt;/code&gt; 文件引用正常了，但是图片什么静态资源路径全部出错了，然后 Google 了好久，终于在 &lt;a href=&quot;https://blog.csdn.net/a120120yyyy/article/details/78048838&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt; 找到了解决办法，就是在 &lt;code&gt;build/utils.js&lt;/code&gt; 文件中，找到&lt;code&gt;ExtractTextPlugin.extract&lt;/code&gt;，加上 &lt;code&gt;publicPath: &amp;#39;../../&amp;#39;&lt;/code&gt; 就能使静态资源正确引用。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vue-cli" scheme="http://yoursite.com/tags/vue-cli/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 localStorage 和 sessionStorage</title>
    <link href="http://yoursite.com/2018/04/26/44.sessionStorage-localStorage/"/>
    <id>http://yoursite.com/2018/04/26/44.sessionStorage-localStorage/</id>
    <published>2018-04-26T12:52:47.000Z</published>
    <updated>2019-03-12T06:31:45.245Z</updated>
    
    <content type="html"><![CDATA[<p>说到前端的本地存储，一般人都会想到 localStorage、sessionStorage 和 Cookie。但这里我暂且不谈 cookie，来说说这两个长得比较像的。<br><a id="more"></a><br><code>localStorage</code> 是 HTML5 的新特性，用于数据的存储，但是不同于 <code>sessionStorage</code>，它的存储期限可以是无期限，只要用户不手动去清除它。而 <code>sessionStorage</code> 则在页面被关闭时就会被清除。它们可以存储的大小都为 5M。而 <code>Cookie</code> 则如它的名字，存储空间也只有小小的 4kb。</p><p>我们先来看下 <code>localStroage</code> 是个什么东西，在 chrome 的控制台直接打印，我门可以看到这些东西：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144749.png" alt></p><p>我们可以直观地看到 <code>localStroage</code> 是一个对象，并且在有一个 length 属性，先猜测它是用来表示键值对数量的，并且我们可以看到 <code>localStroage</code> 的一些 API ：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 最常用的为上面三个</span></span><br><span class="line">localStorage.setItem() <span class="comment">//设置 localStorage</span></span><br><span class="line">localStorage.getItem() <span class="comment">//读取 localStorage</span></span><br><span class="line">localStorage.removeItem() <span class="comment">//移除 localStorage</span></span><br><span class="line"></span><br><span class="line">localStorage.clear() <span class="comment">//清空 localStorage</span></span><br><span class="line">localStorage.key() <span class="comment">//获取某个位置的键名</span></span><br></pre></td></tr></table></figure></p><p>不过需要注意的是，<code>localStorage</code> 不能直接存储对象，需要先将对象转成 json 才能存储。否则你将看到这样的结果：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144803.png" alt></p><p>接下来我们来实际操作一下：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>设置<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    键：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"key"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    值：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"input"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"setValue()"</span>&gt;</span>写入<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>读取<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    键：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"getKey"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"getValue()"</span>&gt;</span>读取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    读取内容：<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"value"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h4</span>&gt;</span>清除<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">    键：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"removeKey"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"removeValue()"</span>&gt;</span>清除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 设置</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setValue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> key = <span class="built_in">document</span>.getElementById(<span class="string">'key'</span>).value</span><br><span class="line">  <span class="keyword">var</span> value = <span class="built_in">document</span>.getElementById(<span class="string">'input'</span>).value</span><br><span class="line">  localStorage.setItem(key,value)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 获取</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getValue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> getKey = <span class="built_in">document</span>.getElementById(<span class="string">'getKey'</span>).value</span><br><span class="line">  <span class="keyword">var</span> value = localStorage.getItem(getKey)</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'value'</span>).innerText = value</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 移除</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">removeValue</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> removeKey = <span class="built_in">document</span>.getElementById(<span class="string">'removeKey'</span>).value</span><br><span class="line">  localStorage.removeItem(removeKey)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码渲染出来的界面应该这这样的：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144820.png" alt></p><p>然后，在对应输入框中输入内容就可以进行操作了。<br>至于存储的内容，我们可以在控制台的 Application 中看到：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144835.png" alt></p><p>值得注意的是，如果键名相同，之前的键值会被覆盖。并且，因为这些存储的内容可以在控制台被浏览和修改，所以这里并不推荐用来存一些比较私密的信息，避免信息的泄露。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说到前端的本地存储，一般人都会想到 localStorage、sessionStorage 和 Cookie。但这里我暂且不谈 cookie，来说说这两个长得比较像的。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>你好呀，2018</title>
    <link href="http://yoursite.com/2017/12/31/43.hello-2018/"/>
    <id>http://yoursite.com/2017/12/31/43.hello-2018/</id>
    <published>2017-12-31T15:18:51.000Z</published>
    <updated>2018-05-10T14:50:16.304Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2017-回顾"><a href="#2017-回顾" class="headerlink" title="2017 回顾"></a>2017 回顾</h3><p>回顾了一下 <a href="https://tit1e.xyz/2017/01/28/hello-2017/" target="_blank" rel="noopener">2017 年的计划</a>，其实太多没有完成的，比如后端的 ThinkPHP 框架，可以说是毫无长进，不过精力倒是全放在前端上了。身体方面，开始去健身房了，不过是从 10 月份才刚开始的锻炼，到现在的话，体重略有上升，可能两三斤吧，练的部位肉的确是结实了不少。爱好方面我就不谈了，今年过的狗一样，快过年了情况才有所好转。哪来的闲钱买这个！积蓄没有，MacBook 的钱是换完了（爸妈帮我还的……）。</p><p>今年对我来说还是发生了挺多变化的一年。去年这个时候，我刚步入前端，入职 2 个月而已，然后到年后2月份的辞职，三月份的再入职，无论是哪方面，去年的这个时候和今年的这个时候都有了挺大的变化。</p><p>希望在迎接 2019 年的时候，我还是能像现在这样开心。<br><a id="more"></a></p><h3 id="2018-计划"><a href="#2018-计划" class="headerlink" title="2018 计划"></a>2018 计划</h3><ol><li>前端技能上能有大的提升（如何衡量大呢？我也不知道）</li><li>增重到130斤（是增肌，不是增脂！）</li><li>一定要买个 switch（塞尔达天下第一！）</li><li>薪水上涨 30%</li><li>攒钱</li><li>希望认识更多的人？（这个太难了）</li></ol>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2017-回顾&quot;&gt;&lt;a href=&quot;#2017-回顾&quot; class=&quot;headerlink&quot; title=&quot;2017 回顾&quot;&gt;&lt;/a&gt;2017 回顾&lt;/h3&gt;&lt;p&gt;回顾了一下 &lt;a href=&quot;https://tit1e.xyz/2017/01/28/hello-2017/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;2017 年的计划&lt;/a&gt;，其实太多没有完成的，比如后端的 ThinkPHP 框架，可以说是毫无长进，不过精力倒是全放在前端上了。身体方面，开始去健身房了，不过是从 10 月份才刚开始的锻炼，到现在的话，体重略有上升，可能两三斤吧，练的部位肉的确是结实了不少。爱好方面我就不谈了，今年过的狗一样，快过年了情况才有所好转。哪来的闲钱买这个！积蓄没有，MacBook 的钱是换完了（爸妈帮我还的……）。&lt;/p&gt;
&lt;p&gt;今年对我来说还是发生了挺多变化的一年。去年这个时候，我刚步入前端，入职 2 个月而已，然后到年后2月份的辞职，三月份的再入职，无论是哪方面，去年的这个时候和今年的这个时候都有了挺大的变化。&lt;/p&gt;
&lt;p&gt;希望在迎接 2019 年的时候，我还是能像现在这样开心。&lt;br&gt;
    
    </summary>
    
    
      <category term="新年计划" scheme="http://yoursite.com/tags/%E6%96%B0%E5%B9%B4%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>vuex的简单使用教程</title>
    <link href="http://yoursite.com/2017/12/26/42.vuex-use/"/>
    <id>http://yoursite.com/2017/12/26/42.vuex-use/</id>
    <published>2017-12-26T13:11:39.000Z</published>
    <updated>2018-05-10T14:50:16.306Z</updated>
    
    <content type="html"><![CDATA[<p>公司数据平台现在的规模已经有点大了，考虑到以后，可能会出现数据共享的问题，所以我先粗略了解一下<code>vuex</code>以备不时之需。<br>首先安装<code>vuex</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#生产环境中也需要使用</span></span><br><span class="line">npm install vuex --save</span><br></pre></td></tr></table></figure></p><a id="more"></a><p><code>src</code>目录下新建<code>vuex</code>目录</p><p>vuex文件夹下新建<code>store.js</code><br>先在<code>store.js</code>中写入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(Vuex)</span><br><span class="line"><span class="comment">//state用于存储数据</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  count: <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//mutations用于声明方法</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  add(state,n) &#123;</span><br><span class="line">    state.count += n</span><br><span class="line">  &#125;,</span><br><span class="line">  reduce(state,n) &#123;</span><br><span class="line">    state.count -= n</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//getters用于监听，比如数据变化时执行某个函数</span></span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    <span class="comment">//count变化时就会执行</span></span><br><span class="line">    count: <span class="function"><span class="params">state</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">console</span>.log(state.count)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//actions类似于mutations，但actions可以异步执行</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  addAction(&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'add'</span>,<span class="number">1</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  reduceAction(&#123; commit &#125;) &#123;</span><br><span class="line">    commit(<span class="string">'reduce'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//暴露这些对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">  state,</span><br><span class="line">  mutations,</span><br><span class="line">  getters,</span><br><span class="line">  actions</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>组件中使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tempate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        &#123;&#123; count &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add(10)"</span>&gt;</span>-<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"reduce(10)"</span>&gt;</span>+<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../vuex/store'</span></span><br><span class="line"><span class="comment">//使用这种方式引入后，可以像平时一样使用store从的值与方法，其实还有另外两种调用方法，但我个人喜欢这种，这也是最简单的写法，所以另外两种我就不赘述了。</span></span><br><span class="line"><span class="keyword">import</span> &#123; mapState,mapMutations,mapGetters,mapActions &#125; <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    store,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...mapState([<span class="string">'count'</span>]),</span><br><span class="line">        ...mapGetters([<span class="string">'count'</span>])</span><br><span class="line">      &#125;,</span><br><span class="line">      methods:&#123;</span><br><span class="line">        ...mapMutations([<span class="string">'add'</span>,<span class="string">'reduce'</span>]),</span><br><span class="line">        ...mapActions([<span class="string">'addAction'</span>,<span class="string">'reduceAction'</span>])</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司数据平台现在的规模已经有点大了，考虑到以后，可能会出现数据共享的问题，所以我先粗略了解一下&lt;code&gt;vuex&lt;/code&gt;以备不时之需。&lt;br&gt;首先安装&lt;code&gt;vuex&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;#生产环境中也需要使用&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;npm install vuex --save&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vuex" scheme="http://yoursite.com/tags/vuex/"/>
    
  </entry>
  
  <entry>
    <title>局域网请求 webpack 反向代理</title>
    <link href="http://yoursite.com/2017/12/21/41.webpack-dev-server/"/>
    <id>http://yoursite.com/2017/12/21/41.webpack-dev-server/</id>
    <published>2017-12-21T12:15:47.000Z</published>
    <updated>2018-05-10T14:50:16.289Z</updated>
    
    <content type="html"><![CDATA[<p>今天继续在公司思考关于前后端分离的问题，困扰我最大的问题其实就是我用 vue-cli 在本地开发的时候，怎么和后端进行接口的调试，总不可能每次都打包一下放到服务器上看运行正不正常，有没有报错吧？我知道有个反向代理的东西，可是知道它的大致作用，但是我没用过导致我无从下手，但前段时间折腾模拟数据的时候，有用到用<code>json-server</code>和<code>faker.js</code>本地开服务器，批量生成模拟数据，然后通过反向代理去请求本地另一个服务器的数据。于是我想，既然这样我可以请求到数据，那么局域网的话我也可以直接通过 ip 直接访问局域网内的服务器，那么我应该也可以通过代理去请求局域网上内其他同事开的本地服务器中的接口，于是就开始折腾了。<br><a id="more"></a><br>由于之前去请求模拟数据的时候，代理配置是写在<code>/config/index.js</code>中的，于是我依样画葫芦，把之前的配置的地址，路径全改了，但结果却发现请求一只 404 ，这就让我很难受了，于是我去 Google 了一圈，原来这个代理是用的<code>webpack-dev-server</code>，于是我找到了<code>/build/webpack.dev.conf.js</code>,按照网上说的，在<code>devServer</code>中添加了一个<code>proxy</code>属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">proxy: &#123;</span><br><span class="line">  <span class="string">'/Home'</span>: &#123;</span><br><span class="line">    target: <span class="string">'http://192.168.1.1/'</span>,</span><br><span class="line">    secure: <span class="literal">false</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这样，我就成功通过代理请求到了同事服务器上的数据。</p><p>突然想起来了，利用<code>json-server</code>和<code>faker.js</code>模拟数据的过程还没记录，下篇文章记录一下。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天继续在公司思考关于前后端分离的问题，困扰我最大的问题其实就是我用 vue-cli 在本地开发的时候，怎么和后端进行接口的调试，总不可能每次都打包一下放到服务器上看运行正不正常，有没有报错吧？我知道有个反向代理的东西，可是知道它的大致作用，但是我没用过导致我无从下手，但前段时间折腾模拟数据的时候，有用到用&lt;code&gt;json-server&lt;/code&gt;和&lt;code&gt;faker.js&lt;/code&gt;本地开服务器，批量生成模拟数据，然后通过反向代理去请求本地另一个服务器的数据。于是我想，既然这样我可以请求到数据，那么局域网的话我也可以直接通过 ip 直接访问局域网内的服务器，那么我应该也可以通过代理去请求局域网上内其他同事开的本地服务器中的接口，于是就开始折腾了。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>element-theme 配合 vue-cli 进行二次开发</title>
    <link href="http://yoursite.com/2017/12/20/40.element-theme-develop-twice/"/>
    <id>http://yoursite.com/2017/12/20/40.element-theme-develop-twice/</id>
    <published>2017-12-20T07:38:03.000Z</published>
    <updated>2018-05-10T14:50:16.308Z</updated>
    
    <content type="html"><![CDATA[<p>公司新平台我打算使用<code>element-ui</code>和<code>vue-cli</code>来开发，既然用的是现成的ui，那么就涉及到ui的定制问题，虽然是一个后台项目，并且让设计参照<code>element-ui</code>的文档去作图，但是设计不可能照搬默认主题，不在组件功能上修改，但在主题配色上肯定会进行调整。虽然官方有 <a href="https://elementui.github.io/theme-chalk-preview/#/zh-CN" target="_blank" rel="noopener">在线主题生成工具</a> ，但这个工具只能修改一个整体的主题色，连按钮的颜色都无法定制，更不用说定制圆角阴影这些效果了，所以还是要自己改文件编译才能实现最大化定制。折腾过程中遇到了点问题，在此记录一下。</p><p>官方也提供了定制的 <a href="https://github.com/ElementUI/element-theme" target="_blank" rel="noopener">文档</a> ，那当然是相信官方，照着官方的教程来！<br><a id="more"></a></p><h4 id="安装element-theme"><a href="#安装element-theme" class="headerlink" title="安装element-theme"></a>安装<code>element-theme</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#只在当前项目安装</span></span><br><span class="line">npm i element-theme -D</span><br><span class="line"></span><br><span class="line"><span class="comment">#全局安装</span></span><br><span class="line">sudo npm i element-theme -g</span><br></pre></td></tr></table></figure><p>然而我第一步就报错了……ORZ。</p><p>我使用的是<code>npm</code>命令，但源用的是淘宝的源。但安装的时候报错：<code>not found python2</code>。于是我去找安装<code>python2</code>的方法，结果发现 Mac 是默认集成了<code>python</code>的，那我就郁闷了，试了半天，一直报错，最后突发奇想想用<code>cnpm</code>试试，结果竟然成功了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#终于装上了</span></span><br><span class="line">sudo cnpm i element-theme -g</span><br></pre></td></tr></table></figure></p><p>好，继续。</p><h4 id="安装-theme-chalk"><a href="#安装-theme-chalk" class="headerlink" title="安装 theme-chalk"></a>安装 <code>theme-chalk</code></h4><p>因为我一开始构思的定制流程是在其他目录下把样式写好编译后到现有项目中替换，所以我就建了一个空文件夹，然后执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i element-theme-chalk -D</span><br></pre></td></tr></table></figure></p><p>结果当然是提醒我找不到<code>package.json</code>文件。后来我望着命令中的<code>-D</code>若有所思……，终于反应过来了，这是装在项目中的。</p><p>好，顺利安装，继续。</p><h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化</span></span><br><span class="line">et -i</span><br></pre></td></tr></table></figure><p>执行完后会在根目录下生成一个<code>element-variables.scss</code>的文件。然后你就可以在这个文件中修改主题色，按钮颜色，圆角，阴影等这些样式，修改好了之后，就可以编译了。</p><h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 监听并编译</span></span><br><span class="line">et --watch [--config variable file path] [--out theme path]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译</span></span><br><span class="line">et [--config variable file path] [--out theme path] [--minimize]</span><br></pre></td></tr></table></figure><p><code>et --watch</code>可以监听<code>element-variables.scss</code>文件。如果文件被修改了，那么就会自动进行编译。</p><p><code>et --config 文件路径/element-variables.scss</code>这个命令是可以指定<code>element-variables.scss</code>的路径，因为这个文件不一定放在项目根目录下。</p><p><code>et --out 目录</code>这个命令是指定编译后的文件输出目录，默认是输出在根目录下的<code>theme</code>文件夹中。</p><p>但这就会产生一个文件替换问题，每次编译后都需要手动替换文件，之后才能看效果。所以我直接把输出路径改成了项目引用的<code>element-ui</code>的路径：<code>node_modules/element-ui/lib/theme-chalk/</code>，这样配合<code>-w</code>就可以实现实时编译，再配合<code>npm run dev</code>就可以实时编译实时预览了。</p><p>如果还需要更深度的定制，则修改 <code>node_modules/element-theme-chalk/src/</code> 目录下的的<code>.scss</code>文件，然后执行编译后就能生效。注意直接修改<code>.scss</code>文件不会触发自动编译。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司新平台我打算使用&lt;code&gt;element-ui&lt;/code&gt;和&lt;code&gt;vue-cli&lt;/code&gt;来开发，既然用的是现成的ui，那么就涉及到ui的定制问题，虽然是一个后台项目，并且让设计参照&lt;code&gt;element-ui&lt;/code&gt;的文档去作图，但是设计不可能照搬默认主题，不在组件功能上修改，但在主题配色上肯定会进行调整。虽然官方有 &lt;a href=&quot;https://elementui.github.io/theme-chalk-preview/#/zh-CN&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在线主题生成工具&lt;/a&gt; ，但这个工具只能修改一个整体的主题色，连按钮的颜色都无法定制，更不用说定制圆角阴影这些效果了，所以还是要自己改文件编译才能实现最大化定制。折腾过程中遇到了点问题，在此记录一下。&lt;/p&gt;
&lt;p&gt;官方也提供了定制的 &lt;a href=&quot;https://github.com/ElementUI/element-theme&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;文档&lt;/a&gt; ，那当然是相信官方，照着官方的教程来！&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="element-ui" scheme="http://yoursite.com/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>css 实现圆角平行四边形</title>
    <link href="http://yoursite.com/2017/12/17/39.radio-rhomboid/"/>
    <id>http://yoursite.com/2017/12/17/39.radio-rhomboid/</id>
    <published>2017-12-17T13:31:07.000Z</published>
    <updated>2018-05-10T14:50:16.303Z</updated>
    
    <content type="html"><![CDATA[<p>公司管理平台首页改版中有个圆角平行四边形的标签页。由于以前没接触到过这个，没什么经验，所以我只好求助万能的 google ，但是我用关键字“css 圆角平行四边形”并没有搜出答案来，于是我退而求其次，那就搜“css 平行四边形”，这个我有把握 100% 能用 强大的css 实现，果然一搜就出现了：<a href="https://www.w3cplus.com/css3/css-secrets/parallelograms.html" target="_blank" rel="noopener">CSS秘密花园：平行四边形</a>。<br><a id="more"></a><br>实现代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.button</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">skewX</span>(-30deg);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, #7BBBB2, #46AEAA); </span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">5px</span> <span class="number">10px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.5);</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.button</span> &gt; <span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">skewX</span>(30deg);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    首页</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    采集管理</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    数据管理</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>简单来说就是利用css的<code>transform: skewX(deg)</code>属性来实现元素的扭曲，但是元素扭曲的同时，会使元素内的内容也随之扭曲，所以就需要用另一个元素把不想扭曲的元素包裹起来，然后对外层使用扭曲，内层元素再使用反向扭曲来抵消，一次来实现效果。然后我又给外层元素添加了<code>border-radios</code>，于是圆角平行四边形就诞生啦！</p><p>效果图：<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-05-10-144722.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司管理平台首页改版中有个圆角平行四边形的标签页。由于以前没接触到过这个，没什么经验，所以我只好求助万能的 google ，但是我用关键字“css 圆角平行四边形”并没有搜出答案来，于是我退而求其次，那就搜“css 平行四边形”，这个我有把握 100% 能用 强大的css 实现，果然一搜就出现了：&lt;a href=&quot;https://www.w3cplus.com/css3/css-secrets/parallelograms.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;CSS秘密花园：平行四边形&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>v-charts 实现柱状图渐变效果</title>
    <link href="http://yoursite.com/2017/12/17/38.v-charts-bar/"/>
    <id>http://yoursite.com/2017/12/17/38.v-charts-bar/</id>
    <published>2017-12-17T13:03:48.000Z</published>
    <updated>2018-05-10T14:50:16.318Z</updated>
    
    <content type="html"><![CDATA[<p>其实在考虑使用<code>echarts</code>之前我还考虑过使用饿了么的<code>v-charts</code>，但后来考虑到实际情况，还是使用了没有经过二次封装的<code>echarts</code>。虽然没有最终没有使用<code>v-charts</code>，但还是记录一下。</p><p><code>v-charts</code>的使用方法<a href="https://elemefe.github.io/v-charts/#/" target="_blank" rel="noopener"> 官方文档 </a>讲得已经比较详细了，但我的需求有个柱状图使用渐变色的需求，这里没有详细讲，但其实运行报错已经说得很清楚了。<br>首先安装<code>v-charts</code><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm <span class="selector-tag">i</span> v-charts -S</span><br></pre></td></tr></table></figure></p><p>在<code>main.js</code>引入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> VCharts <span class="keyword">from</span> <span class="string">'v-charts'</span></span><br><span class="line">Vue.use(VCharts)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>如果这时候你去组件里写入以下代码并运行：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ve-histogram</span> <span class="attr">:data</span>=<span class="string">"chartData"</span> <span class="attr">:settings</span>=<span class="string">"chartSettings"</span>&gt;</span><span class="tag">&lt;/<span class="name">ve-histogram</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.chartData = &#123;</span><br><span class="line">      columns: [<span class="string">"日期"</span>, <span class="string">"成本"</span>, <span class="string">"利润"</span>, <span class="string">"占比"</span>, <span class="string">"其他"</span>],</span><br><span class="line">      rows: [</span><br><span class="line">        &#123; 日期: <span class="string">"1月1日"</span>, 成本: <span class="number">1523</span>, 利润: <span class="number">1523</span>, 占比: <span class="number">0.12</span>, 其他: <span class="number">100</span> &#125;,</span><br><span class="line">        &#123; 日期: <span class="string">"1月2日"</span>, 成本: <span class="number">1223</span>, 利润: <span class="number">1921</span>, 占比: <span class="number">0.345</span>, 其他: <span class="number">100</span> &#125;,</span><br><span class="line">        &#123; 日期: <span class="string">"1月3日"</span>, 成本: <span class="number">2123</span>, 利润: <span class="number">5523</span>, 占比: <span class="number">0.7</span>, 其他: <span class="number">100</span> &#125;,</span><br><span class="line">        &#123; 日期: <span class="string">"1月4日"</span>, 成本: <span class="number">4123</span>, 利润: <span class="number">6523</span>, 占比: <span class="number">0.31</span>, 其他: <span class="number">100</span> &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">this</span>.chartSettings = &#123;</span><br><span class="line">      metrics: [<span class="string">"成本"</span>],</span><br><span class="line">      itemStyle: &#123;</span><br><span class="line">        normal: &#123;</span><br><span class="line">          color: <span class="keyword">new</span> echarts.graphic.LinearGradient(</span><br><span class="line">            <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</span><br><span class="line">            [</span><br><span class="line">              &#123;<span class="attr">offset</span>: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">'#83bff6'</span>&#125;,</span><br><span class="line">              &#123;<span class="attr">offset</span>: <span class="number">0.5</span>, <span class="attr">color</span>: <span class="string">'#188df0'</span>&#125;,</span><br><span class="line">              &#123;<span class="attr">offset</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">'#188df0'</span>&#125;</span><br><span class="line">            ]</span><br><span class="line">          )</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>控制台会报错：”<strong>echarts is not defined</strong>“。所以解决方法很明显，只要引入<code>echarts</code>就行了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts/lib/echarts'</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实在考虑使用&lt;code&gt;echarts&lt;/code&gt;之前我还考虑过使用饿了么的&lt;code&gt;v-charts&lt;/code&gt;，但后来考虑到实际情况，还是使用了没有经过二次封装的&lt;code&gt;echarts&lt;/code&gt;。虽然没有最终没有使用&lt;code&gt;v-charts&lt;/code&gt;，但还是记录一下。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v-charts&lt;/code&gt;的使用方法&lt;a href=&quot;https://elemefe.github.io/v-charts/#/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt; 官方文档 &lt;/a&gt;讲得已经比较详细了，但我的需求有个柱状图使用渐变色的需求，这里没有详细讲，但其实运行报错已经说得很清楚了。&lt;br&gt;首先安装&lt;code&gt;v-charts&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm &lt;span class=&quot;selector-tag&quot;&gt;i&lt;/span&gt; v-charts -S&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;main.js&lt;/code&gt;引入&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; VCharts &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;v-charts&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vue.use(VCharts)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 使用 ECharts 水球图</title>
    <link href="http://yoursite.com/2017/12/17/37.vue-cli-use-echarts-liquidfill/"/>
    <id>http://yoursite.com/2017/12/17/37.vue-cli-use-echarts-liquidfill/</id>
    <published>2017-12-17T12:14:50.000Z</published>
    <updated>2018-05-10T14:50:16.305Z</updated>
    
    <content type="html"><![CDATA[<p>公司有个平台有改版的打算，UI 出了首页的设计稿，我看了下，大致构思了一下，打算用 vue 和 Element-UI 来写。前阵子刚忙完，这几天比较空，我就看着 UI 稿在想实现方式，其中一个是水球图。这篇先记录一下 vue-cli 中生成水球图的方法。<br><a id="more"></a><br>首先<code>npm</code>包下载必不可少：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//安装 ECharts</span></span><br><span class="line">npm install echarts</span><br><span class="line"><span class="comment">//安装 水球图插件</span></span><br><span class="line">npm install echarts-liquidfill</span><br></pre></td></tr></table></figure></p><p>随后在<code>.vue</code>文件中引入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">"echarts"</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">"echarts-liquidfill/src/liquidFill.js"</span>;</span><br></pre></td></tr></table></figure></p><p>之后就该怎么用就怎么用。可以参考 <a href="http://gallery.echartsjs.com/editor.html?c=liquidfill-basic" target="_blank" rel="noopener">官方例子</a> ，也可以参考 echarts-liquidfill 的 <a href="https://github.com/ecomfe/echarts-liquidfill" target="_blank" rel="noopener">github</a> 文档。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司有个平台有改版的打算，UI 出了首页的设计稿，我看了下，大致构思了一下，打算用 vue 和 Element-UI 来写。前阵子刚忙完，这几天比较空，我就看着 UI 稿在想实现方式，其中一个是水球图。这篇先记录一下 vue-cli 中生成水球图的方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 引入全局 scss 文件</title>
    <link href="http://yoursite.com/2017/12/14/36.vue-import-sass-global/"/>
    <id>http://yoursite.com/2017/12/14/36.vue-import-sass-global/</id>
    <published>2017-12-14T14:11:52.000Z</published>
    <updated>2018-05-10T14:50:16.315Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>我们平时在使用 vue-cli 开发项目的时候，写 css 会用到预处理器来提高 css 的编写效率。我们在使用 sass 的时候一般会先在一个全局的<code>.scss</code>文件中定义好一些颜色变量或其他变量，然后在需要用的这些变量的组件内把这个文件通过<code>@import</code>的方式引入，然后就可以使用文件中定义的变量了。但是这也出现一个问题，因为这个文件中定义的都是比较通用的变量，所以几乎每个<code>.vue</code>文件几乎都会将它引入，当组件多了之后，没次要引入这个文件就显得累赘，而且如果这个文件换了路径，那维护起来就比较麻烦，还容易出错。所以最好就是一个地方配置后，全局都可以直接使用，这样是最高效，也是最容易维护的。于是我在网上找了一圈，试了网上的 N 多方法，终于在 <a href="https://segmentfault.com/q/1010000008731809" target="_blank" rel="noopener">这里</a> 找到了我能用的方法，而且配置简单。<br><a id="more"></a></p><h4 id="使用sass，这两个包是前提"><a href="#使用sass，这两个包是前提" class="headerlink" title="使用sass，这两个包是前提:"></a>使用<code>sass</code>，这两个包是前提:</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install <span class="keyword">node</span><span class="title">-sass</span> --save-dev</span><br><span class="line">npm install sass-loader --save-dev</span><br></pre></td></tr></table></figure><h4 id="要全局引用-scss还需要安装sass-resources-loader"><a href="#要全局引用-scss还需要安装sass-resources-loader" class="headerlink" title="要全局引用.scss还需要安装sass-resources-loader"></a>要全局引用<code>.scss</code>还需要安装<code>sass-resources-loader</code></h4><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install sass-resources-loader --<span class="built_in">save</span>-<span class="built_in">dev</span></span><br></pre></td></tr></table></figure><h4 id="修改-build-utils-js，在return中新增如下代码"><a href="#修改-build-utils-js，在return中新增如下代码" class="headerlink" title="修改/build/utils.js，在return中新增如下代码"></a>修改<code>/build/utils.js</code>，在<code>return</code>中新增如下代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">scss: generateLoaders(<span class="string">'sass'</span>).concat(</span><br><span class="line">  &#123;</span><br><span class="line">    loader: <span class="string">'sass-resources-loader'</span>,</span><br><span class="line">    options: &#123;</span><br><span class="line">      <span class="comment">//你要引入的 .scss 文件的路径</span></span><br><span class="line">      resources: path.resolve(__dirname, <span class="string">'../src/assets/your.scss'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>完成以上步骤后，你就可以在<code>&lt;style lang=&quot;scss&quot;&gt;</code>标签中直接使用先前定义好的变量了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;我们平时在使用 vue-cli 开发项目的时候，写 css 会用到预处理器来提高 css 的编写效率。我们在使用 sass 的时候一般会先在一个全局的&lt;code&gt;.scss&lt;/code&gt;文件中定义好一些颜色变量或其他变量，然后在需要用的这些变量的组件内把这个文件通过&lt;code&gt;@import&lt;/code&gt;的方式引入，然后就可以使用文件中定义的变量了。但是这也出现一个问题，因为这个文件中定义的都是比较通用的变量，所以几乎每个&lt;code&gt;.vue&lt;/code&gt;文件几乎都会将它引入，当组件多了之后，没次要引入这个文件就显得累赘，而且如果这个文件换了路径，那维护起来就比较麻烦，还容易出错。所以最好就是一个地方配置后，全局都可以直接使用，这样是最高效，也是最容易维护的。于是我在网上找了一圈，试了网上的 N 多方法，终于在 &lt;a href=&quot;https://segmentfault.com/q/1010000008731809&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a&gt; 找到了我能用的方法，而且配置简单。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
</feed>
