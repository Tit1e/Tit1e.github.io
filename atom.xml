<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tit1e</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Tit1e/"/>
  <updated>2020-12-31T14:09:26.978Z</updated>
  <id>https://github.com/Tit1e/</id>
  
  <author>
    <name>Tit1e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>你好啊 2021</title>
    <link href="https://github.com/Tit1e/2020/12/30/145-hello-2021/"/>
    <id>https://github.com/Tit1e/2020/12/30/145-hello-2021/</id>
    <published>2020-12-30T14:01:06.000Z</published>
    <updated>2020-12-31T14:09:26.978Z</updated>
    
    <content type="html"><![CDATA[<p>虽然标题写的是 2021，但实际上这篇是 2020 年的回顾。</p><p>回顾 2020，才发现疫情已经伴随了我一整年，年初遭遇疫情时的恐慌明明还历历在目。</p><p>因为疫情，第一次体验了在家办公。这可是正儿八经的在家办公，不是我平时请了假，结果还是被同事找上门然后在家改 bug。2月19日返回杭州，看见了不一样的杭州，平常热闹的街道冷冷清清，明明已经过了返工的日子，沿街的店铺却都还紧紧闭着。</p><p>因为疫情，年初动森的发售直接让动森与 switch 火出了圈。我心血来潮还开发了一个小程序，从数据爬取，界面设计，后端服务搭建，接口编写，域名申请等一整套的部署流程，全都自己一人折腾了个遍。</p><p>整个过程下来，收获颇丰。这个小程序用到的技术栈：</p><ul><li>uni-app</li><li>Node.js</li><li>Mysql</li><li>Nginx</li></ul><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-28-animalCrossingCode.jpg" alt></p><p>7月26日我拿到了自己人生中的第一台相机📷：黑色的富士的 XT-20。虽然是二手，虽然我更想要银色，但我很是很喜欢它。前段时间刚上线了我的摄影站：<a href="https://album.animalcrossing.life/" target="_blank" rel="noopener">Tit1e’s Photo Studio</a>。项目立项很早，但是一直拖拖拉拉，好在赶上了 2020 的尾巴。</p><p>8月份的时候，跟小伙伴去了趟成都，4天下来，我最喜欢的地方是人民公园。点杯茶，可以在那坐上一整天。成都的生活节奏，令人向往，可惜我只是个过客。</p><p>整年下来，最重要的事是 11月初摇中了号，那次是开盘以来摇中概率最低的一次。销售发消息恭喜我的时候，我的心情不知道怎么形容，大概是忧大于喜。但是现在，我内心早已是期待它早日交房，我可以住进去。</p><p>在现在公司呆了 4 年，住的地方也 3 年多没搬过家，一直就是这样，不温不火。明年初打算跳出这个并不舒适的舒适圈，换个新环境，所以打算年后辞职。最近想到这个事情心里总是激动，一点不在怕，我觉得是时候了。</p><p>明年有目标吗？没有。最希望的大概是脱单。另外希望自己明年能拍更多照片，摄影技术能有所提升。不过提升技术这种目标过于虚无，因为我觉得我的审美不足以让我判断出我的技术是否有提升。</p><p>《生之响往》是我今年发现的宝藏歌曲。这首歌绝望中透露着希望。我喜欢许嵩的原因就是他传达给我的就是这种思想。而这首歌也有着同样的表达。这世界很糟糕，但这世界也很美好，但要心怀希望。</p><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=2&id=554241255&auto=0&height=66"></iframe><blockquote><p><strong>小心安命，埋头任事</strong> ——曾国藩</p><p>小心谨慎安于天命，埋头做事不问其他。</p></blockquote><p>这是今年许嵩在一次直播中送给一位粉丝的建议。安于天命并不是认命，而是找到自己的定位，知道自己能做什么，适合做什么，然后努力去做。我觉得这是一个贯穿人一生的课题。</p><p>当我听到这句话以及它所表达的意思后，我觉得我终于找到了可以概括我处世态度的文字。</p><p>最后是对自己说的话：<strong>希望在接下去的人生中永远心怀希望，安命，任事</strong>。</p><p><strong>滚蛋吧，2020！</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;虽然标题写的是 2021，但实际上这篇是 2020 年的回顾。&lt;/p&gt;
&lt;p&gt;回顾 2020，才发现疫情已经伴随了我一整年，年初遭遇疫情时的恐慌明明还历历在目。&lt;/p&gt;
&lt;p&gt;因为疫情，第一次体验了在家办公。这可是正儿八经的在家办公，不是我平时请了假，结果还是被同事找上门然
      
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/Tit1e/tags/%E9%9A%8F%E7%AC%94/"/>
    
      <category term="年终总结" scheme="https://github.com/Tit1e/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>nginx http 重定向至 https</title>
    <link href="https://github.com/Tit1e/2020/12/30/144-http-to-https/"/>
    <id>https://github.com/Tit1e/2020/12/30/144-http-to-https/</id>
    <published>2020-12-30T13:21:12.000Z</published>
    <updated>2020-12-30T13:57:20.456Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>超文本传输安全协议</strong>（英语：<strong>H</strong>yper<strong>T</strong>ext <strong>T</strong>ransfer <strong>P</strong>rotocol <strong>S</strong>ecure，缩写：<strong>HTTPS</strong>；常称为HTTP over TLS、HTTP over SSL或HTTP Secure）是一种通过<a href="https://zh.wikipedia.org/wiki/計算機網絡" target="_blank" rel="noopener">计算机网络</a>进行安全通信的<a href="https://zh.wikipedia.org/wiki/網路傳輸協定" target="_blank" rel="noopener">传输协议</a>。HTTPS经由<a href="https://zh.wikipedia.org/wiki/HTTP" target="_blank" rel="noopener">HTTP</a>进行通信，但利用<a href="https://zh.wikipedia.org/wiki/传输层安全" target="_blank" rel="noopener">SSL/TLS</a>来<a href="https://zh.wikipedia.org/wiki/加密" target="_blank" rel="noopener">加密</a>数据包。HTTPS开发的主要目的，是提供对<a href="https://zh.wikipedia.org/wiki/網站" target="_blank" rel="noopener">网站</a>服务器的<a href="https://zh.wikipedia.org/wiki/身份验证" target="_blank" rel="noopener">身份认证</a>，保护交换资料的隐私与<a href="https://zh.wikipedia.org/wiki/完整性" target="_blank" rel="noopener">完整性</a>。——摘自维基百科</p></blockquote><p>https 目前已经愈发普及，所以我也为自己的<a href="https://album.animalcrossing.life/" target="_blank" rel="noopener">摄影网站</a>申请了 https 证书。如何申请证书可以参考我的这篇博客：<a href="https://evolly.one/2020/12/15/137-freessl/" target="_blank" rel="noopener">为域名申请免费 https 证书</a>。</p><p>证书申请完了，https 的 Nginx 配置也配置完了，用 https 开头的 URL 也可以访问到网站了，但是发现只有完整打上带 https 的地址才能正确访问到网站，如果用 http 访问，会发现访问的是另一个网站。但平时浏览比如百度谷歌等一些地址时，我们只要输入域名，访问的时候默认访问的就是 https 的网站，哪怕你访问的是 http 的地址，最后也会自动跳转至 https。路由的重定向其实 Nginx 很容易就可以做到，只要加几行配置就可以了。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#加上这段配置</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">    <span class="attribute">server_name</span> xxx.xxxxxxx.xxx;</span><br><span class="line">    <span class="attribute">return</span> <span class="number">301</span> https://<span class="variable">$server_name</span><span class="variable">$request_uri</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">#正常的https配置</span></span><br><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">    <span class="attribute">listen</span> <span class="number">443</span> ssl;</span><br><span class="line">    <span class="attribute">server_name</span> xxx.xxxxxxx.xxx;</span><br><span class="line">    <span class="attribute">ssl_certificate</span> /xxx/xx.crt;</span><br><span class="line">    <span class="attribute">ssl_certificate_key</span> /xxx/xx.key;</span><br><span class="line">    <span class="attribute">root</span> /xxx/web;</span><br><span class="line">    <span class="attribute">index</span> index.html;</span><br><span class="line">    <span class="attribute">location</span> / &#123;</span><br><span class="line">      <span class="attribute">proxy_pass</span> http://127.0.0.1:8888;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这段配置我也同步到了<a href="https://evolly.one/2020/12/15/137-freessl/" target="_blank" rel="noopener">为域名申请免费 https 证书</a>。</p><p>然后重启 Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;超文本传输安全协议&lt;/strong&gt;（英语：&lt;strong&gt;H&lt;/strong&gt;yper&lt;strong&gt;T&lt;/strong&gt;ext &lt;strong&gt;T&lt;/strong&gt;ransfer &lt;strong&gt;P&lt;/strong&gt;rotoco
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="Nginx" scheme="https://github.com/Tit1e/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>express 静态资源代理</title>
    <link href="https://github.com/Tit1e/2020/12/29/143-express-static/"/>
    <id>https://github.com/Tit1e/2020/12/29/143-express-static/</id>
    <published>2020-12-29T12:35:23.000Z</published>
    <updated>2020-12-29T13:08:31.310Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子在搭建我的<a href="https://album.animalcrossing.life/" target="_blank" rel="noopener">摄影网站</a>，等我跑起了后端服务，要布前端页面的时候，突然想到我还需要布个前端的服务，但实际前端只是需要访问一个 index.html 文件，单独跑项目又没有必要，于是我网上查了，因为我觉得这种情况一定有人遇到过，并且肯定会有成熟的解决方案。因为我用的是 express，于是我带着 express 的关键字搜索了一下，果然，express 就提供这种服务，称为 express 静态资源代理。</p><p>使用也很简单，无非就是在原有的代码上增加一行：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>);</span><br><span class="line">app.use(express.static(path.join(__dirname, <span class="string">'web'</span>)));</span><br></pre></td></tr></table></figure><p>web 是我放前端文件的目录，并且我写这行代码的所在文件与 web 目录都在统一层级，并且都是根目录，所以我路径就使用了__dirname。然后重启一下服务，代理就生效了，直接访问<a href="https://album.animalcrossing.life" target="_blank" rel="noopener">https://album.animalcrossing.life</a>访问到的就是我部署的前端 index.html 文件了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前阵子在搭建我的&lt;a href=&quot;https://album.animalcrossing.life/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;摄影网站&lt;/a&gt;，等我跑起了后端服务，要布前端页面的时候，突然想到我还需要布个前端的服务，但实际前端只是需
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 爬虫初步实践</title>
    <link href="https://github.com/Tit1e/2020/12/28/142-node-spider/"/>
    <id>https://github.com/Tit1e/2020/12/28/142-node-spider/</id>
    <published>2020-12-28T13:15:19.000Z</published>
    <updated>2020-12-29T01:20:22.423Z</updated>
    
    <content type="html"><![CDATA[<p>今年年初的时候动森因为本身的影响力加上疫情的原因，在全球大火，很多原本都不知道 Switch 是什么的人，都因为动森入了Switch，当时 Switch 价格一度被炒了上去，动森限定版更是翻了倍。可见其火热程度。</p><p>而我那时候也加入的动森大部队，并且加了群，大家在群里聊得热火朝天，各种摸，各种报价格，卖大头菜。那时候我就想着做一个“菜市场”小程序，方便大家卖大头菜。但等我开发出第一版的时候，卖大头菜的热度已经下去了，我就失去了开发的动力。后来在查动森信息的时候，无意间发现了 B 站的<a href="https://wiki.biligame.com/dongsen/%E9%A6%96%E9%A1%B5" target="_blank" rel="noopener">动森 WIKI 页</a>。于是我又转念一想，不如爬它数据做个图鉴吧！不过此时的心态完全是为了写爬虫练手，因为当时已经有很多成熟的图鉴app、小程序出现，我就不凑这个热闹了。</p><p>下面是小程序码，欢迎可以扫码体验。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-28-animalCrossingCode.jpg" alt></p><p>言归正传，下面是以<a href="https://wiki.biligame.com/dongsen/%E5%B0%8F%E5%8A%A8%E7%89%A9%E5%9B%BE%E9%89%B4" target="_blank" rel="noopener">动森小动物图鉴</a>页面为目标，写一个简易爬虫。</p><p>安装一些插件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># npm 初始化</span></span><br><span class="line">npm init -y</span><br><span class="line"><span class="comment"># 安装插件</span></span><br><span class="line">npm i superagent cheerio</span><br></pre></td></tr></table></figure><ul><li>superagent 是 node 环境下的 http 模块，可用来发器请求，稍后用来请求页面</li><li>cheerio 模块可以解析页面，然后可以使用与 jQuery 相同的语法来操作 DOM</li></ul><p>新建入口文件 <code>index.js</code></p><p>封装请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// getContent.js</span></span><br><span class="line"><span class="keyword">const</span> BASE_URL = <span class="string">'https://wiki.biligame.com'</span>;</span><br><span class="line"><span class="keyword">const</span> superagent = <span class="built_in">require</span>(<span class="string">"superagent"</span>);</span><br><span class="line"><span class="keyword">const</span> cheerio = <span class="built_in">require</span>(<span class="string">"cheerio"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取页面内容方法</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; query 爬取的页面后缀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getContent</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    superagent.get(<span class="string">`<span class="subst">$&#123;BASE_URL&#125;</span>/dongsen/<span class="subst">$&#123;query&#125;</span>`</span>).end(<span class="function">(<span class="params">err, sres</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">return</span> reject(err)</span><br><span class="line">      &#125;</span><br><span class="line">      resolve(cheerio.load(sres.text));</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  getContent</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在编写爬取代码前我们要对页面做一个分析：</p><p>这是我们要爬取的目标页面</p><p><a href="https://wiki.biligame.com/dongsen/小动物图鉴" target="_blank" rel="noopener">https://wiki.biligame.com/dongsen/小动物图鉴</a></p><p>这是我们要爬取的目标</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-28-141903.png" alt></p><p>每个小动物点击名字可进入详情页：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-28-142155.png" alt></p><p>可以看到详情页中信息比列表上的更为丰富，我们要想办法爬取详情页中的信息。所以需要去获取列表上 a 标签的地址，然后再去获取详情中的动物信息。</p><p>所以思路如下：</p><ol><li>首先请求列表页</li><li>获取列表中的所有小动物的项</li><li>循环项取出每项名字，获取名字上的a链接地址，拼接出完整路径</li><li>通过完整路径获取小动物的详细信息</li><li>写入数据</li></ol><p>思路清晰后那么开始编写代码，编辑 <code>index.js</code>：</p><p>首先我们要爬取所有小动物的数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 爬取小动物页面</span></span><br><span class="line"><span class="comment"> * @param &#123;Date&#125; update_time 爬虫执行时间，非必须</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; url 小动物页面的后缀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getAnimals</span>(<span class="params">update_time, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $ = <span class="keyword">await</span> getContent(url)</span><br><span class="line">  <span class="comment">// 获取列表中的所有项</span></span><br><span class="line">  <span class="keyword">const</span> nodes = $(<span class="string">"#CardSelectTr tbody tr"</span>)</span><br><span class="line">  <span class="comment">// 小动物详情页后缀，其实就是名字</span></span><br><span class="line">  <span class="keyword">const</span> animals = []</span><br><span class="line">  <span class="keyword">const</span> LENGTH = nodes.length</span><br><span class="line"> <span class="comment">// 第 0 项是表头，所以索引从 1 开始</span></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; LENGTH; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> $element = $(nodes[i]);</span><br><span class="line">    <span class="comment">// 列表中有一项错误项，需要排除</span></span><br><span class="line">    <span class="keyword">if</span> ($element.find(<span class="string">'td'</span>).eq(<span class="number">0</span>).find(<span class="string">'a'</span>).text() !== <span class="string">'40pxString'</span>) &#123;</span><br><span class="line">      <span class="comment">// 获取小动物链接后缀</span></span><br><span class="line">      <span class="keyword">const</span> url = $element.find(<span class="string">'td'</span>).eq(<span class="number">0</span>).find(<span class="string">'a'</span>).attr(<span class="string">'href'</span>).substr(<span class="number">9</span>)</span><br><span class="line">      animals.push(url)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 删除 animals.txt，开始获取数据前，清除旧数据</span></span><br><span class="line">  fs.unlink(<span class="string">'animals.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 为了按列表顺序获取小动物信息，我使用了递归</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  getInfo(animals, index, animalInfo, update_time)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>getAnimals</code> 方法最后使用了 <code>getInfo</code> 递归函数，那么接下来编写 <code>getInfo</code>，依旧是在 <code>index.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">"os"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">list, index, func, update_time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = list[index];</span><br><span class="line">  <span class="keyword">let</span> otherInfo = &#123;&#125;;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    otherInfo = <span class="keyword">await</span> func(name).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &lt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">        index += <span class="number">1</span>;</span><br><span class="line">        getInfo(list, index, func, update_time);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 出错跳过进入下一个小动物</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">      index += <span class="number">1</span>;</span><br><span class="line">      getInfo(list, index, func, update_time);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// os.EOL 用于换行 http://nodejs.cn/api/os/os_eol.html</span></span><br><span class="line">  <span class="comment">// 获取到数据后写入 animals.txt</span></span><br><span class="line">  fs.appendFile(<span class="string">"animals.txt"</span>, <span class="built_in">JSON</span>.stringify(otherInfo) + os.EOL, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &lt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">        index += <span class="number">1</span>;</span><br><span class="line">        getInfo(list, index, func, update_time);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归方法也写好了，接下来就是真正获取小动物数据的方法，还是在 <code>index.js</code>：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; getContent &#125; = <span class="built_in">require</span>(<span class="string">'./getContent.js'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取小动物信息</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; url 小动物页面后缀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">animalInfo</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> $ = <span class="keyword">await</span> getContent(url).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject()</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="comment">// 定义小动物各项信息的字段</span></span><br><span class="line">      <span class="keyword">const</span> list = [<span class="string">'birthday'</span>, <span class="string">'character'</span>, <span class="string">'mantra'</span>, <span class="string">'hobby'</span>, <span class="string">'style'</span>, <span class="string">'color'</span>, <span class="string">'vioce'</span>, <span class="string">'ethnicity'</span>, <span class="string">'motto'</span>, <span class="string">'foreign_name'</span>]</span><br><span class="line">      <span class="keyword">const</span> nodes = $(<span class="string">".box-poke-left .box-poke"</span>)</span><br><span class="line">      <span class="keyword">const</span> str = $(<span class="string">".box-poke-left .box-title-1"</span>).text()</span><br><span class="line">      <span class="keyword">const</span> name = str.substr(<span class="number">0</span>, str.length <span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">const</span> sex = str.substr(<span class="number">-1</span>) === <span class="string">'♂'</span> ? <span class="string">'男'</span> : <span class="string">'女'</span></span><br><span class="line">      <span class="keyword">const</span> image = $(<span class="string">".box-poke-right"</span>).find(<span class="string">'img'</span>).attr(<span class="string">'src'</span>)</span><br><span class="line">      <span class="keyword">const</span> info = &#123;</span><br><span class="line">        name,</span><br><span class="line">        sex,</span><br><span class="line">        image,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> attr = list[i]</span><br><span class="line">        <span class="keyword">const</span> text = nodes.eq(i).find(<span class="string">'.box-font'</span>).text()</span><br><span class="line">        <span class="keyword">if</span> (attr === <span class="string">'birthday'</span>) &#123;</span><br><span class="line">          <span class="comment">// 处理小动物的信息，也可以不处理</span></span><br><span class="line">          info[attr] = text.replace(<span class="string">'月'</span>, <span class="string">'-'</span>).replace(<span class="string">'日'</span>, <span class="string">''</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          info[attr] = text</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      info.birth_month = info.birthday.split(<span class="string">'-'</span>).shift()</span><br><span class="line">      resolve(info)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(url + <span class="string">'出错啦'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后，在 <code>index.js</code> 最后执行方法</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">const</span> query = <span class="built_in">encodeURIComponent</span>(<span class="string">'小动物图鉴'</span>)</span><br><span class="line">getAnimals(now, query)</span><br></pre></td></tr></table></figure><p>完整的 <code>index.js</code> ：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">const</span> os = <span class="built_in">require</span>(<span class="string">"os"</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; getContent &#125; = <span class="built_in">require</span>(<span class="string">'./getContent.js'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getInfo</span>(<span class="params">list, index, func, update_time</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> name = list[index];</span><br><span class="line">  <span class="keyword">let</span> otherInfo = &#123;&#125;;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    otherInfo = <span class="keyword">await</span> func(name).catch(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &lt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">        index += <span class="number">1</span>;</span><br><span class="line">        getInfo(list, index, func, update_time);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">    <span class="comment">// 出错跳过进入下一个小动物</span></span><br><span class="line">    <span class="keyword">if</span> (index &lt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">      index += <span class="number">1</span>;</span><br><span class="line">      getInfo(list, index, func, update_time);</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// os.EOL 用于换行 http://nodejs.cn/api/os/os_eol.html</span></span><br><span class="line">  fs.appendFile(<span class="string">"animals.txt"</span>, <span class="built_in">JSON</span>.stringify(otherInfo) + os.EOL, (err) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (index &lt; list.length - <span class="number">1</span>) &#123;</span><br><span class="line">        index += <span class="number">1</span>;</span><br><span class="line">        getInfo(list, index, func, update_time);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取小动物信息</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; url 小动物页面后缀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">animalInfo</span>(<span class="params">url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> $ = <span class="keyword">await</span> getContent(url).catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">        reject()</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">const</span> list = [<span class="string">'birthday'</span>, <span class="string">'character'</span>, <span class="string">'mantra'</span>, <span class="string">'hobby'</span>, <span class="string">'style'</span>, <span class="string">'color'</span>, <span class="string">'vioce'</span>, <span class="string">'ethnicity'</span>, <span class="string">'motto'</span>, <span class="string">'foreign_name'</span>]</span><br><span class="line">      <span class="keyword">const</span> nodes = $(<span class="string">".box-poke-left .box-poke"</span>)</span><br><span class="line">      <span class="keyword">const</span> str = $(<span class="string">".box-poke-left .box-title-1"</span>).text()</span><br><span class="line">      <span class="keyword">const</span> name = str.substr(<span class="number">0</span>, str.length <span class="number">-1</span>)</span><br><span class="line">      <span class="keyword">const</span> sex = str.substr(<span class="number">-1</span>) === <span class="string">'♂'</span> ? <span class="string">'男'</span> : <span class="string">'女'</span></span><br><span class="line">      <span class="keyword">const</span> image = $(<span class="string">".box-poke-right"</span>).find(<span class="string">'img'</span>).attr(<span class="string">'src'</span>)</span><br><span class="line">      <span class="keyword">const</span> info = &#123;</span><br><span class="line">        name,</span><br><span class="line">        sex,</span><br><span class="line">        image,</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; list.length; i++)&#123;</span><br><span class="line">        <span class="keyword">const</span> attr = list[i]</span><br><span class="line">        <span class="keyword">const</span> text = nodes.eq(i).find(<span class="string">'.box-font'</span>).text()</span><br><span class="line">        <span class="keyword">if</span> (attr === <span class="string">'birthday'</span>) &#123;</span><br><span class="line">          info[attr] = text.replace(<span class="string">'月'</span>, <span class="string">'-'</span>).replace(<span class="string">'日'</span>, <span class="string">''</span>)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          info[attr] = text</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      info.birth_month = info.birthday.split(<span class="string">'-'</span>).shift()</span><br><span class="line">      resolve(info)</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      reject(url + <span class="string">'出错啦'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 爬取小动物页面</span></span><br><span class="line"><span class="comment"> * @param &#123;Date&#125; update_time 爬虫执行时间，非必须</span></span><br><span class="line"><span class="comment"> * @param &#123;*&#125; url 小动物页面的后缀</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">getAnimals</span>(<span class="params">update_time, url</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> $ = <span class="keyword">await</span> getContent(url)</span><br><span class="line">  <span class="keyword">const</span> nodes = $(<span class="string">"#CardSelectTr tbody tr"</span>)</span><br><span class="line">  <span class="keyword">const</span> animals = []</span><br><span class="line">  <span class="keyword">const</span> LENGTH = nodes.length</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; LENGTH; i++)&#123;</span><br><span class="line">    <span class="keyword">let</span> $element = $(nodes[i]);</span><br><span class="line">    <span class="keyword">if</span> ($element.find(<span class="string">'td'</span>).eq(<span class="number">0</span>).find(<span class="string">'a'</span>).text() !== <span class="string">'40pxString'</span>) &#123;</span><br><span class="line">      <span class="comment">// 获取小动物链接后缀</span></span><br><span class="line">      <span class="keyword">const</span> url = $element.find(<span class="string">'td'</span>).eq(<span class="number">0</span>).find(<span class="string">'a'</span>).attr(<span class="string">'href'</span>).substr(<span class="number">9</span>)</span><br><span class="line">      animals.push(url)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 删除 animals.txt，开始获取数据前，清除旧数据</span></span><br><span class="line">  fs.unlink(<span class="string">'animals.txt'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (error) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="comment">// 递归获取信息</span></span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  getInfo(animals, index, animalInfo, update_time)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们爬取的页面是 https://wiki.biligame.com/dongsen/%E5%B0%8F%E5%8A%A8%E7%89%A9%E5%9B%BE%E9%89%B4</span></span><br><span class="line"><span class="keyword">const</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>()</span><br><span class="line"><span class="keyword">const</span> query = <span class="built_in">encodeURIComponent</span>(<span class="string">'小动物图鉴'</span>)</span><br><span class="line">getAnimals(now, query)</span><br></pre></td></tr></table></figure><p>运行爬虫：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>不出意外会在根目录下生成一个 animals.txt 文件。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-28-145321.png" alt></p><p><a href="https://github.com/Tit1e/Demos/tree/master/142.node-spider">源码查看</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今年年初的时候动森因为本身的影响力加上疫情的原因，在全球大火，很多原本都不知道 Switch 是什么的人，都因为动森入了Switch，当时 Switch 价格一度被炒了上去，动森限定版更是翻了倍。可见其火热程度。&lt;/p&gt;
&lt;p&gt;而我那时候也加入的动森大部队，并且加了群，大家
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="node" scheme="https://github.com/Tit1e/tags/node/"/>
    
  </entry>
  
  <entry>
    <title>pm2 基础使用指南</title>
    <link href="https://github.com/Tit1e/2020/12/24/141-pm2/"/>
    <id>https://github.com/Tit1e/2020/12/24/141-pm2/</id>
    <published>2020-12-24T06:18:09.000Z</published>
    <updated>2020-12-24T07:00:15.999Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Unitech/pm2">pm2</a> 我想用 Node.js 在服务器上搭过服务的应该都知道。因为正常情况跑 node 服务需要在终端执行 <code>node inde.js</code> 命令，而服务器我们一般是使用终端通过 SSH 远程连接，我们不可能一直保持与服务器的连接，也不可能一直开着运行服务的终端窗口，所以我们需要一个工具来帮忙挂着这个服务，pm2 就是这么个工具。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install pm2 -g</span><br></pre></td></tr></table></figure><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><h4 id="启动某个服务"><a href="#启动某个服务" class="headerlink" title="启动某个服务"></a>启动某个服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --watch 表示：服务文件发生变化时，pm2会自动帮你重启服务</span></span><br><span class="line">pm2 start app.js --watch</span><br><span class="line">以 xxx 为命名启动进程</span><br><span class="line">pm2 start app.js --watch --name xxx</span><br></pre></td></tr></table></figure><h4 id="查看启动中的服务"><a href="#查看启动中的服务" class="headerlink" title="查看启动中的服务"></a>查看启动中的服务</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 list</span><br></pre></td></tr></table></figure><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-24-063206.png" alt></p><h4 id="停止某个或全部服务"><a href="#停止某个或全部服务" class="headerlink" title="停止某个或全部服务"></a>停止某个或全部服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pm2 stop name || id || <span class="string">'all'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如我要停止上图中名为 JinYa 的这个服务</span></span><br><span class="line">pm2 stop JinYa</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">pm2 stop 2</span><br><span class="line"><span class="comment"># 如果停止全部</span></span><br><span class="line">pm2 stop all</span><br></pre></td></tr></table></figure><h4 id="重启某个或全部服务"><a href="#重启某个或全部服务" class="headerlink" title="重启某个或全部服务"></a>重启某个或全部服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pm2 restart name || id || <span class="string">'all'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如我要重启上图中名为 JinYa 的这个服务</span></span><br><span class="line">pm2 restart JinYa</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">pm2 restart 2</span><br><span class="line"><span class="comment"># 如果停止全部</span></span><br><span class="line">pm2 restart all</span><br></pre></td></tr></table></figure><h4 id="删除某个或全部服务"><a href="#删除某个或全部服务" class="headerlink" title="删除某个或全部服务"></a>删除某个或全部服务</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">pm2 delete name || id || <span class="string">'all'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 比如我要重启上图中名为 JinYa 的这个服务</span></span><br><span class="line">pm2 delete JinYa</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">pm2 delete 2</span><br><span class="line"><span class="comment"># 如果停止全部</span></span><br><span class="line">pm2 delete all</span><br></pre></td></tr></table></figure><h4 id="查看某个服务的描述"><a href="#查看某个服务的描述" class="headerlink" title="查看某个服务的描述"></a>查看某个服务的描述</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 describe name || id</span><br></pre></td></tr></table></figure><p>如果服务器上有十几甚至几十个服务，那么一个一个启动就显得十分繁琐，所以 pm2 也可以通过配置文件启动。</p><h4 id="通过配置文件批量启动"><a href="#通过配置文件批量启动" class="headerlink" title="通过配置文件批量启动"></a>通过配置文件批量启动</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 创建一个名为 server.json 的文件</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"apps"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      "name": "server1", // 服务名称</span><br><span class="line">      "script": "./xxx/index.js", // 服务入口文件路径</span><br><span class="line">      "watch": true // 监听服务，服务发生变化时自动重启</span><br><span class="line">    &#125;,</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="attr">"name"</span>: <span class="string">"server2"</span>,</span><br><span class="line">      <span class="attr">"script"</span>: <span class="string">"./xxx/app.js"</span>,</span><br><span class="line">      <span class="attr">"watch"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start server.json</span><br></pre></td></tr></table></figure><p>上面 <code>stop</code>、<code>restar</code>、<code>delete</code> 命令其实都可通过 json 文件来批量执行。</p><h4 id="查看进程资源消耗情况"><a href="#查看进程资源消耗情况" class="headerlink" title="查看进程资源消耗情况"></a>查看进程资源消耗情况</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 monit</span><br></pre></td></tr></table></figure><p>上面这些命令只是一些我在日常使用中经常用到的基础命令，pm2 这个工具所能做的远远不止这些。它还可以做负载均衡，内存监控等其他很多事情，只是我的应用场景没用那么复杂，所以并没有深入了解这些功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/Unitech/pm2&quot;&gt;pm2&lt;/a&gt; 我想用 Node.js 在服务器上搭过服务的应该都知道。因为正常情况跑 node 服务需要在终端执行 &lt;code&gt;node inde.js&lt;/code&gt; 命令，而服务器我们一般
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>用快捷指令快速打开支付码、扫一扫或支付宝指定小程序</title>
    <link href="https://github.com/Tit1e/2020/12/23/140-alipay-shortcuts/"/>
    <id>https://github.com/Tit1e/2020/12/23/140-alipay-shortcuts/</id>
    <published>2020-12-23T05:26:57.000Z</published>
    <updated>2020-12-24T02:13:49.454Z</updated>
    
    <content type="html"><![CDATA[<p>首先说说使用快捷指令打开支付码、扫一扫等功能的好处，因为在ios14下，支付宝自带的小组件就有这个功能。</p><ol><li>小组件上的功能是固定的，无法自定义。</li><li>小组件样式不一定符合用户审美（至少不符合我的审美，不然我也不会写这篇文章）。</li><li>小组件占用屏幕空间大，降低了屏幕的使用效率。</li></ol><p>这是支付宝小组件的效果：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-23-IMG_7334.jpg?imageMogr2/thumbnail/!40p" alt></p><p>只是使用快捷指令的效果，图上的付款码，扫一扫和叮嗒出行都是支付宝的功能快捷指令化：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-23-IMG_7335.jpg?imageMogr2/thumbnail/!40p" alt></p><p>使用效果如下：</p><div id="dplayer1" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer1"),"video":{"url":"https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-23-140-alipay-shortcuts.mp4","pic":"https://photo-album-1251959693.cos.ap-nanjing.myqcloud.com/video-poster.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>可以看出使用效果上并没有太大的差别，都是点击图标都直接进入扫码界面，没有多余的步骤。</p><h2 id="实现过程"><a href="#实现过程" class="headerlink" title="实现过程"></a>实现过程</h2><p>实现这个效果很简单</p><ol><li>新建一个快捷指令</li><li>打开指定 url</li><li>保存并添加到桌面</li></ol><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-23-IMG_7336.png?imageMogr2/thumbnail/!40p" alt></p><p>如何将快捷指令发送到桌面可以参考<a href="https://evolly.one/2020/12/17/138-ios-desktop/" target="_blank" rel="noopener">桌面美化</a>这篇文章。</p><p>上面途中展示的扫一扫的链接，我这里还有一些其他的功能链接，有需要自取。</p><ul><li><p>健康码: alipays://platformapi/startapp?appId=2021001139676873</p></li><li><p>微信扫码: weixin://scanqrcode</p></li><li><p>支付宝扫一扫: alipayqr://platformapi/startapp?saId=10000007</p></li><li><p>支付宝付款码: alipayqr://platformapi/startapp?saId=20000056</p></li><li><p>支付宝收款码: alipayqr://platformapi/startapp?saId=20000123</p></li><li><p>支付宝乘车码: alipayqr://platformapi/startapp?saId=200011235</p></li><li><p>支付宝查快递: alipays://platformapi/startapp?appId=20000754</p></li><li><p>蚂蚁庄园: alipays://platformapi/startapp?appId=66666674</p></li><li><p>蚂蚁森林： alipays://platformapi/startapp?appId=60000002</p></li></ul><p>上面这些都是现成的，但仔细观察可以发现上面这些链接中，其实不一样的只是地址中的 appId不同，其他都是一样的，所以是不是只要有应用的 appId，就可以通过这种方式实现快速打开应用？</p><p>的确可以，比如我自己做了一个叮嗒出行的快捷方式，这是一个支付宝内嵌的小程序，支付宝也支持添加桌面书签，但这种方式会在打开过程中做一次跳转，体验非常差。</p><p>下面说一下提取程序中的 appId 的方式：</p><ol><li><p>在支付宝中打开要添加的程序，点击程序右上角的三个点，在下方弹出功能菜单。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-23-IMG_7340-1.png?imageMogr2/thumbnail/!40p" alt></p></li><li><p>点击下方的【添加到桌面】这时小程序会在浏览器打开一个页面，上面会有添加到桌面的教程。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-23-IMG_7341.jpg?imageMogr2/thumbnail/!40p" alt></p></li><li><p>复制浏览器地址</p></li><li><p>从地址中提取 appId</p></li></ol><p>这时我复制出来的地址：</p><p><code>https://render.alipay.com/p/s/shortcut/index?appId=2018110161946659&amp;appName=叮嗒出行&amp;appIcon=https://appstoreisvpic.alipayobjects.com/prod/f38acc92-21a5-48be-9a66-8a69474b672a.png@120w.png</code></p><p>地址中的 <code>appId=2018110161946659</code> 这串 appId 就是我们要找的。</p><p>找到这串 id 后，我们把 id 跟前面的的那串地址拼到一起 <code>alipays://platformapi/startapp?appId=2018110161946659</code>，然后在快捷指令中新建一个指令就完成了。</p><p>看一下原来的打开方式跟用快捷指令打开的区别：</p><div id="dplayer2" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer2"),"video":{"url":"https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-23-140-alipay-shortcuts2.mp4","pic":"https://photo-album-1251959693.cos.ap-nanjing.myqcloud.com/video-poster.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>微信如果可以拿到 appId 也可以使用这种方式操作。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先说说使用快捷指令打开支付码、扫一扫等功能的好处，因为在ios14下，支付宝自带的小组件就有这个功能。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;小组件上的功能是固定的，无法自定义。&lt;/li&gt;
&lt;li&gt;小组件样式不一定符合用户审美（至少不符合我的审美，不然我也不会写这篇文章）。&lt;/li&gt;
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>js 上传文件至腾讯云对象存储</title>
    <link href="https://github.com/Tit1e/2020/12/19/139-upload-tencent-cloud/"/>
    <id>https://github.com/Tit1e/2020/12/19/139-upload-tencent-cloud/</id>
    <published>2020-12-19T14:43:25.000Z</published>
    <updated>2020-12-19T15:59:26.276Z</updated>
    
    <content type="html"><![CDATA[<p>今天终于把自己的摄影展示网站发布到了线上。<a href="https://album.animalcrossing.life" target="_blank" rel="noopener">查看网站</a></p><p>这个网站整体并不复杂，但是其中也有不少值得记录的难点，比如从前端上传文件至腾讯云的对象存储，公司业务中我使用过七牛的云存储，腾讯的还从未接触过。本以为应该跟七牛的差不多，但没想到我费了好大的力气各种看文档、看别人的博客才成功上传。</p><p>吐槽一句腾讯的文档写的真的好差。</p><p>下面分享一下我的上传配置及流程：</p><p>整个流程需要前端和后端的配合，所以代码会分为前端代码与后端代码两个部分，下面我会注明。后端我用的是 Node.js。</p><h2 id="上传流程说明"><a href="#上传流程说明" class="headerlink" title="上传流程说明"></a>上传流程说明</h2><p>上传的整体流程大概是这样：</p><p>1、上传前，前端发起请求向服务器发起请求获取上传的临时密钥</p><p>2、服务器端收到请求，通过腾讯官方的 sdk 计算出临时密钥并返回给前端</p><p>3、前端获取到临时密钥，获取选择的文件，计算 md5 值作为文件名（这样相同文件就不会重复上传）</p><p>4、通过官方的 sdk 进行上传，在回调中处理上传后的逻辑</p><p>##后端代码 Node.js</p><p>基础的服务运行环境我就不做展开了，只讲获取临时密钥的过程。</p><p>首先需要安装 qcloud-cos-sts 依赖：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install qcloud-cos-sts --save</span><br></pre></td></tr></table></figure><p>然后就是在你请求的方法文件中编写代码，个人视不同请求而定：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这是我的文件 upload.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引入依赖</span></span><br><span class="line"><span class="keyword">const</span> STS = <span class="built_in">require</span>(<span class="string">'qcloud-cos-sts'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义配置项</span></span><br><span class="line"><span class="comment">// 密钥可从腾讯云控制台的【API密钥管理】中获取：https://console.cloud.tencent.com/cam/capi</span></span><br><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">  secretId: <span class="string">'你的固定密钥'</span>, <span class="comment">// 替换你的固定密钥</span></span><br><span class="line">  secretKey: <span class="string">'你的固定密钥'</span>, <span class="comment">// 替换你的固定密钥</span></span><br><span class="line">  proxy: <span class="string">''</span>,</span><br><span class="line">  durationSeconds: <span class="number">6000</span>, <span class="comment">// 密钥有效期</span></span><br><span class="line">  <span class="comment">// 放行判断相关参数</span></span><br><span class="line">  bucket: <span class="string">'bucket名字'</span>, <span class="comment">// 换成你的 bucket</span></span><br><span class="line">  region: <span class="string">'bucket 地区'</span>, <span class="comment">// 换成 bucket 所在地区</span></span><br><span class="line">  allowPrefix: <span class="string">'*'</span>, <span class="comment">// 这里改成允许的路径前缀，可以根据自己网站的用户登录态判断允许上传的具体路径，例子： a.jpg 或者 a/* 或者 * (使用通配符*存在重大安全风险, 请谨慎评估使用)</span></span><br><span class="line">  allowActions: [</span><br><span class="line">    <span class="comment">// 所有 action 请看文档 https://cloud.tencent.com/document/product/436/31923</span></span><br><span class="line">    <span class="comment">// 简单上传</span></span><br><span class="line">    <span class="string">'name/cos:PutObject'</span>,</span><br><span class="line">    <span class="string">'name/cos:PostObject'</span>,</span><br><span class="line">    <span class="comment">// 分片上传</span></span><br><span class="line">    <span class="string">'name/cos:sliceUploadFile'</span>,</span><br><span class="line">    <span class="string">'name/cos:InitiateMultipartUpload'</span>,</span><br><span class="line">    <span class="string">'name/cos:ListMultipartUploads'</span>,</span><br><span class="line">    <span class="string">'name/cos:ListParts'</span>,</span><br><span class="line">    <span class="string">'name/cos:UploadPart'</span>,</span><br><span class="line">    <span class="string">'name/cos:CompleteMultipartUpload'</span>,</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我用的是express，所以接口方法这样写，最外层的方法无所谓，每个人都不一样，主要是里面的内容</span></span><br><span class="line"></span><br><span class="line">router.get(<span class="string">'/upload/sts'</span>, (req, res) =&gt; &#123;</span><br><span class="line">  <span class="comment">// 获取临时密钥</span></span><br><span class="line">  <span class="keyword">const</span> shortBucketName = config.bucket.substr(<span class="number">0</span>, config.bucket.lastIndexOf(<span class="string">'-'</span>));</span><br><span class="line">  <span class="keyword">const</span> appId = config.bucket.substr(<span class="number">1</span> + config.bucket.lastIndexOf(<span class="string">'-'</span>));</span><br><span class="line">  <span class="keyword">const</span> policy = &#123;</span><br><span class="line">    version: <span class="string">'2.0'</span>,</span><br><span class="line">    statement: [&#123;</span><br><span class="line">      action: config.allowActions,</span><br><span class="line">      effect: <span class="string">'allow'</span>,</span><br><span class="line">      principal: &#123; <span class="attr">qcs</span>: [<span class="string">'*'</span>] &#125;,</span><br><span class="line">      resource: [</span><br><span class="line">        <span class="string">`qcs::cos:<span class="subst">$&#123;config.region&#125;</span>:uid/<span class="subst">$&#123;appId&#125;</span>:prefix//<span class="subst">$&#123;appId&#125;</span>/<span class="subst">$&#123;shortBucketName&#125;</span>/<span class="subst">$&#123;config.allowPrefix&#125;</span>`</span>,</span><br><span class="line">      ],</span><br><span class="line">    &#125;],</span><br><span class="line">  &#125;;</span><br><span class="line">  STS.getCredential(&#123;</span><br><span class="line">    secretId: config.secretId,</span><br><span class="line">    secretKey: config.secretKey,</span><br><span class="line">    proxy: config.proxy,</span><br><span class="line">    durationSeconds: config.durationSeconds,</span><br><span class="line">    policy,</span><br><span class="line">  &#125;, (err, tempKeys) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> result = err || tempKeys || <span class="string">''</span>;</span><br><span class="line">    res.json(<span class="keyword">new</span> Result(&#123; <span class="attr">data</span>: result &#125;));</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>存储桶的相关信息可以在控制台的存储桶的【概览】中查看。</p><p>注意：<strong>存储桶所在地域只需括号中的内容，不需要中文</strong>。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-19-153605.png" alt></p><p>后端计算临时密钥的方法就是以上这些了。</p><h2 id="前端代码"><a href="#前端代码" class="headerlink" title="前端代码"></a>前端代码</h2><p>在配置文件中定义好基础信息</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/utils/cosConf.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">  Bucket: <span class="string">''</span>, <span class="comment">// Bucket 名称</span></span><br><span class="line">  Region: <span class="string">''</span>, <span class="comment">// Bucket 地域</span></span><br><span class="line">  Domain: <span class="string">''</span>, <span class="comment">// Bucket 访问域名</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后安装以下依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install cos-js-sdk-v5 spark-md5 --save</span><br></pre></td></tr></table></figure><p>具体上传代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> COS <span class="keyword">from</span> <span class="string">'cos-js-sdk-v5'</span>;</span><br><span class="line"><span class="keyword">import</span> SparkMD5 <span class="keyword">from</span> <span class="string">'spark-md5'</span>;</span><br><span class="line"><span class="comment">// 这个方法是文章中上面写的获取临时密钥的请求方法</span></span><br><span class="line"><span class="keyword">import</span> &#123; sts &#125; <span class="keyword">from</span> <span class="string">'@/api/upload'</span>;</span><br><span class="line"><span class="comment">// 上面定义的基础信息</span></span><br><span class="line"><span class="keyword">import</span> cosConfig <span class="keyword">from</span> <span class="string">'./cosConf'</span>;</span><br><span class="line"><span class="keyword">let</span> key = <span class="string">''</span>;</span><br><span class="line"><span class="comment">// 配置</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化实例</span></span><br><span class="line"><span class="keyword">const</span> cos = <span class="keyword">new</span> COS(&#123;</span><br><span class="line">  <span class="keyword">async</span> getAuthorization(options, callback) &#123;</span><br><span class="line">    <span class="comment">// 获取临时密钥</span></span><br><span class="line">    <span class="keyword">const</span> res = <span class="keyword">await</span> sts();</span><br><span class="line">    <span class="keyword">const</span> authdata = res.data;</span><br><span class="line">    <span class="keyword">const</span> auth = &#123;</span><br><span class="line">      TmpSecretId: authdata.credentials.tmpSecretId,</span><br><span class="line">      TmpSecretKey: authdata.credentials.tmpSecretKey,</span><br><span class="line">      XCosSecurityToken: authdata.credentials.sessionToken,</span><br><span class="line">      ExpiredTime: authdata.expiredTime, <span class="comment">// 在ExpiredTime时间前，不会再次调用getAuthorization</span></span><br><span class="line">    &#125;;</span><br><span class="line">    callback(auth);</span><br><span class="line">  &#125;,</span><br><span class="line">  FileParallelLimit: <span class="number">3</span>, <span class="comment">// 文件并发数</span></span><br><span class="line">  ChunkParallelLimit: <span class="number">8</span>, <span class="comment">// 同一个上传文件的分块并发数</span></span><br><span class="line">  ChunkSize: <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">8</span>, <span class="comment">// 分块上传时，每块的字节数大小</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获得文件md5</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getFileMD5</span>(<span class="params">file, callback</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 声明必要的变量</span></span><br><span class="line">  <span class="keyword">const</span> fileReader = <span class="keyword">new</span> FileReader();</span><br><span class="line">  <span class="comment">// 文件每块分割2M，计算分割详情</span></span><br><span class="line">  <span class="keyword">const</span> chunkSize = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>;</span><br><span class="line">  <span class="keyword">const</span> chunks = <span class="built_in">Math</span>.ceil(file.size / chunkSize);</span><br><span class="line">  <span class="keyword">let</span> currentChunk = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 创建md5对象（基于SparkMD5）</span></span><br><span class="line">  <span class="keyword">const</span> spark = <span class="keyword">new</span> SparkMD5();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 每块文件读取完毕之后的处理</span></span><br><span class="line">  fileReader.onload = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 每块交由sparkMD5进行计算</span></span><br><span class="line">    spark.appendBinary(e.target.result);</span><br><span class="line">    currentChunk += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果文件处理完成计算MD5，如果还有分片继续处理</span></span><br><span class="line">    <span class="keyword">if</span> (currentChunk &lt; chunks) &#123;</span><br><span class="line">      <span class="comment">// eslint-disable-next-line no-use-before-define</span></span><br><span class="line">      loadNext();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      callback(spark.end());</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 处理单片文件的上传</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">loadNext</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> start = currentChunk * chunkSize;</span><br><span class="line">    <span class="keyword">const</span> end = start + chunkSize &gt;= file.size ? file.size : start + chunkSize;</span><br><span class="line"></span><br><span class="line">    fileReader.readAsBinaryString(file.slice(start, end));</span><br><span class="line">  &#125;</span><br><span class="line">  loadNext();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 小文件直接上传-通过putObject上传</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadFile</span>(<span class="params">file, callback, progressBc</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 得到md5码</span></span><br><span class="line">  getFileMD5(file, (md5) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 存储文件的md5码</span></span><br><span class="line">    file.md5 = md5;</span><br><span class="line">    <span class="keyword">const</span> subfix = file.name.substr(file.name.lastIndexOf(<span class="string">'.'</span>));</span><br><span class="line">    key = process.env.VUE_APP_BUCKET_PATH + file.md5 + subfix;</span><br><span class="line">    cos.putObject(&#123;</span><br><span class="line">      Bucket: cosConfig.Bucket,</span><br><span class="line">      Region: cosConfig.Region,</span><br><span class="line">      Key: key,</span><br><span class="line">      Body: file,</span><br><span class="line">      onProgress(progressData) &#123;</span><br><span class="line">        <span class="comment">// 上传进度</span></span><br><span class="line">        progressBc(progressData.percent);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;, (err, data) =&gt; &#123;</span><br><span class="line">      <span class="comment">// 成功或出错回调</span></span><br><span class="line">      callback(err, data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 大文件分片上传-通过sliceUploadFile上传</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">uploadFile2</span>(<span class="params">file, callback, progressBc</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 得到md5码</span></span><br><span class="line">  getFileMD5(file, (md5) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 存储文件的md5码</span></span><br><span class="line">    file.md5 = md5;</span><br><span class="line">    <span class="keyword">const</span> subfix = file.name.substr(file.name.lastIndexOf(<span class="string">'.'</span>));</span><br><span class="line">    key = process.env.VUE_APP_BUCKET_PATH + file.md5 + subfix;</span><br><span class="line">    cos.sliceUploadFile(&#123;</span><br><span class="line">      Bucket: cosConfig.Bucket,</span><br><span class="line">      Region: cosConfig.Region,</span><br><span class="line">      Key: key,</span><br><span class="line">      Body: file,</span><br><span class="line">      onProgress(progressData) &#123;</span><br><span class="line">        <span class="comment">// 上传进度</span></span><br><span class="line">        progressBc(progressData.percent);</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;, (err, data) =&gt; &#123;</span><br><span class="line">      callback(err, data);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用上传的话，只需这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;input type=&quot;file&quot; accept=&quot;image/*&quot; ref=&quot;upload&quot; id=&quot;upload&quot;&gt;</span><br><span class="line">    &lt;button @click=&quot;submit&quot;&gt;上 传&lt;/button&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; uploadFile &#125; from &apos;@/utils/uploadfile&apos;;</span><br><span class="line">  export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">      submit()&#123;</span><br><span class="line">        const file = this.$refs.upload.files[0]</span><br><span class="line">        uploadFile(file, (err, data) =&gt; &#123;</span><br><span class="line">            // 回调</span><br><span class="line">            if(!err)&#123;</span><br><span class="line">              // 上传成功处理</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">              // 出错处理</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;, progress =&gt; &#123;</span><br><span class="line">            // 这里可以设置上传进度</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="存储桶设置"><a href="#存储桶设置" class="headerlink" title="存储桶设置"></a>存储桶设置</h2><p>最后，存储桶还需要设置跨域访问，否则哪怕前面都正确，文件也无法上传。</p><p>在存储桶的【安全管理】-【跨域访问CORS设置】中添加规则，设置域名白名单，保存生效后，不出意外就可以正常上传文件了。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-19-155231.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天终于把自己的摄影展示网站发布到了线上。&lt;a href=&quot;https://album.animalcrossing.life&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;查看网站&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这个网站整体并不复杂，但是其中也有不少值得记录的难
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>iOS14 桌面美化，自定义图标</title>
    <link href="https://github.com/Tit1e/2020/12/17/138-ios-desktop/"/>
    <id>https://github.com/Tit1e/2020/12/17/138-ios-desktop/</id>
    <published>2020-12-17T14:56:46.000Z</published>
    <updated>2020-12-24T02:27:17.255Z</updated>
    
    <content type="html"><![CDATA[<p>之所以现在才写这个教程，是因为iOS14.3发布后，通过快捷指令打开应用不用先打开快捷指令 app 再跳到指定 app 了，但目前通过快捷指令打开的应用，每次打开会出现一个弹窗，并且这个弹窗无法关闭，也不能手动提前关闭。</p><p>先上最终效果图：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-17-IMG_7227.PNG?imageMogr2/thumbnail/!40p" alt></p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-17-IMG_7228.PNG?imageMogr2/thumbnail/!40p" alt></p><p>之前小组件刚出来的时候也折腾过一次，但是因为打开应用要跳转两次，体验太差，最后作罢。这次虽然还有点小缺陷，但现在不用再二次跳转，这个体验提升巨大，所以又再一次上手折腾，希望下次能把弹窗也去掉。</p><div id="dplayer0" class="dplayer hexo-tag-dplayer-mark" style="margin-bottom: 20px;"></div><script>(function(){var player = new DPlayer({"container":document.getElementById("dplayer0"),"video":{"url":"https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-24-iosdesktopmute%401080p.mp4","pic":"https://photo-album-1251959693.cos.ap-nanjing.myqcloud.com/video-poster.png"}});window.dplayers||(window.dplayers=[]);window.dplayers.push(player);})()</script><p>通过这种方式，就可以把应用图标设置成任意图片。</p><p>这是我的素材包，有需要可以自取：<a href="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-17-icons.zip" target="_blank" rel="noopener">下载素材包</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之所以现在才写这个教程，是因为iOS14.3发布后，通过快捷指令打开应用不用先打开快捷指令 app 再跳到指定 app 了，但目前通过快捷指令打开的应用，每次打开会出现一个弹窗，并且这个弹窗无法关闭，也不能手动提前关闭。&lt;/p&gt;
&lt;p&gt;先上最终效果图：&lt;/p&gt;
&lt;p&gt;&lt;im
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>为域名申请免费 https 证书</title>
    <link href="https://github.com/Tit1e/2020/12/15/137-freessl/"/>
    <id>https://github.com/Tit1e/2020/12/15/137-freessl/</id>
    <published>2020-12-15T12:55:58.000Z</published>
    <updated>2020-12-30T13:35:55.495Z</updated>
    
    <content type="html"><![CDATA[<p>今天五六月份上个服务器到期后，一直没有开始折腾新的服务器，只是安装了一下环境：node，Nginx，Mysql之类，很多服务都没有跑起来，今天终于打算把它重新捡起来，目前服务都基本已经恢复，进行得还算顺利，趁热打铁，把蒸腾的一些经过记录一下，其实上次折腾的时候我就打算记录，无奈拖太久，已经回忆不起来了，只能作罢。</p><p>服务器基础的一些基础环境的安装之前已经写过一篇博客，就不再展开，要了解可以<a href="https://evolly.one/2018/12/14/51-ubuntu-node/" target="_blank" rel="noopener">点击这里</a>。</p><p>域名的购买备案我都在阿里云解决，此处不再展开。今天要讲的是为域名申请免费的 https 证书，因为这个域名之前是为了给小程序写接口申请的，小程序必须使用域名并且要备案，使用 https 访问。</p><p>我是在<a href="https://freessl.cn/" target="_blank" rel="noopener">freessl</a>申请的域名，并且申请的是<strong>多域名通配符</strong>类型的证书，这样我就不用给每个二级域名都申请一个证书。不过这种证书有效期比较短，只有三个月，过期后怎么处理目前我还不确定，只能到时候再看。</p><p>进入网站后先登录，然后在输入框中输入域名，我需要多域名所以我是这样写的（拿百度举例）：*.baidu.com,baidu.com</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-12-15-131207.png" alt></p><p>然后网站会让你下载一个应用程序，叫 keyManager。设置好开启密码后，会先让你授权域名运营商，我用的阿里云，它本身就支持，所以我填入两个 key 后马上就授权成功了，后面就是申请，过程很简单，完成后需要你去域名解析那添加一个 TXT 类型的解析，解析内容软件会提供。</p><p>解析完了之后，导出证书，我用的 Nginx 那我就选择 Nginx。下载后是一个压缩包，解压后得到两个文件，一个扩展名为<code>.crt</code>，另一个为<code>.key</code>。这两个文件到时候需要上传到服务器中，Nginx配置中需要用到。</p><p>Nginx 的配置文件大致如下：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// xxxx.conf</span><br><span class="line">// 重定向，http 重定向为 https</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 域名;</span><br><span class="line">    return 301 https://$server_name$request_uri;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen 443 ssl;</span><br><span class="line">    server_name 域名;</span><br><span class="line">    ssl_certificate /path/文件名.crt; //存放文件的路径</span><br><span class="line">    ssl_certificate_key /path/文件名.key; //存放文件的路径</span><br><span class="line">    root /home/ubuntu/www/animal-crossing-home; //项目根目录</span><br><span class="line">    index index.html; // 默认文件名</span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://127.0.0.1:5000; //本地服务地址加端口</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后重启Nginx：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure><p>这时，你访问 http 的域名，就会被重定向到 https，chrome 地址前不出意外的话，也应该会显示一把小锁。</p><p>域名三个月后过期如何处理我到时候会再写一篇博客进行说明。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天五六月份上个服务器到期后，一直没有开始折腾新的服务器，只是安装了一下环境：node，Nginx，Mysql之类，很多服务都没有跑起来，今天终于打算把它重新捡起来，目前服务都基本已经恢复，进行得还算顺利，趁热打铁，把蒸腾的一些经过记录一下，其实上次折腾的时候我就打算记录，
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>flex-grow 属性无效，宽度被撑开问题解决方法</title>
    <link href="https://github.com/Tit1e/2020/11/29/136-flex-grow-invalid/"/>
    <id>https://github.com/Tit1e/2020/11/29/136-flex-grow-invalid/</id>
    <published>2020-11-29T12:02:18.000Z</published>
    <updated>2020-11-29T12:25:17.916Z</updated>
    
    <content type="html"><![CDATA[<p>在使用 flex 布局的时候，有时会遇到 flex-grow 属性无效的情况，期望是两个子元素宽度平均分，但是实际情况就是无法平均分布，设置 <code>flex-shrink: 0;</code> 也无效，我用文字超出不换行来复现这种情况。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#flex-box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#flex-box</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#flex-box</span> <span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"flex-box"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>超出不换行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>超出不换行，超出不换行，超出不换行，超出不换行，超出不换行，超出不换行，超出不换行<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上述代码渲染出的 dom 是这个样子的：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-11-29-120940.png" alt></p><p>明明对 div 元素设置了 <code>flex-grow: 1;</code> 属性，但是，实际上两个 div 的宽度并没有被平均分。</p><p>解决办法很简单，只要把 div 的 width 属性设置为 0px，这样 div 的宽度就是由 <code>flex-grow: 1;</code> 来决定的了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#flex-box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">8px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#flex-box</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">  <span class="comment">/* 加上这一行 css */</span></span><br><span class="line">  <span class="attribute">width</span>: <span class="number">0px</span>;</span><br><span class="line">  <span class="attribute">flex-grow</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#flex-box</span> <span class="selector-tag">div</span> <span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>把宽度设置为 0 后，浏览器中渲染出的效果就是我们想要的效果了。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-11-29-121707.png" alt></p><p>同理，如果设置了 <code>flex-direction: column;</code> ，那就需要把 height 属性设置为0px。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在使用 flex 布局的时候，有时会遇到 flex-grow 属性无效的情况，期望是两个子元素宽度平均分，但是实际情况就是无法平均分布，设置 &lt;code&gt;flex-shrink: 0;&lt;/code&gt; 也无效，我用文字超出不换行来复现这种情况。&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Vue 报 Failed to mount component 错误</title>
    <link href="https://github.com/Tit1e/2020/09/28/135-Failed-to-mount-component/"/>
    <id>https://github.com/Tit1e/2020/09/28/135-Failed-to-mount-component/</id>
    <published>2020-09-28T14:00:34.000Z</published>
    <updated>2020-09-28T14:17:14.139Z</updated>
    
    <content type="html"><![CDATA[<p>开发过程中遇到了个奇怪的报错</p><blockquote><p>Failed to mount component: template or render function not defined.</p></blockquote><p>看内容应该是模板引用出了问题，但是这个报错不会显示具体是哪行报错了。我 debug 了好久最终才发现问题。</p><p>在用 vue-cli 开发项目时，我会图省事在引用组件时经常省略<code>index.vue</code>，比如正常的路径是：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@/<span class="keyword">views</span>/<span class="keyword">home</span>/<span class="keyword">index</span>.<span class="keyword">vue</span></span><br></pre></td></tr></table></figure><p>而我经常写成</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@/<span class="keyword">views</span>/<span class="keyword">home</span></span><br></pre></td></tr></table></figure><p>正常情况下这样写并没有问题，本来也支持这种写法，</p><p>当时当你的 home 目录下存在<code>index.js</code>时，它默认引用的是 js 文件而不是.vue文件，因此就会产生上面的报错，解决方法就是写上完整的文件路径。</p><p>这其实就是个很简单的问题，就是 debug 比较难。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;开发过程中遇到了个奇怪的报错&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Failed to mount component: template or render function not defined.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;看内容应该是模板引用出了问
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>webpack 报错 error：Support for the experimental syntax &#39;classProperties&#39; isn&#39;t currently enable</title>
    <link href="https://github.com/Tit1e/2020/09/01/134-webpack-experimental-syntax/"/>
    <id>https://github.com/Tit1e/2020/09/01/134-webpack-experimental-syntax/</id>
    <published>2020-09-01T01:29:52.000Z</published>
    <updated>2020-11-03T15:05:19.056Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子封装完波形插件在用 webpack 打包的时候，出现了异常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">error：Support <span class="keyword">for</span> the experimental syntax <span class="string">'classProperties'</span> isn<span class="string">'t currently enable</span></span><br></pre></td></tr></table></figure><p>从这个报错中可以知道出现这个异常的原因是我封装的类中用了 Class 的实验性语法，虽然我已经装了 Babel，但我安装的 Babel 并不支持试验性语法的转译，所以需要单独安装转译试验性语法的插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @babel/plugin-proposal-class-properties</span><br></pre></td></tr></table></figure><p>另外还需要在 .babelrc 中配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"plugins"</span>: [</span><br><span class="line">    [<span class="string">"@babel/plugin-proposal-class-properties"</span>]</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后再进行编译就不会出现上面的报错。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前阵子封装完波形插件在用 webpack 打包的时候，出现了异常：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="webpack" scheme="https://github.com/Tit1e/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>el-tree 更新节点信息</title>
    <link href="https://github.com/Tit1e/2020/08/06/133-el-tree-update-node/"/>
    <id>https://github.com/Tit1e/2020/08/06/133-el-tree-update-node/</id>
    <published>2020-08-06T14:23:07.000Z</published>
    <updated>2020-08-06T14:56:46.552Z</updated>
    
    <content type="html"><![CDATA[<p>公司组织机构管理中需要用到 <code>element-u</code> 的 <code>el-tree</code> 组件，会对公司的结构进行添加或删除，<code>el-tree</code> 节点的加载方式有两种：一种是直接传入所有的节点信息，当然前提是先整理好上下级关系；另一种就是异步动态加载节点。</p><p>如果采用第一种方式因为所有数据都已经被加载，所以新增、编辑、删除节点后都可以在源数据上进行更改操作。而用异步加载的方式，新增，可以在新增成功后让后端返回新增节点的 id，然后通过组件提供的 <code>append</code> 、<code>insertBefore</code> 或 <code>insertAfter</code> 直接追加节点，删除可以通过 <code>remove</code> 直接移除，但是如果是编辑的话，需要更新节点信息，而组件并没有提供这样的方法，如果重新加载整个树，那树又要从第一级重新展开。最后我想到的方法是模拟父节点重新加载：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">refreshNode(id) &#123;</span><br><span class="line">  <span class="comment">// 先根据节点 id 获取到节点的父节点</span></span><br><span class="line">  <span class="keyword">const</span> node = <span class="keyword">this</span>.$refs.elTree.getNode(id)</span><br><span class="line">  <span class="comment">// 将父节点的 loaded 设置为 false, 这样在展开父节点的时候，就会重新请求子节点</span></span><br><span class="line">  node.parent.loaded = <span class="literal">false</span></span><br><span class="line">  <span class="comment">// 展开父节点</span></span><br><span class="line">  node.parent.expand()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就完成了节点的更新，也不用重载整个树。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;公司组织机构管理中需要用到 &lt;code&gt;element-u&lt;/code&gt; 的 &lt;code&gt;el-tree&lt;/code&gt; 组件，会对公司的结构进行添加或删除，&lt;code&gt;el-tree&lt;/code&gt; 节点的加载方式有两种：一种是直接传入所有的节点信息，当然前提是先整理好上下级
      
    
    </summary>
    
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
      <category term="element-ui" scheme="https://github.com/Tit1e/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>vue 监听子组件生命周期</title>
    <link href="https://github.com/Tit1e/2020/06/09/132-vue-listen-child-component/"/>
    <id>https://github.com/Tit1e/2020/06/09/132-vue-listen-child-component/</id>
    <published>2020-06-09T13:42:13.000Z</published>
    <updated>2020-06-09T13:58:48.043Z</updated>
    
    <content type="html"><![CDATA[<p>前阵子做业务的时候遇到一个需求，需要在用户进入系统时加一个全局的 loading 遮罩层，在页面渲染完成后关闭遮罩，在正常的用户登录，进入系统这个流程下，实现这个并没有难度：</p><p>进入登录页-用户登录-显示 loading - 进入首页 - 在首页的 mounted 钩子中关闭 loading</p><p>但主要是用户不按这套来，用户直接在一个其他页面刷新的时候，这套就不适用了，除非你去每个页面的 mounted 钩子中都写一个关闭loading 的方法，但这样做明显不现实，页面少还好说，但我们的系统已经有几十个页面，每个都加一遍，实在过于麻烦。</p><p>后来我 Google 了一番，查到了 <code>@hook:mounted</code> 这个事件可以监听子组件的生命周期，这样我把它加 <code>&lt;router-view /&gt;</code> 上，就实现了监听每个页面的 mounted 生命周期，然后在回调中写入关闭 loading 的方法，就实现了效果。</p><p><a href="https://www.cnblogs.com/mengfangui/p/12546866.html" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;前阵子做业务的时候遇到一个需求，需要在用户进入系统时加一个全局的 loading 遮罩层，在页面渲染完成后关闭遮罩，在正常的用户登录，进入系统这个流程下，实现这个并没有难度：&lt;/p&gt;
&lt;p&gt;进入登录页-用户登录-显示 loading - 进入首页 - 在首页的 mounte
      
    
    </summary>
    
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>批量删除微博，可自定义删除内容</title>
    <link href="https://github.com/Tit1e/2020/05/23/131-delete-weibo/"/>
    <id>https://github.com/Tit1e/2020/05/23/131-delete-weibo/</id>
    <published>2020-05-23T07:36:40.000Z</published>
    <updated>2020-05-23T08:33:51.718Z</updated>
    
    <content type="html"><![CDATA[<p>首先浏览器上登录微博，浏览器要求： QQ浏览器，360极速浏览器，谷歌浏览器，火狐浏览器等都行，可以先试试，不行再换。Safari我记得默认是关闭调试模式的，</p><p>Windows 用户直接按 F12 打开控制台，或者在网页上右键，会有【元素审查】、【检查】类似这种的菜单项，打开它，正常情况浏览器内会出现一个窗口。</p><p>然后点击【console】标签页，复制代码，在箭头在的位置粘贴代码，如果你要按条件删除，那就先编辑好条件，然后按回车。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-05-23-082341.png" alt></p><p>根据实际使用来说，删除要等个十来秒才会执行，当页面在闪的时候说明在删除了。</p><p>使用的时候自动跳到下一页好像有点问题。如果页面长时间没反应，那就刷新一下页面，再粘贴执行一遍代码。</p><p>这是按条件删除微博的代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">s.setAttribute(</span><br><span class="line">  <span class="string">'src'</span>,</span><br><span class="line">  <span class="string">'https://lib.sinaapp.com/js/jquery/2.0.3/jquery-2.0.3.min.js'</span></span><br><span class="line">)</span><br><span class="line">s.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> index = <span class="number">0</span></span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!$(<span class="string">'div[action-type="feed_list_item"]'</span>).length) &#123;</span><br><span class="line">      <span class="comment">// 删完符合条件的微博，翻到下一页</span></span><br><span class="line">      $(<span class="string">'a.next'</span>).click()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> firstItem = $(<span class="string">'div[action-type="feed_list_item"]'</span>)[index]</span><br><span class="line">      <span class="keyword">const</span> text = $(firstItem).find(<span class="string">'.WB_feed_detail .WB_detail div[node-type="feed_list_content"]'</span>).text()</span><br><span class="line">      <span class="comment">// 删除微博正文中含有 “今天” 两个字的微博</span></span><br><span class="line">      <span class="keyword">const</span> needDelete = text.indexOf(<span class="string">'今天'</span>) &gt; <span class="number">0</span></span><br><span class="line">      <span class="comment">// 如果要匹配多个：</span></span><br><span class="line">      <span class="comment">// 下面这样写会把微博正文中含有 “今天” 或者 “第一” 的微博删除，含有其中之一就会被删</span></span><br><span class="line">      <span class="comment">// const needDelete = text.indexOf('今天') &gt; 0 || text.indexOf('第一') &gt; 0</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">// 这样写是将微博正文中含有 “今天” 和 “第一” 的微博删除，必须两个都包含才会被删</span></span><br><span class="line">      <span class="comment">// const needDelete = text.indexOf('今天') &gt; 0 &amp;&amp; text.indexOf('第一') &gt; 0</span></span><br><span class="line"></span><br><span class="line">      <span class="keyword">if</span>(needDelete)&#123;</span><br><span class="line">        $(firstItem).find(<span class="string">'a[action-type="feed_list_delete"]'</span>)[<span class="number">0</span>].click()</span><br><span class="line">        $(firstItem).find(<span class="string">'a[action-type="ok"]'</span>)[<span class="number">0</span>].click()</span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        index += <span class="number">1</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 滚动到底部自动加载</span></span><br><span class="line">    $(<span class="string">'html, body'</span>).animate(&#123; <span class="attr">scrollTop</span>: $(<span class="built_in">document</span>).height() &#125;, <span class="string">'slow'</span>)</span><br><span class="line">  &#125;, <span class="number">800</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(s)</span><br></pre></td></tr></table></figure><p>这是删除所有微博的代码：<a href="https://greasyfork.org/en/scripts/14709-weibored-js/code" target="_blank" rel="noopener">来源</a></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">s.setAttribute(</span><br><span class="line">  <span class="string">'src'</span>,</span><br><span class="line">  <span class="string">'https://lib.sinaapp.com/js/jquery/2.0.3/jquery-2.0.3.min.js'</span></span><br><span class="line">);</span><br><span class="line">s.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!$(<span class="string">'a[action-type="feed_list_delete"]'</span>)) &#123;</span><br><span class="line">      $(<span class="string">'a.next'</span>).click();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      $(<span class="string">'a[action-type="feed_list_delete"]'</span>)[<span class="number">0</span>].click();</span><br><span class="line">      $(<span class="string">'a[action-type="ok"]'</span>)[<span class="number">0</span>].click();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// scroll bottom let auto load</span></span><br><span class="line">    $(<span class="string">'html, body'</span>).animate(&#123; <span class="attr">scrollTop</span>: $(<span class="built_in">document</span>).height() &#125;, <span class="string">'slow'</span>);</span><br><span class="line">  &#125;, <span class="number">800</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">document</span>.head.appendChild(s);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;首先浏览器上登录微博，浏览器要求： QQ浏览器，360极速浏览器，谷歌浏览器，火狐浏览器等都行，可以先试试，不行再换。Safari我记得默认是关闭调试模式的，&lt;/p&gt;
&lt;p&gt;Windows 用户直接按 F12 打开控制台，或者在网页上右键，会有【元素审查】、【检查】类似这种
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>uni-app 小程序给所有页面添加分享</title>
    <link href="https://github.com/Tit1e/2020/04/28/130-mini-program-share/"/>
    <id>https://github.com/Tit1e/2020/04/28/130-mini-program-share/</id>
    <published>2020-04-28T14:59:39.000Z</published>
    <updated>2020-04-28T15:21:35.304Z</updated>
    
    <content type="html"><![CDATA[<p>小程序的转发按钮默认是关闭的，需要人为打开，为小程序更方便地传播，所以我需要给小程序加上这个功能。</p><p>我的目的只是方便传播小程序，需求跟其他小程序相比没那么复杂，分享后我只需固定进入小程序首页。</p><p>小程序在 Page 注册小程序页面时，有一个 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/Page.html#onShareAppMessage-Object-object" target="_blank" rel="noopener">onShareAppMessage</a> 函数，这个函数需要 <code>return</code> 一个<code>Object</code> ，这个对象中是聊天界面显示的小程序卡片的一些信息，标题，默认图片，页面路径。</p><p>原生小程序使用就是这样：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">  onShareAppMessage: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (res.from === <span class="string">'button'</span>) &#123;</span><br><span class="line">      <span class="comment">// 来自页面内转发按钮</span></span><br><span class="line">      <span class="built_in">console</span>.log(res.target)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      title: <span class="string">'自定义转发标题'</span>,</span><br><span class="line">      path: <span class="string">'/page/user?id=123'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>但是这个函数需要在每个页面都写一遍，就很麻烦。我用的是 uni-app，所以 mixins 又派上用场了：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/mixins/share.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">onShareAppMessage(res) &#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">path: <span class="string">'pages/tabBar/tools/tools'</span>,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>main.js</code> 中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mixin <span class="keyword">from</span> <span class="string">'@/mixins/share.js'</span></span><br><span class="line"></span><br><span class="line">Vue.mixin(mixin)</span><br></pre></td></tr></table></figure><p>这样，小程序中的所有页面都可以发起转发了，不过我转发的路径固定都是小程序首页，你也可以使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/reference/api/getCurrentPages.html" target="_blank" rel="noopener">getCurrentPages()</a>  来获取当前页面栈，从而获取当前页面路径，这样就可以实现动态转发路径，转发当前页面。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;小程序的转发按钮默认是关闭的，需要人为打开，为小程序更方便地传播，所以我需要给小程序加上这个功能。&lt;/p&gt;
&lt;p&gt;我的目的只是方便传播小程序，需求跟其他小程序相比没那么复杂，分享后我只需固定进入小程序首页。&lt;/p&gt;
&lt;p&gt;小程序在 Page 注册小程序页面时，有一个 &lt;a 
      
    
    </summary>
    
    
      <category term="小程序" scheme="https://github.com/Tit1e/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>uni-app 小程序设置自定义字体</title>
    <link href="https://github.com/Tit1e/2020/04/27/129-mini-program-font/"/>
    <id>https://github.com/Tit1e/2020/04/27/129-mini-program-font/</id>
    <published>2020-04-27T14:21:56.000Z</published>
    <updated>2020-04-28T15:21:37.954Z</updated>
    
    <content type="html"><![CDATA[<p>最近在开发动森的一款小程序，到目前为止踩了不少坑，今天记录一下小程序引入自定义字体的方式。后续会陆续更新其他踩坑记录。</p><p>首先，小程序是支持使用自定义字体的，使用 <a href="https://developers.weixin.qq.com/miniprogram/dev/api/ui/font/wx.loadFontFace.html" target="_blank" rel="noopener">wx.loadFontFace()</a> 就可以引入字体，但是使用这个 api 有一些限制：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-143333.png" alt></p><p>需要特别注意的点有：</p><p>第一点：字体格式，保险起见使用 ttf 格式，如果不是 ttf 格式，可以在 <a href="https://transfonter.org/" target="_blank" rel="noopener">https://transfonter.org/</a> 在线转一下。</p><p>第二点：字体链接必须是 <strong>https</strong>，意味着不支持引入本地字体。</p><p>第三点：链接必须<strong>同源</strong>或者开启了 <strong>cors</strong> 支持。</p><p>其他几点注意点对使用有影响，但没以上三点重要。</p><p>我将字体上传到了腾讯的对象存储上，因此我要在存储桶的设置中对 servicewechat.com 开启 cors 支持：</p><p>1、登录腾讯云，进入对象存储控制台</p><p>2、点击<strong>【存储桶列表】</strong>菜单</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-144352.png" alt></p><p>3、点击上传了字体的存储桶，进入存储桶详情</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-144625.png" alt></p><p>4、点击左侧<strong>【基础配置】</strong>菜单</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-144749.png" alt></p><p>5、找到<strong>【跨域访问CORS设置】</strong>卡片，点击添加规则，照下图填写表单并保存，过一会儿就会生效。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-144838.png" alt></p><p>官方文档上说如果需要全局支持字体的话 <code>wx.loadFontFace</code> 需要在 <code>app.js</code> 中调用并且设置 <code>global</code> 为 <code>true</code>。</p><p>并且使用 <code>global</code> 属性对调试基础库版本有要求，需要 2.10.0 以上，否则字体只会在调用这个 api 的页面生效。<img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-150114.png" alt></p><p>还有注意中提到的第四点也注意一下，可能会有个报错，但是字体实际已经生效，这个报错可以忽略。</p><p>但是我使用的是 <code>uni-app</code>，我尝试写在 <code>main.js</code> 入口文件中，但是并没有生效，不过 <code>uni-app</code> 支持 vue 的 mixins，创建一个font.js：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// @/mixins/font.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">onLoad() &#123;</span><br><span class="line">uni.loadFontFace(&#123;</span><br><span class="line">family: <span class="string">'DFYuanW9'</span>,</span><br><span class="line">source: <span class="string">'url("https://xxxxxxx.ttf")'</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 <code>main.js</code> 中：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mixin <span class="keyword">from</span> <span class="string">'@/mixins/font.js'</span></span><br><span class="line"></span><br><span class="line">Vue.mixin(mixin)</span><br></pre></td></tr></table></figure><p>并在全局 css 中使用字体：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">page</span>&#123;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'DFYuanW9'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样每个页面就都会生效了。</p><p>下面是字体使用效果：</p><p>不使用字体：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-IMG_2437.PNG" alt></p><p>使用字体：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-27-IMG_2436.PNG" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在开发动森的一款小程序，到目前为止踩了不少坑，今天记录一下小程序引入自定义字体的方式。后续会陆续更新其他踩坑记录。&lt;/p&gt;
&lt;p&gt;首先，小程序是支持使用自定义字体的，使用 &lt;a href=&quot;https://developers.weixin.qq.com/minipro
      
    
    </summary>
    
    
      <category term="小程序" scheme="https://github.com/Tit1e/tags/%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>element-ui el-table 表格高度自适应问题解决方案</title>
    <link href="https://github.com/Tit1e/2020/04/14/128-element-ui-table-auto-height/"/>
    <id>https://github.com/Tit1e/2020/04/14/128-element-ui-table-auto-height/</id>
    <published>2020-04-14T13:14:40.000Z</published>
    <updated>2020-08-27T15:14:19.171Z</updated>
    
    <content type="html"><![CDATA[<p>工作中由于公司业务需要，要求 table 做到整个 table 始终能在页面上完全显示， head 固定，body 超出滚动，由于公司使用的是 element-ui，el-table 组件提供了 height 属性，但是这个属性的值必须是具体的像素，因此，当页面的窗口大小发生变化时，想要表格高度自适应，一般的做法就是监听窗口大小是否改变，如果改变了就重新计算 table 的高度，然后重新设置。我之前的做法是这样的：</p><p>我们公司基本都是后台应用，结构差不多就是这个样子，菜单与顶栏的宽度与高度是固定的，而且菜单部分与表格高度的计算其实没有关系。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-14-134209.png" alt></p><p>因此我计算表格高度的时候，一般都是：</p><p>整个网页的高度 - 顶栏的高度 - 各种 margin，padding 的高度 = 表格高度</p><p>然后监听窗口的变化：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'resize'</span>, () =&gt; &#123;</span><br><span class="line"><span class="comment">//重新计算高度</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>直到后来我遇到了这个需求：</p><p>页面分为左右两部分，可拖动改变左侧部分的宽度，右侧还是自适应。乍一看这个左侧改变宽度跟右侧好像没什么关系，原来那套也适用啊，但是再仔细一想，左侧改变了有可能导致右侧筛选条件宽度不够而换行，一换行筛选条件的高度就改变了，这时候是需要重新计算高度的，但是上面监听的代码只监听窗口大小改变，而现在的情况窗口的大小并没有被改变，只是 div 的宽度发生了变化，后来我 google 了一圈，发现了 <a href="https://github.com/marcj/css-element-queries">css-element-queries</a> 这个库中的 <code>ResizeSensor</code>  这个类可以实现对元素大小改变的监听，使用方法也很简单：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * element 需要监听的元素</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">new</span> ResizeSensor(element, () =&gt; &#123;</span><br><span class="line"><span class="comment">//callback</span></span><br><span class="line">  <span class="comment">//重新计算高度</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>并且在这次调整的过程中，我想到了用 flex 属性来让右侧的筛选条件跟 table 自行分配空间，因为这类表格的页面结构基本是固定的，上面是筛选条件，下面是表格，于是我封装了一个  <code>&lt;form-page&gt;</code> 组件，结构就是大概 是这样：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-14-141421.png" alt></p><p>这个结构下，我就不用再去关心除了筛选条件的高度外我还需要减去多少的额外高度，我只要关心我的 table slot 区域有多少高度，我就把 table 设为多少高度就可以了。</p><p>当然内容展示区域的高度是需要计算过的，但是这个只要在全局样式中用 <code>calc</code> 计算一次高度就可以了。</p><p>下面是 demo 的演示效果：</p><video src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-04-14-element-ui-table-auto-height.mp4" style="width: 100%" controls></video><p><a href="https://github.com/Tit1e/element-ui-table-auto-height">demo 源码</a></p><p><strong>2020年8月27日更新：</strong></p><p>目前 2.13 版本的 table 已经支持height=“100%”，所以可以放弃上面的实现方式了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;工作中由于公司业务需要，要求 table 做到整个 table 始终能在页面上完全显示， head 固定，body 超出滚动，由于公司使用的是 element-ui，el-table 组件提供了 height 属性，但是这个属性的值必须是具体的像素，因此，当页面的窗口大小发
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>AppleScript 初尝试</title>
    <link href="https://github.com/Tit1e/2020/03/14/127-appleScript-Thunder/"/>
    <id>https://github.com/Tit1e/2020/03/14/127-appleScript-Thunder/</id>
    <published>2020-03-14T02:15:48.000Z</published>
    <updated>2020-03-14T02:59:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>迅雷有时候会出现刚开始下载的时候速度很快，但是过几十秒，速度就只有几十 kb 的情况。正常下载太慢，循环暂停启动方法倒是可以，但是我总不能什么都不做就光坐电脑前不停点开始任务，暂停任务吧？况且我一般都是睡觉的时候挂着迅雷。</p><p>想起以前在用 windows 的时候接触过按键精灵这类模拟键鼠操作的软件，我觉得 Mac OS 平台应该也有类似的软件，但是一圈搜下来并没有找到，倒是找到了官方的脚本语言 AppleScript。它倒是可以模拟键鼠操作，只是得自己折腾。</p><p>那我能怕折腾么？于是直接开干，边在<a href="applescript://" target="_blank" rel="noopener">脚本编辑器</a>测试边 Google，没多久折腾出来了个能将就用的。后来我又</p><p>优化了一下，并且集成到了 Alfred 中。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">// 如果直接用脚本编辑器执行，不需要第一行与最后行，这是要在 Alfred 中执行才需要的。</span><br><span class="line">on alfred_script(q)</span><br><span class="line">  tell application "System Events"</span><br><span class="line">tell application "Thunder"</span><br><span class="line"><span class="comment">--激活主窗口</span></span><br><span class="line">activate</span><br><span class="line"><span class="keyword">end</span> tell</span><br><span class="line"><span class="comment">--暂停一秒</span></span><br><span class="line">delay <span class="number">1</span></span><br><span class="line"><span class="comment">--全选任务，因只有选中才能暂停开始任务</span></span><br><span class="line"><span class="keyword">key</span> code <span class="number">0</span> <span class="keyword">using</span> &#123;command down&#125;</span><br><span class="line">tell process <span class="string">"Thunder"</span></span><br><span class="line">tell <span class="keyword">window</span> <span class="string">"迅雷"</span></span><br><span class="line">entire <span class="keyword">contents</span></span><br><span class="line"><span class="comment">--q 是传进来的参数，表示循环次数</span></span><br><span class="line"><span class="comment">--本代码中一次循环用时 20 + 2 秒，可根据实际情况调整</span></span><br><span class="line"><span class="comment">--q 的次数根据每次循环的时长来计算</span></span><br><span class="line"><span class="keyword">repeat</span> q times</span><br><span class="line"><span class="comment">--等待20秒后暂停任务</span></span><br><span class="line">delay <span class="number">20</span></span><br><span class="line">click button <span class="number">7</span></span><br><span class="line"><span class="comment">--暂停2秒后重新开始任务</span></span><br><span class="line">delay <span class="number">2</span></span><br><span class="line">click button <span class="number">6</span></span><br><span class="line"><span class="keyword">end</span> <span class="keyword">repeat</span></span><br><span class="line"><span class="keyword">end</span> tell</span><br><span class="line"><span class="keyword">end</span> tell</span><br><span class="line"><span class="keyword">end</span> tell</span><br><span class="line"><span class="keyword">end</span> alfred_script</span><br></pre></td></tr></table></figure><p>在集成到 Alfred 的过程中踩了个坑，就是传参问题，我之前一直用 <code>{query}</code> 来获取传过来的参数，但是一直不成功，查了后原来这要直接用 <code>q</code> 就行了。其实在脚本第一行已经说明，但我一直以为是固定格式。</p><p>之后我发现使用 AppleScript 还有个好处就是脚本执行的时候可以不保持窗口最前：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2020-03-14-%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B6%202020-03-14%2010.47.37.gif" alt></p><p>由于 AppleScript 的资料太少了，官方文档也很简单，没有实现我想要的效果。其实我本来的逻辑是每次循环前先判断下载列表中有没有任务，有的话就执行，没有就退出循环。但是目前还没找到获取的方法，所以只能先将就一下。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;迅雷有时候会出现刚开始下载的时候速度很快，但是过几十秒，速度就只有几十 kb 的情况。正常下载太慢，循环暂停启动方法倒是可以，但是我总不能什么都不做就光坐电脑前不停点开始任务，暂停任务吧？况且我一般都是睡觉的时候挂着迅雷。&lt;/p&gt;
&lt;p&gt;想起以前在用 windows 的时候
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>阻止表单只有一个 input 时回车自动提交</title>
    <link href="https://github.com/Tit1e/2020/03/08/126-form-single-input/"/>
    <id>https://github.com/Tit1e/2020/03/08/126-form-single-input/</id>
    <published>2020-03-08T07:13:44.000Z</published>
    <updated>2020-03-08T07:35:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前在开发过程中遇到过这个问题，就是当一个表单中只有一个 input 时，enter 会直接提交表单。当初我用的是 Element-UI  的表单组件，本来我以为是 Element-UI的问题，后来查了后发现是原生表单就有这个特性。我当时是使用异步请求的数据，因此并不需要原生的提交，所以只有一个 input 时得想办法阻止原生的提交功能。</p><p>Element-UI 因为是封装过的，可以用它自己的方法来解决：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 只要在表单元素上加入 @submit.native.prevent --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-form</span> @<span class="attr">submit.native.prevent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>原生表单的组织方式我也查了一下，在这总结一下：</p><p>方法一：</p><p>在表单中再加入一个隐藏的 input</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">""</span> <span class="attr">style</span>=<span class="string">"display: none;"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法二：</p><p>表单提交时阻止提交</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">"return false;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>方法三：</p><p>监听 input  <code>keydown</code> 事件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">onkeydown</span>=<span class="string">"if(event.keyCode === 13) &#123; return false &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;之前在开发过程中遇到过这个问题，就是当一个表单中只有一个 input 时，enter 会直接提交表单。当初我用的是 Element-UI  的表单组件，本来我以为是 Element-UI的问题，后来查了后发现是原生表单就有这个特性。我当时是使用异步请求的数据，因此并不需要原
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
</feed>
