<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>I&#39;m Tit1e</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-21T12:46:51.553Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Tit1e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>局域网请求 webpack 反向代理</title>
    <link href="http://yoursite.com/2017/12/21/41.webpack-dev-server/"/>
    <id>http://yoursite.com/2017/12/21/41.webpack-dev-server/</id>
    <published>2017-12-21T12:15:47.000Z</published>
    <updated>2017-12-21T12:46:51.553Z</updated>
    
    <content type="html"><![CDATA[<p>今天继续在公司思考关于前后端分离的问题，困扰我最大的问题其实就是我用 vue-cli 在本地开发的时候，怎么和后端进行接口的调试，总不可能每次都打包一下放到服务器上看运行正不正常，有没有报错吧？我知道有个反向代理的东西，可是知道它的大致作用，但是我没用过导致我无从下手，但前段时间折腾模拟数据的时候，有用到用<code>json-server</code>和<code>faker.js</code>本地开服务器，批量生成模拟数据，然后通过反向代理去请求本地另一个服务器的数据。于是我想，既然这样我可以请求到数据，那么局域网的话我也可以直接通过 ip 直接访问局域网内的服务器，那么我应该也可以通过代理去请求局域网上内其他同事开的本地服务器中的接口，于是就开始折腾了。<br><a id="more"></a><br>由于之前去请求模拟数据的时候，代理配置是写在<code>/config/index.js</code>中的，于是我依样画葫芦，把之前的配置的地址，路径全改了，但结果却发现请求一只 404 ，这就让我很难受了，于是我去 Google 了一圈，原来这个代理是用的<code>webpack-dev-server</code>，于是我找到了<code>/build/webpack.dev.conf.js</code>,按照网上说的，在<code>devServer</code>中添加了一个<code>proxy</code>属性<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">proxy: &#123;</div><div class="line">  <span class="string">'/Home'</span>: &#123;</div><div class="line">    <span class="attr">target</span>: <span class="string">'http://192.168.1.1/'</span>,</div><div class="line">    <span class="attr">secure</span>: <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>这样，我就成功通过代理请求到了同事服务器上的数据。</p>
<p>突然想起来了，利用<code>json-server</code>和<code>faker.js</code>模拟数据的过程还没记录，下篇文章记录一下。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天继续在公司思考关于前后端分离的问题，困扰我最大的问题其实就是我用 vue-cli 在本地开发的时候，怎么和后端进行接口的调试，总不可能每次都打包一下放到服务器上看运行正不正常，有没有报错吧？我知道有个反向代理的东西，可是知道它的大致作用，但是我没用过导致我无从下手，但前段时间折腾模拟数据的时候，有用到用&lt;code&gt;json-server&lt;/code&gt;和&lt;code&gt;faker.js&lt;/code&gt;本地开服务器，批量生成模拟数据，然后通过反向代理去请求本地另一个服务器的数据。于是我想，既然这样我可以请求到数据，那么局域网的话我也可以直接通过 ip 直接访问局域网内的服务器，那么我应该也可以通过代理去请求局域网上内其他同事开的本地服务器中的接口，于是就开始折腾了。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>element-theme 配合 vue-cli 进行二次开发</title>
    <link href="http://yoursite.com/2017/12/20/40.element-theme-develop-twice/"/>
    <id>http://yoursite.com/2017/12/20/40.element-theme-develop-twice/</id>
    <published>2017-12-20T07:38:03.000Z</published>
    <updated>2017-12-23T02:55:10.676Z</updated>
    
    <content type="html"><![CDATA[<p>公司新平台我打算使用<code>element-ui</code>和<code>vue-cli</code>来开发，既然用的是现成的ui，那么就涉及到ui的定制问题，虽然是一个后台项目，并且让设计参照<code>element-ui</code>的文档去作图，但是设计不可能照搬默认主题，不在组件功能上修改，但在主题配色上肯定会进行调整。虽然官方有 <a href="https://elementui.github.io/theme-chalk-preview/#/zh-CN" target="_blank" rel="external">在线主题生成工具</a> ，但这个工具只能修改一个整体的主题色，连按钮的颜色都无法定制，更不用说定制圆角阴影这些效果了，所以还是要自己改文件编译才能实现最大化定制。折腾过程中遇到了点问题，在此记录一下。</p>
<p>官方也提供了定制的 <a href="https://github.com/ElementUI/element-theme" target="_blank" rel="external">文档</a> ，那当然是相信官方，照着官方的教程来！<br><a id="more"></a></p>
<h4 id="安装element-theme"><a href="#安装element-theme" class="headerlink" title="安装element-theme"></a>安装<code>element-theme</code></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#只在当前项目安装</span></div><div class="line">npm i element-theme -D</div><div class="line"></div><div class="line"><span class="comment">#全局安装</span></div><div class="line">sudo npm i element-theme -g</div></pre></td></tr></table></figure>
<p>然而我第一步就报错了……ORZ。</p>
<p>我使用的是<code>npm</code>命令，但源用的是淘宝的源。但安装的时候报错：<code>not found python2</code>。于是我去找安装<code>python2</code>的方法，结果发现 Mac 是默认集成了<code>python</code>的，那我就郁闷了，试了半天，一直报错，最后突发奇想想用<code>cnpm</code>试试，结果竟然成功了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#终于装上了</span></div><div class="line">sudo cnpm i element-theme -g</div></pre></td></tr></table></figure></p>
<p>好，继续。</p>
<h4 id="安装-theme-chalk"><a href="#安装-theme-chalk" class="headerlink" title="安装 theme-chalk"></a>安装 <code>theme-chalk</code></h4><p>因为我一开始构思的定制流程是在其他目录下把样式写好编译后到现有项目中替换，所以我就建了一个空文件夹，然后执行命令：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm i element-theme-chalk -D</div></pre></td></tr></table></figure></p>
<p>结果当然是提醒我找不到<code>package.json</code>文件。后来我望着命令中的<code>-D</code>若有所思……，终于反应过来了，这是装在项目中的。</p>
<p>好，顺利安装，继续。</p>
<h4 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#初始化</span></div><div class="line">et -i</div></pre></td></tr></table></figure>
<p>执行完后会在根目录下生成一个<code>element-variables.scss</code>的文件。然后你就可以在这个文件中修改主题色，按钮颜色，圆角，阴影等这些样式，修改好了之后，就可以编译了。</p>
<h4 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 监听并编译</span></div><div class="line">et --watch [--config variable file path] [--out theme path]</div><div class="line"></div><div class="line"><span class="comment"># 编译</span></div><div class="line">et [--config variable file path] [--out theme path] [--minimize]</div></pre></td></tr></table></figure>
<p><code>et --watch</code>可以监听<code>element-variables.scss</code>文件。如果文件被修改了，那么就会自动进行编译。</p>
<p><code>et --config 文件路径/element-variables.scss</code>这个命令是可以指定<code>element-variables.scss</code>的路径，因为这个文件不一定放在项目根目录下。</p>
<p><code>et --out 目录</code>这个命令是指定编译后的文件输出目录，默认是输出在根目录下的<code>theme</code>文件夹中。</p>
<p>但这就会产生一个文件替换问题，每次编译后都需要手动替换文件，之后才能看效果。所以我直接把输出路径改成了项目引用的<code>element-ui</code>的路径：<code>node_modules/element-ui/lib/theme-chalk/</code>，这样配合<code>-w</code>就可以实现实时编译，再配合<code>npm run dev</code>就可以实时编译实时预览了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司新平台我打算使用&lt;code&gt;element-ui&lt;/code&gt;和&lt;code&gt;vue-cli&lt;/code&gt;来开发，既然用的是现成的ui，那么就涉及到ui的定制问题，虽然是一个后台项目，并且让设计参照&lt;code&gt;element-ui&lt;/code&gt;的文档去作图，但是设计不可能照搬默认主题，不在组件功能上修改，但在主题配色上肯定会进行调整。虽然官方有 &lt;a href=&quot;https://elementui.github.io/theme-chalk-preview/#/zh-CN&quot;&gt;在线主题生成工具&lt;/a&gt; ，但这个工具只能修改一个整体的主题色，连按钮的颜色都无法定制，更不用说定制圆角阴影这些效果了，所以还是要自己改文件编译才能实现最大化定制。折腾过程中遇到了点问题，在此记录一下。&lt;/p&gt;
&lt;p&gt;官方也提供了定制的 &lt;a href=&quot;https://github.com/ElementUI/element-theme&quot;&gt;文档&lt;/a&gt; ，那当然是相信官方，照着官方的教程来！&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="element-ui" scheme="http://yoursite.com/tags/element-ui/"/>
    
  </entry>
  
  <entry>
    <title>css 实现圆角平行四边形</title>
    <link href="http://yoursite.com/2017/12/17/39.radio-rhomboid/"/>
    <id>http://yoursite.com/2017/12/17/39.radio-rhomboid/</id>
    <published>2017-12-17T13:31:07.000Z</published>
    <updated>2017-12-17T13:51:43.575Z</updated>
    
    <content type="html"><![CDATA[<p>公司管理平台首页改版中有个圆角平行四边形的标签页。由于以前没接触到过这个，没什么经验，所以我只好求助万能的 google ，但是我用关键字“css 圆角平行四边形”并没有搜出答案来，于是我退而求其次，那就搜“css 平行四边形”，这个我有把握 100% 能用 强大的css 实现，果然一搜就出现了：<a href="https://www.w3cplus.com/css3/css-secrets/parallelograms.html" target="_blank" rel="external">CSS秘密花园：平行四边形</a>。<br><a id="more"></a><br>实现代码：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.button</span>&#123;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">skewX</span>(-30deg);</div><div class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to right, #7BBBB2, #46AEAA); </div><div class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</div><div class="line">  <span class="attribute">text-align</span>: center;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">8px</span> <span class="number">20px</span>;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">4px</span>;</div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">margin-left</span>: <span class="number">10px</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0px</span> <span class="number">5px</span> <span class="number">10px</span> -<span class="number">3px</span> <span class="built_in">rgba</span>(0, 0, 0, 0.5);</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.button</span> &gt; <span class="selector-tag">div</span>&#123;</div><div class="line">  <span class="attribute">transform</span>: <span class="built_in">skewX</span>(30deg);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    首页</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    采集管理</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"button"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    数据管理</div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>简单来说就是利用css的<code>transform: skewX(deg)</code>属性来实现元素的扭曲，但是元素扭曲的同时，会使元素内的内容也随之扭曲，所以就需要用另一个元素把不想扭曲的元素包裹起来，然后对外层使用扭曲，内层元素再使用反向扭曲来抵消，一次来实现效果。然后我又给外层元素添加了<code>border-radios</code>，于是圆角平行四边形就诞生啦！</p>
<p>效果图：<br><img src="http://opzfmbyhp.bkt.clouddn.com/2017-12-17-tab.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司管理平台首页改版中有个圆角平行四边形的标签页。由于以前没接触到过这个，没什么经验，所以我只好求助万能的 google ，但是我用关键字“css 圆角平行四边形”并没有搜出答案来，于是我退而求其次，那就搜“css 平行四边形”，这个我有把握 100% 能用 强大的css 实现，果然一搜就出现了：&lt;a href=&quot;https://www.w3cplus.com/css3/css-secrets/parallelograms.html&quot;&gt;CSS秘密花园：平行四边形&lt;/a&gt;。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="css" scheme="http://yoursite.com/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>v-charts 实现柱状图渐变效果</title>
    <link href="http://yoursite.com/2017/12/17/38.v-charts-bar/"/>
    <id>http://yoursite.com/2017/12/17/38.v-charts-bar/</id>
    <published>2017-12-17T13:03:48.000Z</published>
    <updated>2017-12-17T13:29:15.096Z</updated>
    
    <content type="html"><![CDATA[<p>其实在考虑使用<code>echarts</code>之前我还考虑过使用饿了么的<code>v-charts</code>，但后来考虑到实际情况，还是使用了没有经过二次封装的<code>echarts</code>。虽然没有最终没有使用<code>v-charts</code>，但还是记录一下。</p>
<p><code>v-charts</code>的使用方法<a href="https://elemefe.github.io/v-charts/#/" target="_blank" rel="external"> 官方文档 </a>讲得已经比较详细了，但我的需求有个柱状图使用渐变色的需求，这里没有详细讲，但其实运行报错已经说得很清楚了。<br>首先安装<code>v-charts</code><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm <span class="selector-tag">i</span> v-charts -S</div></pre></td></tr></table></figure></p>
<p>在<code>main.js</code>引入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> VCharts <span class="keyword">from</span> <span class="string">'v-charts'</span></div><div class="line">Vue.use(VCharts)</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>如果这时候你去组件里写入以下代码并运行：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">ve-histogram</span> <span class="attr">:data</span>=<span class="string">"chartData"</span> <span class="attr">:settings</span>=<span class="string">"chartSettings"</span>&gt;</span><span class="tag">&lt;/<span class="name">ve-histogram</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">  <span class="attr">created</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.chartData = &#123;</div><div class="line">      <span class="attr">columns</span>: [<span class="string">"日期"</span>, <span class="string">"成本"</span>, <span class="string">"利润"</span>, <span class="string">"占比"</span>, <span class="string">"其他"</span>],</div><div class="line">      <span class="attr">rows</span>: [</div><div class="line">        &#123; 日期: <span class="string">"1月1日"</span>, 成本: <span class="number">1523</span>, 利润: <span class="number">1523</span>, 占比: <span class="number">0.12</span>, 其他: <span class="number">100</span> &#125;,</div><div class="line">        &#123; 日期: <span class="string">"1月2日"</span>, 成本: <span class="number">1223</span>, 利润: <span class="number">1921</span>, 占比: <span class="number">0.345</span>, 其他: <span class="number">100</span> &#125;,</div><div class="line">        &#123; 日期: <span class="string">"1月3日"</span>, 成本: <span class="number">2123</span>, 利润: <span class="number">5523</span>, 占比: <span class="number">0.7</span>, 其他: <span class="number">100</span> &#125;,</div><div class="line">        &#123; 日期: <span class="string">"1月4日"</span>, 成本: <span class="number">4123</span>, 利润: <span class="number">6523</span>, 占比: <span class="number">0.31</span>, 其他: <span class="number">100</span> &#125;</div><div class="line">      ]</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">this</span>.chartSettings = &#123;</div><div class="line">      <span class="attr">metrics</span>: [<span class="string">"成本"</span>],</div><div class="line">      <span class="attr">itemStyle</span>: &#123;</div><div class="line">        <span class="attr">normal</span>: &#123;</div><div class="line">          <span class="attr">color</span>: <span class="keyword">new</span> echarts.graphic.LinearGradient(</div><div class="line">            <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>,</div><div class="line">            [</div><div class="line">              &#123;<span class="attr">offset</span>: <span class="number">0</span>, <span class="attr">color</span>: <span class="string">'#83bff6'</span>&#125;,</div><div class="line">              &#123;<span class="attr">offset</span>: <span class="number">0.5</span>, <span class="attr">color</span>: <span class="string">'#188df0'</span>&#125;,</div><div class="line">              &#123;<span class="attr">offset</span>: <span class="number">1</span>, <span class="attr">color</span>: <span class="string">'#188df0'</span>&#125;</div><div class="line">            ]</div><div class="line">          )</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>控制台会报错：”<strong>echarts is not defined</strong>“。所以解决方法很明显，只要引入<code>echarts</code>就行了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">'echarts/lib/echarts'</span></div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实在考虑使用&lt;code&gt;echarts&lt;/code&gt;之前我还考虑过使用饿了么的&lt;code&gt;v-charts&lt;/code&gt;，但后来考虑到实际情况，还是使用了没有经过二次封装的&lt;code&gt;echarts&lt;/code&gt;。虽然没有最终没有使用&lt;code&gt;v-charts&lt;/code&gt;，但还是记录一下。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;v-charts&lt;/code&gt;的使用方法&lt;a href=&quot;https://elemefe.github.io/v-charts/#/&quot;&gt; 官方文档 &lt;/a&gt;讲得已经比较详细了，但我的需求有个柱状图使用渐变色的需求，这里没有详细讲，但其实运行报错已经说得很清楚了。&lt;br&gt;首先安装&lt;code&gt;v-charts&lt;/code&gt;&lt;br&gt;&lt;figure class=&quot;highlight stylus&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm &lt;span class=&quot;selector-tag&quot;&gt;i&lt;/span&gt; v-charts -S&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;main.js&lt;/code&gt;引入&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; VCharts &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;v-charts&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.use(VCharts)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 使用 ECharts 水球图</title>
    <link href="http://yoursite.com/2017/12/17/37.vue-cli-use-echarts-liquidfill/"/>
    <id>http://yoursite.com/2017/12/17/37.vue-cli-use-echarts-liquidfill/</id>
    <published>2017-12-17T12:14:50.000Z</published>
    <updated>2017-12-17T13:28:48.980Z</updated>
    
    <content type="html"><![CDATA[<p>公司有个平台有改版的打算，UI 出了首页的设计稿，我看了下，大致构思了一下，打算用 vue 和 Element-UI 来写。前阵子刚忙完，这几天比较空，我就看着 UI 稿在想实现方式，其中一个是水球图。这篇先记录一下 vue-cli 中生成水球图的方法。<br><a id="more"></a><br>首先<code>npm</code>包下载必不可少：<br><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//安装 ECharts</span></div><div class="line">npm install echarts</div><div class="line"><span class="comment">//安装 水球图插件</span></div><div class="line">npm install echarts-liquidfill</div></pre></td></tr></table></figure></p>
<p>随后在<code>.vue</code>文件中引入<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> echarts <span class="keyword">from</span> <span class="string">"echarts"</span>;</div><div class="line"><span class="keyword">import</span> <span class="string">"echarts-liquidfill/src/liquidFill.js"</span>;</div></pre></td></tr></table></figure></p>
<p>之后就该怎么用就怎么用。可以参考 <a href="http://gallery.echartsjs.com/editor.html?c=liquidfill-basic" target="_blank" rel="external">官方例子</a> ，也可以参考 echarts-liquidfill 的 <a href="https://github.com/ecomfe/echarts-liquidfill" target="_blank" rel="external">github</a> 文档。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;公司有个平台有改版的打算，UI 出了首页的设计稿，我看了下，大致构思了一下，打算用 vue 和 Element-UI 来写。前阵子刚忙完，这几天比较空，我就看着 UI 稿在想实现方式，其中一个是水球图。这篇先记录一下 vue-cli 中生成水球图的方法。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 引入全局 scss 文件</title>
    <link href="http://yoursite.com/2017/12/14/36.vue-import-sass-global/"/>
    <id>http://yoursite.com/2017/12/14/36.vue-import-sass-global/</id>
    <published>2017-12-14T14:11:52.000Z</published>
    <updated>2017-12-23T02:51:04.265Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>我们平时在使用 vue-cli 开发项目的时候，写 css 会用到预处理器来提高 css 的编写效率。我们在使用 sass 的时候一般会先在一个全局的<code>.scss</code>文件中定义好一些颜色变量或其他变量，然后在需要用的这些变量的组件内把这个文件通过<code>@import</code>的方式引入，然后就可以使用文件中定义的变量了。但是这也出现一个问题，因为这个文件中定义的都是比较通用的变量，所以几乎每个<code>.vue</code>文件几乎都会将它引入，当组件多了之后，没次要引入这个文件就显得累赘，而且如果这个文件换了路径，那维护起来就比较麻烦，还容易出错。所以最好就是一个地方配置后，全局都可以直接使用，这样是最高效，也是最容易维护的。于是我在网上找了一圈，试了网上的 N 多方法，终于在 <a href="https://segmentfault.com/q/1010000008731809" target="_blank" rel="external">这里</a> 找到了我能用的方法，而且配置简单。<br><a id="more"></a></p>
<h4 id="使用sass，这两个包是前提"><a href="#使用sass，这两个包是前提" class="headerlink" title="使用sass，这两个包是前提:"></a>使用<code>sass</code>，这两个包是前提:</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install <span class="keyword">node</span><span class="title">-sass</span> --save-dev</div><div class="line">npm install sass-loader --save-dev</div></pre></td></tr></table></figure>
<h4 id="要全局引用-scss还需要安装sass-resources-loader"><a href="#要全局引用-scss还需要安装sass-resources-loader" class="headerlink" title="要全局引用.scss还需要安装sass-resources-loader"></a>要全局引用<code>.scss</code>还需要安装<code>sass-resources-loader</code></h4><figure class="highlight q"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install sass-resources-loader --<span class="built_in">save</span>-<span class="built_in">dev</span></div></pre></td></tr></table></figure>
<h4 id="修改-build-utils-js，在return中新增如下代码"><a href="#修改-build-utils-js，在return中新增如下代码" class="headerlink" title="修改/build/utils.js，在return中新增如下代码"></a>修改<code>/build/utils.js</code>，在<code>return</code>中新增如下代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">scss: generateLoaders(<span class="string">'sass'</span>).concat(</div><div class="line">  &#123;</div><div class="line">    <span class="attr">loader</span>: <span class="string">'sass-resources-loader'</span>,</div><div class="line">    <span class="attr">options</span>: &#123;</div><div class="line">      <span class="comment">//你要引入的 .scss 文件的路径</span></div><div class="line">      resources: path.resolve(__dirname, <span class="string">'../src/assets/your.scss'</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">)</div></pre></td></tr></table></figure>
<p>完成以上步骤后，你就可以在<code>&lt;style lang=&quot;scss&quot;&gt;</code>标签中直接使用先前定义好的变量了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;我们平时在使用 vue-cli 开发项目的时候，写 css 会用到预处理器来提高 css 的编写效率。我们在使用 sass 的时候一般会先在一个全局的&lt;code&gt;.scss&lt;/code&gt;文件中定义好一些颜色变量或其他变量，然后在需要用的这些变量的组件内把这个文件通过&lt;code&gt;@import&lt;/code&gt;的方式引入，然后就可以使用文件中定义的变量了。但是这也出现一个问题，因为这个文件中定义的都是比较通用的变量，所以几乎每个&lt;code&gt;.vue&lt;/code&gt;文件几乎都会将它引入，当组件多了之后，没次要引入这个文件就显得累赘，而且如果这个文件换了路径，那维护起来就比较麻烦，还容易出错。所以最好就是一个地方配置后，全局都可以直接使用，这样是最高效，也是最容易维护的。于是我在网上找了一圈，试了网上的 N 多方法，终于在 &lt;a href=&quot;https://segmentfault.com/q/1010000008731809&quot;&gt;这里&lt;/a&gt; 找到了我能用的方法，而且配置简单。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-cli 使用记录以及使用过程中遇到的问题总结</title>
    <link href="http://yoursite.com/2017/10/19/35.low-net-problems/"/>
    <id>http://yoursite.com/2017/10/19/35.low-net-problems/</id>
    <published>2017-10-19T11:19:51.000Z</published>
    <updated>2017-12-23T02:49:24.748Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间抽空重写了陋网,还没开发完成, 还有很多细节需要完善. 所以这篇博客随着开发还会更新.<br><a id="more"></a></p>
<h3 id="配置记录"><a href="#配置记录" class="headerlink" title="配置记录"></a>配置记录</h3><h4 id="注-下面的文件都是以实际项目中的-program-目录为根目录来写路径的"><a href="#注-下面的文件都是以实际项目中的-program-目录为根目录来写路径的" class="headerlink" title="注: 下面的文件都是以实际项目中的 program 目录为根目录来写路径的"></a>注: 下面的文件都是以实际项目中的 <code>program</code> 目录为根目录来写路径的</h4><h4 id="package-json"><a href="#package-json" class="headerlink" title="/package.json"></a><code>/package.json</code></h4><p>用过 <code>node.js</code> 的基本都知道, 主要用来管理包依赖,当然里面还会有些项目作者, 项目描述等配置,不过这都不是主要的.<br>说到依赖, 在 <code>/package.json</code> 中有两种依赖,分别是 <code>dependencies</code> 和 <code>devDependencies</code>, 从字面上大致可以看出两者的区别在于一个是生产环境用到的依赖, 一个是开发环境用到的依赖, 比如 <code>axios</code> 要在线上用于 <code>http</code> 请求, 所以这个依赖肯定得配置在 <code>dependencies</code> 下, 在安装的时候只要在命令后面加上 <code>--save</code> 就能自动写进 <code>dependencies</code>. 而像 <code>eslint</code> 这种依赖是在开发阶段用于代码检查的, 生产环境中不需要的,那么就配置在 <code>devDependencies</code> 下, 安装的时候在命令后面加上 <code>--save-dev</code>就自动写进 <code>devDependencies</code> 中.</p>
<h4 id="config-index-js"><a href="#config-index-js" class="headerlink" title="/config/index.js"></a><code>/config/index.js</code></h4><p>可配置 <code>index.html</code> 和 <code>static</code> 文件夹的打包输出路径.</p>
<h4 id="build-webpack-base-conf"><a href="#build-webpack-base-conf" class="headerlink" title="/build/webpack.base.conf"></a><code>/build/webpack.base.conf</code></h4><p>可在这个文件下的 ‘resolve’ 下的 <code>alias</code> 对象中配置资源引用路径的缩写.     <code>vue-cli</code> 在构建的时候默认会有 <code>&#39;@&#39;: resolve(&#39;src&#39;)</code> 这条配置, 意思是引用文件的时候, <code>src</code> 这个路径可以用 <code>@</code> 表示, 当路径长了这个配置的优势就会提现出来. </p>
<h3 id="项目记录"><a href="#项目记录" class="headerlink" title="项目记录"></a>项目记录</h3><h4 id="index-html"><a href="#index-html" class="headerlink" title="/index.html"></a><code>/index.html</code></h4><p>入口文件, 项目最后打包的时候, 所有代码都会压缩到这个 <code>html</code> 文件中.<br>需要注意的是, 由于vue作了限制, 在文件中引用静态资源时, 静态资源不可放于src目录下, 要放于与这个文件同级的 <code>static</code> 目录下.</p>
<h4 id="sass"><a href="#sass" class="headerlink" title="sass"></a><code>sass</code></h4><p>要使用 <code>sass</code> 需要安装 <code>node-sass</code> 和 <code>sass-loader</code> 两个包<br><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">npm install <span class="keyword">node</span><span class="title">-sass</span> --save-dev</div><div class="line">npm install sass-loader --save-dev</div></pre></td></tr></table></figure></p>
<p>然后在 <code>style</code> 标签中声明 <code>&lt;style lang=&quot;scss&quot;&gt;&lt;/style&gt;</code> 就可以使用了.</p>
<h4 id="fastclick"><a href="#fastclick" class="headerlink" title="fastclick"></a><code>fastclick</code></h4><p>移动端用 <code>fastclick</code> 来解决300毫秒点击延迟问题.<br><code>npm install fastclick --save</code><br>在 <code>main.js</code> 中 import: <code>import fastclick from &#39;fastclick&#39;</code> .<br>并且在绑定在 <code>body</code> 上: <code>fastclick.attach(document.body)</code> .</p>
<h4 id="better-scroll"><a href="#better-scroll" class="headerlink" title="better-scroll"></a><code>better-scroll</code></h4><p>使用 <code>better-scroll</code> 来获得更好的移动端体验<br><code>npm install better-scroll --save</code><br>由于项目中需要滚动的地方都需要用到 <code>better-scroll</code>, 所以将它封装成一个通用的基础组件,需要使用的时候直接引用就可以了.<br>很多刚使用 <code>better-scroll</code> 的人会遇到使用了插件,并且初始化也成功了,但是却滚动不了. 网上一查有很多的相关问题,我在使用的时候也遇到了这个问题,其实在 <code>better-scroll</code> 的 github 上已经说得比较清楚了:<br><img src="https://camo.githubusercontent.com/fd2fd41d5bc70502acb590d53f2084248587cb85/687474703a2f2f7374617469632e67616c696c656f2e7869616f6a756b656a692e636f6d2f7374617469632f746d732f736869656c642f7363726f6c6c2d342e706e67"><br>包裹的元素需要设置一个固定高度,当子元素的高度大于父元素的高度的时候就好出现滚动条. <code>better-scroll</code> 的核心原理就是禁用默认滚动条, 父元素设固定高度, 内容超出部分隐藏, 然后用 <code>css</code> 动画来做滚动效果.<br>所以只需要给父元素加个固定高度就可以解决页面不滚动问题.</p>
<h4 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a><code>vue-router</code></h4><ul>
<li><p>添加路由<br>在 <code>/src/router/index.js</code> 中可配置路由. 先将组件 import 进来, 然后在 <code>routes</code> 数组中添加路由配置. 一般路由格式如下:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">path</span>: <span class="string">'/home'</span>,</div><div class="line">  component: Home</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>默认路由<br><code>redirect</code> 可配置项目的默认路由:</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">path</span>: <span class="string">'/'</span>,</div><div class="line">  redirect: <span class="string">'/index'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>嵌套路由</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">path</span>: <span class="string">'/home'</span>,</div><div class="line">  children: [</div><div class="line">    &#123;</div><div class="line">      path: <span class="string">'/home/index'</span>,</div><div class="line">      component: Index</div><div class="line">    &#125;</div><div class="line">  ]</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>动态路由</p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attribute">path</span>: <span class="string">'/people/id/:id'</span>,</div><div class="line">  component: People</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<p>例子中的配置在地址中的渲染效果会是 <code>/people/id/1</code>.</p>
<p>未完待续…</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前段时间抽空重写了陋网,还没开发完成, 还有很多细节需要完善. 所以这篇博客随着开发还会更新.&lt;br&gt;
    
    </summary>
    
    
      <category term="前端，前端学习" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%EF%BC%8C%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>陋 网</title>
    <link href="http://yoursite.com/2017/10/18/34.low-net/"/>
    <id>http://yoursite.com/2017/10/18/34.low-net/</id>
    <published>2017-10-18T14:28:16.000Z</published>
    <updated>2017-12-23T02:48:39.352Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前阵子把今年四五月份时候写的陋网重写了. 之前用的是 vue.js, vue-resource 和 jQuery, 现在想想就算是那时候, jQuery也是完全没必要引入的.后来不知道为何网站在 PC 端列表无法渲染了, 原因是 PC 端获取到的 data 编程字符串格式了, 而我之前开发的时候明明是能正常获取的, 而且移动端是能正确渲染列表的, 这个原因我至今没有想明白. </p>
<p>现在会了 vue-cli 之后, 就想着把网站重写了, 做成 SPA 单页应用, 这样才更像个 App.于是就有了这个项目.<br><a id="more"></a></p>
<h3 id="项目地址"><a href="#项目地址" class="headerlink" title="项目地址:"></a>项目地址:</h3><p><a href="https://github.com/Tit1e/simpleWeb" target="_blank" rel="external">https://github.com/Tit1e/simpleWeb</a></p>
<h3 id="项目描述"><a href="#项目描述" class="headerlink" title="项目描述"></a>项目描述</h3><ul>
<li>采用 vue-cli 开发</li>
<li>vue-router 进行页面路由控制</li>
<li>采用 sass CSS 预处理, 对网站整体风格进行统一控制</li>
<li>localstorage HTML5本地存储</li>
<li>ThinkPHP 后台框架</li>
<li>前后端分离</li>
</ul>
<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><ul>
<li><code>/数据库结构.sql</code> - 数据库结构,其实实际只用到了2张表而已</li>
<li><code>/program</code> - vue 项目目录</li>
<li><code>/static</code> - vue 打包后的静态资源目录</li>
<li><code>/Application/Home/View/Index/</code> - 打包后的 index.html 文件目录</li>
</ul>
<p><strong> 下篇文章将总结开发过程中遇到的问题. </strong> </p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;前阵子把今年四五月份时候写的陋网重写了. 之前用的是 vue.js, vue-resource 和 jQuery, 现在想想就算是那时候, jQuery也是完全没必要引入的.后来不知道为何网站在 PC 端列表无法渲染了, 原因是 PC 端获取到的 data 编程字符串格式了, 而我之前开发的时候明明是能正常获取的, 而且移动端是能正确渲染列表的, 这个原因我至今没有想明白. &lt;/p&gt;
&lt;p&gt;现在会了 vue-cli 之后, 就想着把网站重写了, 做成 SPA 单页应用, 这样才更像个 App.于是就有了这个项目.&lt;br&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="前端总结" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>块级元素靠右的实现方式</title>
    <link href="http://yoursite.com/2017/10/12/33.div_to_right/"/>
    <id>http://yoursite.com/2017/10/12/33.div_to_right/</id>
    <published>2017-10-12T13:07:56.000Z</published>
    <updated>2017-10-12T13:35:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>一个块级元素靠右的实现方式有那些呢? 今天从别人哪里刚刚又学到了点东西, 整理了一下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 基本结构 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"parent"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"block"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h4 id="使用-margin-属性"><a href="#使用-margin-属性" class="headerlink" title="使用 margin 属性"></a>使用 margin 属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#block</span>&#123;</div><div class="line">  <span class="attribute">margin-left</span>: auto;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将 <code>margin-left</code> 设为 <code>auto</code> 后, 元素左边的 <code>margin</code> 会被尽可能的撑大, 所以自然就把元素挤到右边去了. </p>
<h4 id="使用-position-属性"><a href="#使用-position-属性" class="headerlink" title="使用 position 属性"></a>使用 position 属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#parent</span>&#123;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#block</span>&#123;</div><div class="line">  <span class="attribute">position</span>: absolute;</div><div class="line">  <span class="attribute">right</span>: <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用定位, 绝对能把元素放到右边去. </p>
<h4 id="使用-float-属性"><a href="#使用-float-属性" class="headerlink" title="使用 float 属性"></a>使用 float 属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#block</span>&#123;</div><div class="line">  <span class="attribute">float</span>: right;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用浮动将元素浮动到右边. </p>
<h4 id="使用-text-align-属性"><a href="#使用-text-align-属性" class="headerlink" title="使用 text-align 属性"></a>使用 text-align 属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#parent</span>&#123;</div><div class="line">  <span class="attribute">text-align</span>: right;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#block</span>&#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将块设为行内元素,然后父元素使用 <code>text-align: right;</code> 是块到右边. </p>
<h4 id="使用-flex-属性"><a href="#使用-flex-属性" class="headerlink" title="使用 flex 属性"></a>使用 flex 属性</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#parent</span>&#123;</div><div class="line">  <span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: flex-end;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将父元素变为弹性容器, 然后将 <code>justify-content</code> 设为 <code>flex-end</code>, 那么容器中的弹性元素会从右开始排列. </p>
<p>以上就是我整理块级元素靠右排列的几种方式, 如有遗漏, 欢迎补充. </p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;一个块级元素靠右的实现方式有那些呢? 今天从别人哪里刚刚又学到了点东西, 整理了一下:&lt;br&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!-- 基本结构 --&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;parent&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;block&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>div 包裹 img 底部出现空隙问题</title>
    <link href="http://yoursite.com/2017/10/12/32.div-img/"/>
    <id>http://yoursite.com/2017/10/12/32.div-img/</id>
    <published>2017-10-12T11:33:53.000Z</published>
    <updated>2017-12-23T02:45:10.755Z</updated>
    
    <content type="html"><![CDATA[<p>工作中我们有时候会遇到一个 div 包裹着一个 img 的时候, img 底部和 div 之间会有空隙, 如下图所示: </p>
<p><img src="http://opzfmbyhp.bkt.clouddn.com/2017-10-12-div_img.png" alt=""></p>
<a id="more"></a>
<p>页面代码如下:<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">style</span>=<span class="string">"background-color:blueviolet"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"background-color:#000;color:#fff;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"./2.png"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></div><div class="line"></div><div class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>这是什么造成的呢? 这样看也许你看不出来, 但是像下面这样也许你就大概知道是为什么了:</p>
<p><img src="http://opzfmbyhp.bkt.clouddn.com/2017-10-12-div_img2.png" alt=""></p>
<p>没错, 就是因为 <code>&lt;img&gt;</code> 不是块级元素,所以在一个 DIV 中它相当于一个文字, 而文字是有 baseline 的, 英文四线格中, baseline 处于倒数第二条而不是最后一条, 所以在图像底部才会出现一段空隙. 所以可以推测出: 在文字变大的时候, 空隙也会相应变大:</p>
<p><img src="http://opzfmbyhp.bkt.clouddn.com/2017-10-12-div_img6.png" alt=""></p>
<p>在<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/img" target="_blank" rel="external"> MDN </a>中有这样一段文字来描述 <code>&lt;img&gt;</code> 标签: </p>
<p><img src="http://opzfmbyhp.bkt.clouddn.com/2017-10-12-div_img3.png" alt=""></p>
<p>那么什么是替换元素呢? </p>
<p><img src="http://opzfmbyhp.bkt.clouddn.com/2017-10-12-div_img4.png" alt=""></p>
<p>也就是说 <code>&lt;img&gt;</code> 是一个可以设置款高的行内元素, 是不是和 css 属性中的 <code>display: inline-block</code> 有点像呢? 不过 <code>&lt;img&gt;</code> 可是一个实打实的 <strong>行内元素</strong> (第 3 排第 4 个):</p>
<p><img src="http://opzfmbyhp.bkt.clouddn.com/2017-10-12-div_img5.png" alt=""></p>
<p>到这里已经完全了解了问题产生的原因, 那么相应解决问题的方法也就比较好找了:</p>
<ol>
<li>设置图片的 <code>vertical-align</code> 属性为 <code>bottom / top / middle</code> , 这样 <code>&lt;img&gt;</code> 的 baseline 就是最下面的线了,  也就不会产生空隙了. </li>
<li>既然因为它是替换元素的缘故, 那把它转为块级元素不就好了吗? 所以设置<code>display: block</code> 也可以解决这个问题.</li>
<li>把父元素的高度直接设置为图片想要的高度, 如果这个高度不是图片默认的高度, 再把图片的高度设为<code>height: 100%</code> 也可以解决这个问题. </li>
</ol>
<p>效果如图: </p>
<p><img src="http://opzfmbyhp.bkt.clouddn.com/2017-10-12-div_img7.png" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;工作中我们有时候会遇到一个 div 包裹着一个 img 的时候, img 底部和 div 之间会有空隙, 如下图所示: &lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://opzfmbyhp.bkt.clouddn.com/2017-10-12-div_img.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>浅谈 GET 和 POST 使用场景</title>
    <link href="http://yoursite.com/2017/10/12/31.post-and-get/"/>
    <id>http://yoursite.com/2017/10/12/31.post-and-get/</id>
    <published>2017-10-12T08:55:43.000Z</published>
    <updated>2017-12-23T02:43:09.224Z</updated>
    
    <content type="html"><![CDATA[<p>网上涉及到 GET 和 POST 的讨论大多都是对比他们的区别, 而这些对比区别的文章之间又不断地打脸, 总之就是我说你是错的,他又说我是错的, 另一个跑过来又说他是错的. 看着真的是心累. 像我这种半路出家, 又是初涉前端的新人, 暂且不去讨论这两者之间原理如何如何, 总之现在能达成一致的观点是: <strong>这两者的本质是一样的.</strong> </p>
<a id="more"></a>
<p>现在抛开那些东西不谈, 我就单单来谈谈 GET 和 POST 在语义和应用场景方面我的理解. 单单从语义上来讲, 能很容易理解 GET 和 POST 之间的区别. 很多刚接触前端的新人一开始接触这两个请求的时候可能第一直觉就是 GET 是用来获取数据的, POST 是用来发送数据的. 到后来他们可能才会知道原来 GET 是可以发送数据的, POST 也是可以单单来获取数据的. </p>
<p>虽然这两者到可以用来获取/发送数据, 但是在实际场景中, 还是要按需来使用比较合适的请求方式. 比如你要分享一片文章给朋友, 那么在文章的地址中就必须带有这篇文章的一些信息, 比如文章的 ID . 当你想分享一个带有搜索条件的页面时, 那么页面的地址中也必须包含又相应的搜索信息, 不然对方打开的是一个不带任何参数的url, 那对方怎么知道你在当时选中的文章或搜索条件是什么呢? 所以这种场景下, 用 GET 就比 POST 更加符合我们实际的应用场景. 而如果你发表了一片文章, 那么 GET 提交就不是太合适了, 因为 url 是有长度限制的, 虽然各家浏览器对 url 对长度的限制各不相同, 但是开发者又如何知道用户用什么浏览器来访问呢. 所以这种情况下, POST 明显比 GET 更加适合. </p>
<p>所以我觉得下面这些最最表面的区别从使用场景的角度来说并没有错, 因为这些的的确确是在实际的使用场景中能直观感受到的区别</p>
<blockquote>
<p>1.GET后退按钮/刷新无害，POST数据会被重新提交（浏览器应该告知用户数据会被重新提交）。</p>
<p>2.GET书签可收藏，POST为书签不可收藏。GET能被缓存，POST不能缓存 。</p>
<p>3.GET历史参数保留在浏览器历史中。POST参数不会保存在浏览器历史中。GET对数据长度有限制，当发送数据时，GET 方法向 URL 添加数据；URL 的长度是受限制的（URL 的最大长度是 2048 个字符）。POST无限制。</p>
<p>4.GET只允许 ASCII 字符。POST没有限制。也允许二进制数据。与 POST 相比，GET 的安全性较差，因为所发送的数据是 URL 的一部分。在发送密码或其他敏感信息时绝不要使用 GET ！POST 比 GET 更安全，因为参数不会被保存在浏览器历史或 web 服务器日志中。</p>
<p>5.GET的数据在 URL 中对所有人都是可见的。POST的数据不会显示在 URL 中。</p>
</blockquote>
<p>而要往深了说的话,这些答案就给人一种答非所问的感觉了. </p>
<p>所以,在问这个问题的时候最好也带上一些” GET 参数”, 比如: “ GET 和 POST 在使用场景下有什么区别?”; 再如: “ GET 和 POST 本质上有什么区别?”</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上涉及到 GET 和 POST 的讨论大多都是对比他们的区别, 而这些对比区别的文章之间又不断地打脸, 总之就是我说你是错的,他又说我是错的, 另一个跑过来又说他是错的. 看着真的是心累. 像我这种半路出家, 又是初涉前端的新人, 暂且不去讨论这两者之间原理如何如何, 总之现在能达成一致的观点是: &lt;strong&gt;这两者的本质是一样的.&lt;/strong&gt; &lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>一些工作中常用到的代码(二)</title>
    <link href="http://yoursite.com/2017/07/22/30.work-tips2/"/>
    <id>http://yoursite.com/2017/07/22/30.work-tips2/</id>
    <published>2017-07-22T12:11:41.000Z</published>
    <updated>2017-12-23T02:42:50.060Z</updated>
    
    <content type="html"><![CDATA[<h2 id="jQuery操作单选、复选框选中状态"><a href="#jQuery操作单选、复选框选中状态" class="headerlink" title="jQuery操作单选、复选框选中状态"></a>jQuery操作单选、复选框选中状态</h2><p>工作中时常会遇到使用 jQuery 操作选中、取消选中状态，之前是通过添加和移除 <code>checked</code> 属性来操作的，但是这种方法会在判断选中状态时会出现不一致的问题。使用如下方法就不会有什么问题(与第一次的内容有点重复)。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//修改选中状态</span></div><div class="line">$(<span class="string">'input[type=checkbox],input[type=radio]'</span>).prop(<span class="string">'checked'</span>,<span class="literal">true</span>);<span class="comment">//选中</span></div><div class="line">$(<span class="string">'input[type=checkbox],input[type=radio]'</span>).prop(<span class="string">'checked'</span>,<span class="literal">false</span>);<span class="comment">//取消选中</span></div><div class="line"><span class="comment">//判断是否选中</span></div><div class="line">$(<span class="string">'input[type=checkbox],input[type=radio]'</span>).prop(<span class="string">'checked'</span>);</div></pre></td></tr></table></figure></p>
<a id="more"></a>
<h2 id="使用FormData对象异步传输-form-表单数据"><a href="#使用FormData对象异步传输-form-表单数据" class="headerlink" title="使用FormData对象异步传输 form 表单数据"></a>使用FormData对象异步传输 form 表单数据</h2><p>我们工作中有时候会遇到表单需要用 Ajax 的方式传输，但是如果遇到表单元素数量比较多的情况，获取表单的数据内容会占据大量的时间，而 <code>formData</code> 可以将表单中的数据像提交表单那样将表单中的数据“打包”，然后通过 Ajax 传输。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"uploadForm"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- code... --&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></div><div class="line">    $.ajax(&#123;</div><div class="line">        <span class="attr">url</span>: <span class="string">'/upload'</span>,</div><div class="line">        <span class="attr">type</span>: <span class="string">'POST'</span>,</div><div class="line">        <span class="attr">cache</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">data</span>: <span class="keyword">new</span> FormData($(<span class="string">'#uploadForm'</span>)[<span class="number">0</span>]),</div><div class="line">        <span class="attr">processData</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">contentType</span>: <span class="literal">false</span></div><div class="line">    &#125;).done(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line"></div><div class="line">    &#125;).fail(<span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</div><div class="line"></div><div class="line">    &#125;);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p><strong>注意点</strong></p>
<ul>
<li><code>processData</code> 设置为 <code>false</code>。因为 <code>data</code> 值是 <code>FormData</code> 对象，不需要对数据做处理。</li>
<li><code>form</code> 标签添加 <code>enctype=&quot;multipart/form-data&quot;</code> 属性。</li>
<li><code>cache</code> 设置为 <code>false</code>，上传文件不需要缓存。</li>
<li><code>contentType</code> 设置为<code>false</code>。因为是由 <code>form</code> 表单构造的 <code>FormData</code>对象，且已经声明了属性 <code>enctype=&quot;multipart/form-data&quot;</code>，所以这里设置为 <code>false</code>。<h2 id="使网页文字无法被选中"><a href="#使网页文字无法被选中" class="headerlink" title="使网页文字无法被选中"></a>使网页文字无法被选中</h2>给 html 标签加上 <code>onselectstart=&quot;return false&quot;</code> 就可以实现<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onselectstart</span>=<span class="string">"return false"</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h2 id="不让-input-输入框显示历史输入记录"><a href="#不让-input-输入框显示历史输入记录" class="headerlink" title="不让 input 输入框显示历史输入记录"></a>不让 input 输入框显示历史输入记录</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h2 id="layDate日期插件，样式发生错位"><a href="#layDate日期插件，样式发生错位" class="headerlink" title="layDate日期插件，样式发生错位"></a>layDate日期插件，样式发生错位</h2><p>layDate日期插件在与 bootstrap 一起使用的时候，layDate的日期选择框按钮会发生错位的现象，在layDate的 css 文件中加入一下几行样式可解决：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.laydate_box</span>, <span class="selector-class">.laydate_box</span> * &#123;</div><div class="line">    <span class="attribute">box-sizing</span>:content-box;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="代码触发-change-事件"><a href="#代码触发-change-事件" class="headerlink" title="代码触发 change 事件"></a>代码触发 change 事件</h2><p>有些时候，我们希望用代码触发change事件，可以直接调用无参数的 <code>change()</code>方法来触发该事件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;jQuery操作单选、复选框选中状态&quot;&gt;&lt;a href=&quot;#jQuery操作单选、复选框选中状态&quot; class=&quot;headerlink&quot; title=&quot;jQuery操作单选、复选框选中状态&quot;&gt;&lt;/a&gt;jQuery操作单选、复选框选中状态&lt;/h2&gt;&lt;p&gt;工作中时常会遇到使用 jQuery 操作选中、取消选中状态，之前是通过添加和移除 &lt;code&gt;checked&lt;/code&gt; 属性来操作的，但是这种方法会在判断选中状态时会出现不一致的问题。使用如下方法就不会有什么问题(与第一次的内容有点重复)。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//修改选中状态&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;input[type=checkbox],input[type=radio]&#39;&lt;/span&gt;).prop(&lt;span class=&quot;string&quot;&gt;&#39;checked&#39;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//选中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;input[type=checkbox],input[type=radio]&#39;&lt;/span&gt;).prop(&lt;span class=&quot;string&quot;&gt;&#39;checked&#39;&lt;/span&gt;,&lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;);&lt;span class=&quot;comment&quot;&gt;//取消选中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//判断是否选中&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;input[type=checkbox],input[type=radio]&#39;&lt;/span&gt;).prop(&lt;span class=&quot;string&quot;&gt;&#39;checked&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>移动端网页底部导航被虚拟键盘顶起解决方法</title>
    <link href="http://yoursite.com/2017/07/16/29.mobile_web_footer/"/>
    <id>http://yoursite.com/2017/07/16/29.mobile_web_footer/</id>
    <published>2017-07-16T09:20:28.000Z</published>
    <updated>2017-07-16T09:52:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>在写移动端的网页应用的时候经常会遇到底部导航，或者说是底部菜单。而当触发虚拟键盘的时候，底部的导航会被顶起来，遮挡住网页内容。定位方法对此也并不管用。我这有两种解决方式（都基于jQuery）。<br><a id="more"></a><br>第一种：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//  这种方法的思路是，当输入框获得焦点的时候，就隐藏，失去焦点就显示</span></div><div class="line">$(<span class="string">'input[type=text],textarea'</span>).focus(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'footer'</span>).hide();</div><div class="line">&#125;)</div><div class="line">$(<span class="string">'input[type=text],textarea'</span>).blur(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    $(<span class="string">'footer'</span>).show();</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>但第一种方法有个缺点，就是当用户输入完成后可能只是收起了键盘，而此时输入框并没有失去焦点，但底部的导航还是隐藏状态，这样容易给用户造成困惑，所以第二种方法能很好地解决这个问题。</p>
<p>第二种：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这种方法的思路是监听窗口高度的变化来判断是否有触发虚拟键盘，以此来控制底部导航的显示与隐藏</span></div><div class="line"><span class="keyword">var</span> height = $(<span class="built_in">window</span>),height();</div><div class="line"><span class="built_in">window</span>.onresize = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="keyword">var</span> n_height = $(<span class="built_in">window</span>).height();</div><div class="line">    <span class="keyword">if</span>( height != n_height )&#123;</div><div class="line">        $(<span class="string">'footer'</span>).hide();</div><div class="line">    &#125;<span class="keyword">else</span>&#123;</div><div class="line">        $(<span class="string">'footer'</span>).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第二种方法也间接解释了为什么会定位失效，因为因为虚拟键盘是把整个浏览器窗口顶起来了，而不是覆盖在浏览器上，所以定位在底部还是会在输入法上方。</p>
<p>上述第一种方法来自网络，由于时间太久，来源已无从考察；第二种方法是同事的思路，至于来源我并不清楚是来自网络还是自己远程，我只是在此做一个总结。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在写移动端的网页应用的时候经常会遇到底部导航，或者说是底部菜单。而当触发虚拟键盘的时候，底部的导航会被顶起来，遮挡住网页内容。定位方法对此也并不管用。我这有两种解决方式（都基于jQuery）。&lt;br&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>你快看那片星空</title>
    <link href="http://yoursite.com/2017/05/31/28.The_star_sky%20/"/>
    <id>http://yoursite.com/2017/05/31/28.The_star_sky /</id>
    <published>2017-05-31T11:56:09.000Z</published>
    <updated>2017-08-05T13:43:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>二十五日和同事一起去滨江的彩虹跑道相约跑步，跑完同事问我端午露营去吗？他说起的那一刻我非常心动，但想了想要回家，我还是拒绝了。第二天，我挣扎了好久还是决定去。因为觉得自己的生活实在太无聊，两点一线。<br><a id="more"></a><br>龙哥说他要去拍星空，这才是驱使我去的真正原因。我真的很喜欢星空啊！小时候天黑了，村子里也就黑了，天上还有很多的星星，但是现在天黑了，灯还亮着，星星都不见了。</p>
<p>曾经用 <strong>星灯亦是心灯</strong> 做过很长时间的网名。高中的时候喜欢听《星星点灯》，天上的星星也是我心中的明灯，这就是那个名字的来历。后来网名换了，换成了 <strong>evollyone</strong>、<strong>Tit1e</strong>，但我最喜欢的还是 <strong>星灯亦是心灯</strong> 。</p>
<p>我心中的明灯未曾灭过。</p>
<p>晚上九点多的时候，星星已经升起，但是由于露营地的照明灯太亮，站在下面只看得到稀疏的几颗星星。于是我和龙哥便一同登上天池大坝。1000米的海拔和200阶阶梯，登上大坝时已经气喘吁吁。一抬头，星星不再稀疏，北斗七星悬在头顶。这是我见过最美的星空。</p>
<p>十一点多的时候再次登坝，星星更密了，银河已从东边升起。架起拍星轨的相机后，我们一行人去了旁边拍照玩。</p>
<p>我望着头顶的星空，想着如果你在我旁边和我一同抬头仰望这片星空那该有多好。你望着星空，我望着你，透过你的眼睛感受你眼里温柔的星空。我的眼里，有星空，有你。</p>
<center><br><br><img src="http://opzfmbyhp.bkt.clouddn.com/2017-05-31-%E6%98%9F%E8%BD%A8%E5%89%AF%E6%9C%AC.jpg" alt=""><br><br></center>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;二十五日和同事一起去滨江的彩虹跑道相约跑步，跑完同事问我端午露营去吗？他说起的那一刻我非常心动，但想了想要回家，我还是拒绝了。第二天，我挣扎了好久还是决定去。因为觉得自己的生活实在太无聊，两点一线。&lt;br&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>一些工作中常用到的代码</title>
    <link href="http://yoursite.com/2017/05/14/27.work-tips/"/>
    <id>http://yoursite.com/2017/05/14/27.work-tips/</id>
    <published>2017-05-14T12:17:00.000Z</published>
    <updated>2017-05-15T10:13:39.000Z</updated>
    
    <content type="html"><![CDATA[<p>很久没有写博客了，回原来的公司后就基本上没有更新了，到现在也快两个月了。这个博客其实很早前久应该写了，然后一直拖拖拖拖到现在。之前我全部记在了bear中，现在搬到博客上来，后续有更新就在现在基础上接着更新。其实不光涉及到工作中经常用的，还有一些经常是平时折腾的时候记下来怕日后忘记的。</p>
<p><strong>因为公司业务基本用的是jQuery，所以这里用到的代码基本上是基于jQuery。</strong></p>
<h2 id="iframe动态改变高度"><a href="#iframe动态改变高度" class="headerlink" title="iframe动态改变高度"></a>iframe动态改变高度</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//页面加载时获取iframe高度</span></div><div class="line">$(<span class="string">"#iframepage"</span>).on(<span class="string">'load'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> mainheight = $(<span class="keyword">this</span>).contents().find(<span class="string">"body"</span>).height() + <span class="number">30</span>;</div><div class="line">    $(<span class="keyword">this</span>).height(mainheight);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//动态改变iframe高度</span></div><div class="line">setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> mainheight = $(<span class="string">"#iframepage"</span>).contents().find(<span class="string">"body"</span>).height() + <span class="number">30</span>;</div><div class="line">    $(<span class="string">"#iframepage"</span>).height(mainheight);</div><div class="line">&#125;, <span class="number">200</span>);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="滚动条到底部自动加载数据"><a href="#滚动条到底部自动加载数据" class="headerlink" title="滚动条到底部自动加载数据"></a>滚动条到底部自动加载数据</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//滚动条到底部加载</span></div><div class="line">$(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    ajaxFlag = <span class="literal">true</span>;</div><div class="line">    <span class="keyword">var</span> page = <span class="number">10</span>;</div><div class="line">    <span class="keyword">var</span> num = page;</div><div class="line">    $(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> scrollTop = $(<span class="keyword">this</span>).scrollTop();                             <span class="comment">// 滚动条距离顶部的高度</span></div><div class="line">        <span class="keyword">var</span> scrollHeight = $(<span class="built_in">document</span>).height();                          <span class="comment">// 当前页面的总高度</span></div><div class="line">        <span class="keyword">var</span> windowHeight = $(<span class="keyword">this</span>).height();                              <span class="comment">// 当前可视的页面高度</span></div><div class="line">        <span class="keyword">var</span> expectHeight = <span class="number">0</span>;                                               <span class="comment">// 预加载距离</span></div><div class="line">        <span class="keyword">if</span> (scrollTop + windowHeight &gt;= scrollHeight - expectHeight) &#123;    <span class="comment">// 距离顶部+当前高度 &gt;=文档总高度 即代表滑动到底部</span></div><div class="line">            <span class="comment">//code....</span></div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="获取url中的参数"><a href="#获取url中的参数" class="headerlink" title="获取url中的参数"></a>获取url中的参数</h2><p><em>公司后端用的thinkphp，所以获取参数直接用TP的I方法就可以，上次无意间搜到了，就顺便存了</em><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getQueryString</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span> + name + <span class="string">"=([^&amp;]*)(&amp;|$)"</span>, <span class="string">"i"</span>);</div><div class="line">    <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</div><div class="line">    <span class="keyword">if</span> (r != <span class="literal">null</span>) <span class="keyword">return</span> <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="判断单选或复选框是否被选中以及改变选中状态"><a href="#判断单选或复选框是否被选中以及改变选中状态" class="headerlink" title="判断单选或复选框是否被选中以及改变选中状态"></a>判断单选或复选框是否被选中以及改变选中状态</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ($(<span class="keyword">this</span>).find(<span class="string">'input'</span>).prop(<span class="string">"checked"</span>)) &#123;</div><div class="line">    $(<span class="keyword">this</span>).find(<span class="string">'input'</span>).removeAttr(<span class="string">'checked'</span>);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    $(<span class="keyword">this</span>).find(<span class="string">'input'</span>).attr(<span class="string">"checked"</span>, <span class="string">"checked"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="用阴影实现遮罩"><a href="#用阴影实现遮罩" class="headerlink" title="用阴影实现遮罩"></a>用阴影实现遮罩</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-tag">inset</span> 0 0 20<span class="selector-tag">px</span> 1<span class="selector-tag">px</span>, 0 0 5<span class="selector-tag">px</span> 2000<span class="selector-tag">px</span> <span class="selector-tag">rgba</span>(0, 0, 0, 0<span class="selector-class">.8</span>);</div></pre></td></tr></table></figure>
<h2 id="实时监听输入框变化"><a href="#实时监听输入框变化" class="headerlink" title="实时监听输入框变化"></a>实时监听输入框变化</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#media_name'</span>).on(<span class="string">'input propertychange'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">   <span class="comment">//code.....</span></div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<h2 id="去除chrome表单黄色背景"><a href="#去除chrome表单黄色背景" class="headerlink" title="去除chrome表单黄色背景"></a>去除chrome表单黄色背景</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span>, </div><div class="line"><span class="selector-tag">textarea</span><span class="selector-pseudo">:-webkit-autofill</span>, </div><div class="line"><span class="selector-tag">select</span><span class="selector-pseudo">:-webkit-autofill</span> &#123; </div><div class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1000px</span> white inset; </div><div class="line">&#125;</div><div class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=text]</span><span class="selector-pseudo">:focus</span>, <span class="selector-tag">input</span><span class="selector-attr">[type=password]</span><span class="selector-pseudo">:focus</span>, <span class="selector-tag">textarea</span><span class="selector-pseudo">:focus</span> &#123;</div><div class="line">    <span class="attribute">-webkit-box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1000px</span> white inset; </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="ThinkPHP时间戳格式化"><a href="#ThinkPHP时间戳格式化" class="headerlink" title="ThinkPHP时间戳格式化"></a>ThinkPHP时间戳格式化</h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//如果在Action里 </span></div><div class="line">$time = date(<span class="string">"Y-m-d"</span>, $time);</div><div class="line"><span class="comment">//如果在模板里 </span></div><div class="line">&#123;$time|date=<span class="string">'Y-m-d'</span>,<span class="comment">##&#125;</span></div></pre></td></tr></table></figure>
<h2 id="ThinkPHP去掉url中的index-php"><a href="#ThinkPHP去掉url中的index-php" class="headerlink" title="ThinkPHP去掉url中的index.php"></a>ThinkPHP去掉url中的index.php</h2><p>在应用的根目录下面新建一个 .htaccess 文件(linux环境下)。在文件里面加入如下代码：<br><figure class="highlight apache"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="section">&lt;IfModule mod_rewrite.c&gt;</span></div><div class="line"><span class="attribute"><span class="nomarkup">RewriteEngine</span></span> <span class="literal">on</span></div><div class="line"><span class="attribute"><span class="nomarkup">RewriteCond</span></span> <span class="variable">%&#123;REQUEST_FILENAME&#125;</span> !-d</div><div class="line"><span class="attribute"><span class="nomarkup">RewriteCond</span></span> <span class="variable">%&#123;REQUEST_FILENAME&#125;</span> !-f</div><div class="line"><span class="attribute"><span class="nomarkup">RewriteRule</span></span> ^(.*)$ index.php/<span class="number">$1</span><span class="meta"> [QSA,PT,L]</span></div><div class="line"><span class="section">&lt;/IfModule&gt;</span></div></pre></td></tr></table></figure></p>
<p>其实以上就已经实现了去除 url 中的 index.php 字符直接访问应用了。但是仅仅以上两步操作还会出现的一个问题就是 thinkphp 的常量 <strong>URL</strong> 中还是会自动带上 index.php 这段字符串，彻底解决这个问题的办法是在项目的配置文件里加上如一条如下配置：<code>&#39;URL_MODEL&#39;=&gt;&#39;2&#39;</code></p>
<h2 id="vue-for循环，把内容填充到-href，src中"><a href="#vue-for循环，把内容填充到-href，src中" class="headerlink" title="vue for循环，把内容填充到 href，src中"></a>vue for循环，把内容填充到 href，src中</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">:href=<span class="string">'list.href'</span></span></div><div class="line"><span class="symbol">:src=<span class="string">'list.src'</span></span></div></pre></td></tr></table></figure>
<h2 id="首行缩进css"><a href="#首行缩进css" class="headerlink" title="首行缩进css"></a>首行缩进css</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">text-indent</span><span class="selector-pseudo">:2em</span>;</div></pre></td></tr></table></figure>
<h2 id="iphone动态加载元素单击无效问题"><a href="#iphone动态加载元素单击无效问题" class="headerlink" title="iphone动态加载元素单击无效问题"></a>iphone动态加载元素单击无效问题</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">'#list'</span>).delegate(<span class="string">'.tbody'</span>, <span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">'#loading'</span>).show();</div><div class="line">    location.href = $(<span class="keyword">this</span>).attr(<span class="string">'data'</span>);</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h2 id="去除移动端点击半透明感遮罩"><a href="#去除移动端点击半透明感遮罩" class="headerlink" title="去除移动端点击半透明感遮罩"></a>去除移动端点击半透明感遮罩</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">-webkit-tap-highlight-color</span>: <span class="selector-tag">rgba</span>(0,0,0,0);</div></pre></td></tr></table></figure>
<h2 id="图片和文字垂直水平居中"><a href="#图片和文字垂直水平居中" class="headerlink" title="图片和文字垂直水平居中"></a>图片和文字垂直水平居中</h2><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#add_supplier</span> &#123;</div><div class="line">    <span class="attribute">line-height</span>: <span class="number">2rem</span>;</div><div class="line">    <span class="attribute">font-size</span>: <span class="number">1.2rem</span><span class="meta">!important</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#add_supplier</span>&gt;<span class="selector-tag">div</span> &#123;</div><div class="line">    <span class="attribute">display</span>: table;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">0</span> auto;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#add_supplier</span> <span class="selector-tag">span</span> &#123;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#00AC5A</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-id">#add_supplier</span> <span class="selector-tag">img</span> &#123;</div><div class="line">    <span class="attribute">height</span>: <span class="number">50%</span>;</div><div class="line">    <span class="attribute">float</span>: left;</div><div class="line">    <span class="attribute">margin-right</span>: <span class="number">0.2rem</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">id</span>=<span class="string">"add_supplier"</span>&gt;</span></div><div class="line">       <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">           <span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"Public/img/company/add.png"</span>&gt;</span></div><div class="line">               <span class="tag">&lt;<span class="name">span</span>&gt;</span>添加供应商信息<span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line">           <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">       <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">   <span class="tag">&lt;/<span class="name">li</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="ThinkPHP用法"><a href="#ThinkPHP用法" class="headerlink" title="ThinkPHP用法"></a>ThinkPHP<eq>用法</eq></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//name中不用加$</span></div><div class="line">&lt;eq name=<span class="string">"Think.get.pm"</span> value=<span class="string">"1"</span>&gt;checked&lt;/eq&gt;</div></pre></td></tr></table></figure>
<p>第一次大概就这么点，其他的之后会继续添加。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久没有写博客了，回原来的公司后就基本上没有更新了，到现在也快两个月了。这个博客其实很早前久应该写了，然后一直拖拖拖拖到现在。之前我全部记在了bear中，现在搬到博客上来，后续有更新就在现在基础上接着更新。其实不光涉及到工作中经常用的，还有一些经常是平时折腾的时候记下来怕日后忘记的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因为公司业务基本用的是jQuery，所以这里用到的代码基本上是基于jQuery。&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;iframe动态改变高度&quot;&gt;&lt;a href=&quot;#iframe动态改变高度&quot; class=&quot;headerlink&quot; title=&quot;iframe动态改变高度&quot;&gt;&lt;/a&gt;iframe动态改变高度&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//页面加载时获取iframe高度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&quot;#iframepage&quot;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&#39;load&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mainheight = $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;).contents().find(&lt;span class=&quot;string&quot;&gt;&quot;body&quot;&lt;/span&gt;).height() + &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;).height(mainheight);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//动态改变iframe高度&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setInterval(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; mainheight = $(&lt;span class=&quot;string&quot;&gt;&quot;#iframepage&quot;&lt;/span&gt;).contents().find(&lt;span class=&quot;string&quot;&gt;&quot;body&quot;&lt;/span&gt;).height() + &lt;span class=&quot;number&quot;&gt;30&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    $(&lt;span class=&quot;string&quot;&gt;&quot;#iframepage&quot;&lt;/span&gt;).height(mainheight);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计笔记（三）</title>
    <link href="http://yoursite.com/2017/03/07/26.jsNote3/"/>
    <id>http://yoursite.com/2017/03/07/26.jsNote3/</id>
    <published>2017-03-07T02:00:35.000Z</published>
    <updated>2017-12-22T13:55:16.297Z</updated>
    
    <content type="html"><![CDATA[<h4 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h4><ul>
<li><p>对象</p>
<ul>
<li>对象拥有多个属性，用逗号隔开，并且最后一个属性后面不能加逗号</li>
<li><p>访问对象属性的方法有两种，用<code>.</code>和用<code>[&#39;XXX&#39;]</code></p>
<ul>
<li>例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;</div><div class="line">    <span class="string">'first name'</span> : <span class="string">'Chen'</span>,  <span class="comment">//这种情况下属性名要用字符串形式</span></div><div class="line">    age : <span class="number">10</span></div><div class="line">&#125;</div><div class="line">obj.age;  <span class="comment">//10</span></div><div class="line">obj[<span class="string">'first name'</span>];  <span class="comment">//"Chen"</span></div><div class="line"><span class="comment">//方括号形式可以用变量来取值</span></div><div class="line"><span class="keyword">var</span> firstName = <span class="string">'first name'</span>;</div><div class="line">obj[firstName];  <span class="comment">//"Chen"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a></li>
</ul>
</li>
<li><p>数组</p>
<ul>
<li><p>不要使用逗号创建数组某个长度的数组，也不要在数组末尾加逗号，IE和其他浏览器数组长度会产生分歧</p>
<ul>
<li>例：  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [,,,,,];  <span class="comment">//不要使用这种写法</span></div><div class="line"><span class="keyword">var</span> b = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,];  <span class="comment">//不要使用这种写法</span></div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);  <span class="comment">//使用构造函数创建数组的时候，传入的参数如果只有一个并且是数字，则会创建相应长度的数组</span></div><div class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">// [1,2]</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>数组元素的读取于修改</p>
<ul>
<li>例：  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>];</div><div class="line">num[<span class="number">0</span>];  <span class="comment">//1</span></div><div class="line">num[<span class="number">3</span>];  <span class="comment">//4</span></div><div class="line">num[<span class="number">10</span>];  <span class="comment">//undefined 不报错</span></div><div class="line"></div><div class="line">num[<span class="number">0</span>] = <span class="number">10</span>;  <span class="comment">//修改数组</span></div><div class="line">num;  <span class="comment">//[10,2,3,4,5,6]</span></div><div class="line"></div><div class="line">num[<span class="number">6</span>] = <span class="number">7</span>;  <span class="comment">//新增元素</span></div><div class="line">num;  <span class="comment">//[10,2,3,4,5,6,7]</span></div><div class="line"></div><div class="line">num.length = <span class="number">5</span>;  <span class="comment">//重新设置数组长度，超出长度的元素会被删除</span></div><div class="line">num;  <span class="comment">//[10, 2, 3, 4, 5]</span></div><div class="line"></div><div class="line">num[<span class="number">99</span>] = <span class="number">100</span>;  <span class="comment">//修改数字长度，6-98的元素都是undefined</span></div><div class="line">num.length;  <span class="comment">//100</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>操作数组<strong>（例子代码中没有重新声明默认使用之前的变量）</strong></p>
<ul>
<li><p><code>join()</code>方法返回字符串，将数组中的元素用指定的元素连接起来</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">num.join();  <span class="comment">//"1,2,3,4,5"</span></div><div class="line">num.join(<span class="string">' '</span>);  <span class="comment">//"1 2 3 4 5"</span></div><div class="line">num.join(<span class="string">'|'</span>);  <span class="comment">//"1|2|3|4|5"</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>push()</code>方法可以在数组末尾添加新元素，并且返回新数组的长度，也可以一次添加多个元素</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">num.push(<span class="number">6</span>);</div><div class="line">num;  <span class="comment">//[1,2,3,4,5,6]</span></div><div class="line">num.push(<span class="number">7</span>,<span class="number">8</span>);</div><div class="line">num;  <span class="comment">//[1,2,3,4,5,6,7,8]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>pop()</code>方法将移除数组的最后一项，并且返回移除项</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">num.pop();  <span class="comment">//8</span></div><div class="line">num;  <span class="comment">//[1,2,3,4,5,6,7]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>shift()</code>方法将移除数组第一项，并且返回移除项</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">num.shift();  <span class="comment">//1</span></div><div class="line">num;  <span class="comment">//[2,3,4,5,6,7]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>unshift()</code>方法作用类似push(),不过是向数组前端添加一个或多个元素，并返回新数组长度</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">num.unshift(<span class="number">1</span>);  <span class="comment">//7 </span></div><div class="line">num;  <span class="comment">//[1,2,3,4,5,6,7]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>reverse()</code>方法会逆序数组</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">num.reverse();  <span class="comment">//[7, 6, 5, 4, 3, 2, 1]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>sort()</code>方法会将数组中的元素转换为字符串，然后进行比较</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num2 = [<span class="string">'a'</span>,<span class="string">'g'</span>,<span class="string">'e'</span>,<span class="string">'v'</span>];</div><div class="line">num2.sort();  <span class="comment">//["a", "e", "g", "v"]</span></div><div class="line"><span class="comment">//sort()支持传入一个指定函数来自定义排序顺序，但是遵循以下规则：</span></div><div class="line">    <span class="number">1.</span>若 a 小于 b，在排序后的数组中 a 应该出现在 b 之前，则返回一个小于 <span class="number">0</span> 的值。</div><div class="line">    <span class="number">2.</span>若 a 等于 b，则返回 <span class="number">0</span>。</div><div class="line">    <span class="number">3.</span>若 a 大于 b，则返回一个大于 <span class="number">0</span> 的值。</div><div class="line"><span class="keyword">var</span> str = [<span class="string">'basketball'</span>,<span class="string">'atom'</span>,<span class="string">'cat'</span>,<span class="string">'do'</span>];</div><div class="line">str.sort();  <span class="comment">//["atom", "basketball", "cat", "do"]</span></div><div class="line"><span class="comment">//如果我们想根据字符串长度来排序，那么我们要写一个比较函数：</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">val1,val2</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> val1.length-val2.length;</div><div class="line">&#125;</div><div class="line">str.sort(compare);  <span class="comment">//["do", "cat", "atom", "basketball"]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>concat()</code>可以复制目标数组，并且传入新元素到复制后的数组，返回一个新数组，如果不传参数，那么就是单纯的复制一个数组,并且是独立的一个数组</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.concat(<span class="number">6</span>);  <span class="comment">//[1,2,3,4,5,6]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>slice()</code>方法可以截取目标数组为一个新数组，接受两个参数，第一个是截取开始位置，第二个是结束位置，但是返回的新数组中不包括结束位置处的元素</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">arr.slice(<span class="number">1</span>,<span class="number">4</span>);  <span class="comment">//[2,3,4] 位置4处的元素为5，但是没有取到5</span></div><div class="line">arr.silice(<span class="number">0</span>);  <span class="comment">//[1,2,3,4,5] 只传入起始位置，默认取到最后的元素，如果传入0，则相当于复制整个数组</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>splice()</code>方法能对数组进行删除，插入，替换操作，接受三个参数，第一个是开始删除的位置，第二个是删除的个数，第三个是插入的元素，返回删除的元素，没有删除则返回空数组</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">arr.splice(<span class="number">0</span>,<span class="number">2</span>);  <span class="comment">//[1,2];  删除数组前两项</span></div><div class="line">arr;  <span class="comment">//[3,4,5];</span></div><div class="line"></div><div class="line">arr.splice(<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">2</span>);  <span class="comment">//[]   在数组最开始处新增元素</span></div><div class="line">arr;  <span class="comment">//[1, 2, 3, 4, 5]</span></div><div class="line"></div><div class="line">arr.splice(<span class="number">2</span>,<span class="number">1</span>,<span class="number">6</span>);  <span class="comment">//[3]  替换索引2处的元素为6</span></div><div class="line">arr;  <span class="comment">//[1, 2, 6, 4, 5]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>indexOf()</code>和<code>lastIndexOf()</code>方法用于查找数组中的某项的索引位置,只是<code>indexOf()</code>从第一项开始找，而<code>lastIndexOf()</code>从最后一项开始找,若没找到返回-1,<code>indexOf()</code>查找时用的是严格相等，可以传两个参数，查找的项和起始查找位置</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.indexOf(<span class="number">2</span>);  <span class="comment">//1</span></div><div class="line">arr.lastIndexOf(<span class="number">2</span>);  <span class="comment">//1</span></div><div class="line">arr.indexOf(<span class="number">10</span>);  <span class="comment">//-1</span></div><div class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">"Nicholas"</span> &#125;;</div><div class="line"><span class="keyword">var</span> people = [&#123; <span class="attr">name</span>: <span class="string">"Nicholas"</span> &#125;];</div><div class="line"><span class="keyword">var</span> morePeople = [person];</div><div class="line">alert(people.indexOf(person));     <span class="comment">//-1  因为person中的&#123; name: "Nicholas" &#125;和people中的&#123; name: "Nicholas" &#125;是两个不同的对象，因此严格相等的情况下是不成立的，因此返回-1</span></div><div class="line">alert(morePeople.indexOf(person)); <span class="comment">//0</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>every()</code>方法会对数组中的每一项执行一个给定的函数，如果该函数对每一项都返回true，那么返回true,传入的函数接受三个参数，数组项的值，该项在数组中的位置和数组对象本身</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.every(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (item &lt; <span class="number">6</span>);</div><div class="line">&#125;)  <span class="comment">//true</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>some()</code>方法和<code>every()</code>方法类似，<code>some()</code>方法会对数组中的每一项执行一个给定的函数，如果该函数对任意一项或多项返回true，那就返回true,传入的函数接受三个参数，数组项的值，该项在数组中的位置和数组对象本身</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.some(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (item &lt; <span class="number">2</span>);</div><div class="line">&#125;)  <span class="comment">//true</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>filter()</code>方法会对数组中的每一项执行一个给定的函数，返回一个函数执行结果为true项的数组，传入的函数接受三个参数，数组项的值，该项在数组中的位置和数组对象本身</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (item &lt; <span class="number">2</span>);</div><div class="line">&#125;)  <span class="comment">//[1]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>forEach()</code>方法会对数组中的每一项执行一个给定的函数，该方法没有返回值</p>
</li>
<li><p><code>map()</code>方法会对数组中的每一项执行一个给定的函数，返回每次调用结果组成的数组</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.map(<span class="function"><span class="keyword">function</span>(<span class="params">item,index,array</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (item+<span class="number">1</span>);</div><div class="line">&#125;)  <span class="comment">//[2, 3, 4, 5, 6]</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>reduce()</code>和<code>reduceRight()</code>方法会迭代数组所有项，然后构建一个最终返回的值，这两个方法接受两个参数，第一个参数为传入的函数和作为归并的初始值，而传给<code>reduce()</code>和<code>reduceRight()</code>的函数接受四个参数：前一个值，当前值，项的索引和数组对象</p>
  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,item,index,array</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (pre+item);</div><div class="line">&#125;)  <span class="comment">//15</span></div><div class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</div><div class="line">arr.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">pre,item,index,array</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> (pre+item);</div><div class="line">&#125;,<span class="number">10</span>)  <span class="comment">//25</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h4><ul>
<li><p>函数定义方式</p>
<ul>
<li><p>函数声明</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//code...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>函数表达式(这种方式定义的函数需要在结尾加<code>;</code>)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="comment">//code...</span></div><div class="line">&#125;;</div></pre></td></tr></table></figure>
</li>
<li><p>函数声明方式定义的函数的函数，声明可以写在调用之后，因为无论写在哪，在执行前声明的函数都会被提升到顶部，然后执行下面的代码。而表达式定义的函数不行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">fn();</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"Hello!"</span>);</div><div class="line">&#125;   <span class="comment">//正常执行</span></div><div class="line"></div><div class="line">fn2();</div><div class="line"><span class="keyword">var</span> fn2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    alert(<span class="string">"World!"</span>);</div><div class="line">&#125;  <span class="comment">//报错</span></div></pre></td></tr></table></figure>
</li>
<li><p>函数中的<code>this</code>指向调用的对象，如果全局下调用，则<code>this</code>指向<code>window</code>，如果是某个对象调用则是指向这个对象</p>
</li>
<li>函数有两个属性，<code>length</code>和<code>prototype</code>，<code>length</code>代表函数传入参数的个数，而<code>prototype</code>是保存引用类型所有实例方法的真正所在。像<code>toString()</code>和<code>valueOf()</code>等方法都保存在这个属性中。<code>prototype</code>属性不可枚举，无法用<code>for in</code>发现。</li>
<li>每个函数都包含两个不是通过继承的来的方法<code>call()</code>和<code>apply()</code>，关于这两个方法的详细解释可参考<a href="http://tit1e.xyz/2017/03/03/25.apply-and-call/" target="_blank" rel="external">apply和call的区别</a></li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;引用类型&quot;&gt;&lt;a href=&quot;#引用类型&quot; class=&quot;headerlink&quot; title=&quot;引用类型&quot;&gt;&lt;/a&gt;引用类型&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;对象&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对象拥有多个属性，用逗号隔开，并且最后一个属性后面不能加逗号&lt;/li&gt;
&lt;li&gt;&lt;p&gt;访问对象属性的方法有两种，用&lt;code&gt;.&lt;/code&gt;和用&lt;code&gt;[&amp;#39;XXX&amp;#39;]&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;例：&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&#39;first name&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;Chen&#39;&lt;/span&gt;,  &lt;span class=&quot;comment&quot;&gt;//这种情况下属性名要用字符串形式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    age : &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;obj.age;  &lt;span class=&quot;comment&quot;&gt;//10&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;obj[&lt;span class=&quot;string&quot;&gt;&#39;first name&#39;&lt;/span&gt;];  &lt;span class=&quot;comment&quot;&gt;//&quot;Chen&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//方括号形式可以用变量来取值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; firstName = &lt;span class=&quot;string&quot;&gt;&#39;first name&#39;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;obj[firstName];  &lt;span class=&quot;comment&quot;&gt;//&quot;Chen&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="高程笔记" scheme="http://yoursite.com/tags/%E9%AB%98%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计笔记（二）</title>
    <link href="http://yoursite.com/2017/03/06/25.jsNote2/"/>
    <id>http://yoursite.com/2017/03/06/25.jsNote2/</id>
    <published>2017-03-06T05:58:35.000Z</published>
    <updated>2017-12-22T13:52:32.674Z</updated>
    
    <content type="html"><![CDATA[<h4 id="操作符"><a href="#操作符" class="headerlink" title="操作符"></a>操作符</h4><ul>
<li><code>++</code>和<code>--</code>操作符<ul>
<li><code>age++</code>和<code>++age</code>的区别在于<code>age++</code>是先运算后+1，而<code>++age</code>是先+1后运算,<code>--</code>操作同理<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">    <span class="keyword">var</span> age = <span class="number">18</span>;</div><div class="line">    <span class="keyword">var</span> nextAge = age++;</div><div class="line">    age;  <span class="comment">//19;</span></div><div class="line">    nextAge;  <span class="comment">//18</span></div><div class="line">    <span class="comment">//上面的运算结果顺序其实是这样的：</span></div><div class="line">    <span class="keyword">var</span> age = <span class="number">18</span>;</div><div class="line">    <span class="keyword">var</span> nextAge = age;</div><div class="line">    age = age + <span class="number">1</span>；</div><div class="line">----------------------------------</div><div class="line">    <span class="keyword">var</span> age = <span class="number">18</span>;</div><div class="line">    <span class="keyword">var</span> nextAge = ++age;</div><div class="line">    age;  <span class="comment">//19</span></div><div class="line">    nextAge;  <span class="comment">//19</span></div><div class="line">    <span class="comment">//这次的运算结果是这样的：</span></div><div class="line">    <span class="keyword">var</span> age = <span class="number">18</span>;</div><div class="line">    age = age + <span class="number">1</span>；</div><div class="line">    <span class="keyword">var</span> nextAge = age;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<a id="more"></a>
<ul>
<li><p><code>+</code>和<code>-</code>操作符</p>
<ul>
<li><code>+</code>和<code>-</code>操作符放在数字前面，<code>+</code>操作符对数字无影响，<code>-</code>操作符是将数字变为负数</li>
<li><code>+</code>和<code>-</code>操作符放在非数字前面，则这两个操作符会像<code>Number()</code>一样对这个值进行转换</li>
<li><code>+</code>操作符用一个数字和一个字符串相加的时候，数字会先被转换为字符串，然后进行拼接操作</li>
<li>例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = -<span class="literal">true</span>;</div><div class="line">a; <span class="comment">//-1</span></div><div class="line"><span class="keyword">var</span> b = +<span class="literal">true</span></div><div class="line">b;  <span class="comment">//1</span></div><div class="line"><span class="keyword">var</span> c = <span class="number">1</span> + <span class="string">'1'</span>;</div><div class="line">c;  <span class="comment">//"11"</span></div><div class="line"><span class="keyword">var</span> d = <span class="string">'1'</span> + <span class="number">1</span>;</div><div class="line">d;  <span class="comment">//"11"</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>=</code>、<code>==</code>和<code>===</code> </p>
<ul>
<li><code>=</code>表示赋值</li>
<li><code>==</code>只比较左右两边的值，不比较数据类型</li>
<li><code>===</code>全等，比较左右两边的值和数据类型</li>
<li>例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">5</span>;</div><div class="line">a;  <span class="comment">//5</span></div><div class="line"><span class="number">5</span> == <span class="string">'5'</span>;  <span class="comment">//true</span></div><div class="line"><span class="number">5</span> === <span class="string">'5'</span>  <span class="comment">//false</span></div><div class="line"><span class="number">5</span> === <span class="number">5</span>;  <span class="comment">//true</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h4><ul>
<li><p><code>continue</code>和<code>break</code>语句</p>
<ul>
<li>循环中<code>continue</code>会立即停止当前循环，从头开始执行循环</li>
<li>循环中<code>break</code>会立即<strong>退出</strong>当前循环，并执行循环后面的代码</li>
<li>例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">  <span class="keyword">if</span>(i==<span class="number">5</span>)&#123;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">  num = i;</div><div class="line">&#125;</div><div class="line">alert(num); <span class="comment">//4</span></div><div class="line">----------------------</div><div class="line">  <span class="keyword">var</span> num;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)&#123;</div><div class="line">      <span class="keyword">if</span>(i==<span class="number">5</span>)&#123;</div><div class="line">          <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">  num =i;</div><div class="line">  &#125;</div><div class="line">alert(num);  <span class="comment">//9</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>switch</code>语句</p>
<ul>
<li><code>switch</code>语句中每个case后面都需要加一个<code>break;</code></li>
<li><code>default</code>表示没有上述任何条件匹配是默认执行的动作，同<code>if</code>的<code>else</code></li>
</ul>
</li>
</ul>
<h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><ul>
<li><p><code>argunments</code>对象</p>
<ul>
<li><p><code>argunments</code>对象是一个类数组，里面存的是调用函数时传入里面的参数，可以在函数内部直接获取到它，并且可以用获取数组元素的方法获取传入的参数</p>
<ul>
<li>例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="built_in">arguments</span>,<span class="built_in">arguments</span>.length,<span class="built_in">arguments</span>[<span class="number">0</span>]);</div><div class="line">&#125;</div><div class="line">fn(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>);  <span class="comment">//[1,2,3,4,5] 5  1</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>如果出现两个同名函数，则后定义的函数有效，前定义的函数无效</p>
<h4 id="基本类型和引用类型"><a href="#基本类型和引用类型" class="headerlink" title="基本类型和引用类型"></a>基本类型和引用类型</h4></li>
</ul>
</li>
<li><p>定义</p>
<ul>
<li>基本类型：简单的数据段，如Undefined，Null，Number，String，Boolean类型的值，栈内存存放这些对象的地址</li>
<li>引用类型：有可能由多个值构成的对象，如Object，Function，Array等类型的值，堆内存存放这些具体对象</li>
<li>例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> name = <span class="string">"Tit1e"</span>;  <span class="comment">//基本类型</span></div><div class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();  <span class="comment">//引用类型</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>复制变量值</p>
<ul>
<li>将基本类型复制给一个另一个变量，这两个变量互相独立，原变量重新赋值都不会影响复制后的变量</li>
<li>将引用类型复制给一个另一个变量，改变饮用类型值的内容，复制的值也会相应的改变<ul>
<li>例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//基本类型复制</span></div><div class="line"><span class="keyword">var</span> a = <span class="number">123</span>;</div><div class="line"><span class="keyword">var</span> b = a;</div><div class="line">a = <span class="number">456</span>;</div><div class="line">a;  <span class="comment">//456</span></div><div class="line">b;  <span class="comment">//123</span></div><div class="line"></div><div class="line"><span class="comment">//引用类型复制</span></div><div class="line"><span class="keyword">var</span> c = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">c.name = <span class="string">"Tit1e"</span>;</div><div class="line"><span class="keyword">var</span> d = c;</div><div class="line">c.name;  <span class="comment">//"Tit1e"</span></div><div class="line">d.name;  <span class="comment">//"Tit1e"</span></div><div class="line">c.name = <span class="string">"Evol"</span>;</div><div class="line">c.name;  <span class="comment">//"Evol"</span></div><div class="line">d.name;  <span class="comment">//"Evol"</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p>函数传递参数是按值传递，也就是说传入函数的值只是一个副本，原值并不会有任何变化</p>
<ul>
<li>例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> b = <span class="number">1</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">    <span class="keyword">return</span> num += <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> c = a(b);</div><div class="line">b;  <span class="comment">//1</span></div><div class="line">c;  <span class="comment">//2</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">obj</span>)</span>&#123;</div><div class="line">    obj.name = <span class="string">"Tit1e"</span>;</div><div class="line">    obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">    obj.name = <span class="string">"evol"</span>;</div><div class="line">    <span class="keyword">return</span> obj;</div><div class="line">&#125;</div><div class="line"><span class="keyword">var</span> b = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="keyword">var</span> c = a(b);</div><div class="line">b;  <span class="comment">//"evol"</span></div><div class="line">c;  <span class="comment">//"Tit1e"</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>检测类型</p>
<ul>
<li><code>instanceof</code>用于检测类型<ul>
<li>例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line">a <span class="keyword">instanceof</span> <span class="built_in">Object</span>;  <span class="comment">//true</span></div><div class="line">a <span class="keyword">instanceof</span> <span class="built_in">Array</span>;  <span class="comment">//false</span></div></pre></td></tr></table></figure></li>
</ul>
</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;操作符&quot;&gt;&lt;a href=&quot;#操作符&quot; class=&quot;headerlink&quot; title=&quot;操作符&quot;&gt;&lt;/a&gt;操作符&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;++&lt;/code&gt;和&lt;code&gt;--&lt;/code&gt;操作符&lt;ul&gt;
&lt;li&gt;&lt;code&gt;age++&lt;/code&gt;和&lt;code&gt;++age&lt;/code&gt;的区别在于&lt;code&gt;age++&lt;/code&gt;是先运算后+1，而&lt;code&gt;++age&lt;/code&gt;是先+1后运算,&lt;code&gt;--&lt;/code&gt;操作同理&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; age = &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nextAge = age++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    age;  &lt;span class=&quot;comment&quot;&gt;//19;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    nextAge;  &lt;span class=&quot;comment&quot;&gt;//18&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//上面的运算结果顺序其实是这样的：&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; age = &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nextAge = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    age = age + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;----------------------------------&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; age = &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nextAge = ++age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    age;  &lt;span class=&quot;comment&quot;&gt;//19&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    nextAge;  &lt;span class=&quot;comment&quot;&gt;//19&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;//这次的运算结果是这样的：&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; age = &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    age = age + &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; nextAge = age;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="高程笔记" scheme="http://yoursite.com/tags/%E9%AB%98%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计笔记（一）</title>
    <link href="http://yoursite.com/2017/03/04/24.jsNote/"/>
    <id>http://yoursite.com/2017/03/04/24.jsNote/</id>
    <published>2017-03-04T03:46:34.000Z</published>
    <updated>2017-12-22T13:49:11.635Z</updated>
    
    <content type="html"><![CDATA[<p>「JavaScript高级程序」这本书知道的不用说太多。但是这书厚得跟板砖一样，而且长时间阅读又枯燥无味，啃下来的确很难。这段时间打算把JS原生捡起来复习一遍，因为jQuery用的太多导致原生都快忘光了。以后笔记可能会做的比较精炼，这里就记一些比较重点的东西。</p>
<h4 id="完整的JavaScript组成"><a href="#完整的JavaScript组成" class="headerlink" title="完整的JavaScript组成"></a>完整的JavaScript组成</h4><ul>
<li><code>ECMAScript</code>（核心）</li>
<li><code>DOM</code>（文档对象模型）</li>
<li><code>BOM</code>（浏览器对象模型）</li>
</ul>
<p>但在通常人们口中所说的JavaScript常常指的是ECMAScript。<br><a id="more"></a></p>
<h4 id="插入JavaScript代码方法"><a href="#插入JavaScript代码方法" class="headerlink" title="插入JavaScript代码方法"></a>插入JavaScript代码方法</h4><ul>
<li><p>通过<code>&lt;script&gt;&lt;/script&gt;</code>标签直接在网页中写JS代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</div><div class="line">    <span class="comment">// code...</span></div><div class="line"> &lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure>
</li>
<li><p>通过<code>&lt;script&gt;</code>标签的<code>src</code>属性引入外部JS代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"url"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></div></pre></td></tr></table></figure>
</li>
</ul>
<p><strong>注：为了不影响网页的加载速度，JS代码一般放在网页尾部。</strong></p>
<h4 id="JavaScript基本概念"><a href="#JavaScript基本概念" class="headerlink" title="JavaScript基本概念"></a>JavaScript基本概念</h4><ul>
<li>区分大小写<ul>
<li>JavaScript中的变量，函数名或操作符都区分大小写</li>
</ul>
</li>
<li>标识符<ul>
<li>标识符：指的是JS代码中的变量、函数、属性、函数参数的名字</li>
<li>标识符的<strong>第一个字符</strong>必须是字母、下划线(_)或者美元符号($)</li>
<li>标识符的<strong>其他组成</strong>可以是字母、下划线、美元符号或者数字</li>
<li>一般情况下标识符采用驼峰法命名，如myPage、helloWorld</li>
</ul>
</li>
<li>注释<ul>
<li>单行注释 <ul>
<li><code>//单行注释</code></li>
</ul>
</li>
<li>多行注释<ul>
<li><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/*</div><div class="line"> *多行注释</div><div class="line"> *多行注释</div><div class="line"> *／</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="严格模式"><a href="#严格模式" class="headerlink" title="严格模式"></a>严格模式</h4><ul>
<li>全局使用严格模式<ul>
<li>脚本顶部加入<code>&#39;use strict&#39;;</code></li>
</ul>
</li>
<li>函数内使用严格模式<ul>
<li><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="meta">  'use strict'</span>;</div><div class="line">  <span class="comment">//code...</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
<h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><ul>
<li>变量声明<ul>
<li>var定义的变量会成为定义这个变量作用域中的局部变量（在全局中声明就是全局对象，在函数中声明，函数执行完成后变量自行销毁）</li>
<li>不用var声明的变量，无论在函数内或函数外声明，都是全局变量</li>
<li>可以一次声明多个变量，用<code>,</code>隔开：<code>var a = 1,b = &quot;123&quot;,c = true;</code></li>
</ul>
</li>
<li><p>JavaScript的变量是松散类型，所以通过重新赋值可以改变变量的类型</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</div><div class="line"><span class="keyword">typeof</span> a;  <span class="comment">//number，typeof操作符下文数据类型中有解释</span></div><div class="line">a = <span class="string">"你好"</span>;</div><div class="line"><span class="keyword">typeof</span> a;  <span class="comment">//string</span></div></pre></td></tr></table></figure>
<p><strong>在实际开发中不建议直接改变某个变量的类型。</strong></p>
</li>
</ul>
<h4 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h4><ul>
<li>JavaScript中有五种基本数据类型和一种复杂数据类型<ul>
<li>Undefined</li>
<li>Null</li>
<li>Boolean</li>
<li>Number</li>
<li>String</li>
<li>Object(复杂类型)</li>
</ul>
</li>
<li><p>typeof操作符用于检测变量的数据类型，返回的类型有以下几种</p>
<ul>
<li><code>&#39;undefined&#39;</code></li>
<li><code>&#39;boolean&#39;</code></li>
<li><code>&#39;string&#39;</code></li>
<li><code>&#39;number&#39;</code></li>
<li><code>&#39;object&#39;</code></li>
<li><code>&#39;function&#39;</code><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> <span class="literal">null</span>  <span class="comment">//'object'</span></div><div class="line"><span class="keyword">typeof</span> &#123;&#125;  <span class="comment">//"object"</span></div><div class="line"><span class="keyword">typeof</span> []  <span class="comment">//"object"</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">undefined</span>  <span class="comment">//"undefined"</span></div><div class="line"><span class="keyword">typeof</span> <span class="string">"你好"</span>  <span class="comment">//"string"</span></div><div class="line"><span class="keyword">typeof</span> <span class="number">1</span>  <span class="comment">//"number"</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span>  <span class="comment">//"number"</span></div><div class="line"><span class="keyword">typeof</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;&#125;  <span class="comment">//"function"</span></div><div class="line"><span class="keyword">typeof</span> <span class="literal">true</span>  <span class="comment">//"boolean"</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>由上代码可以看出typeof操作符并不是可以非常准确地返回数据的类型。那么如何区分<code>null</code>、<code>[]</code>、<code>{}</code>的数据类型呢？<br>我们可以用<code>Object.prototype.toString.call(变量)</code>来区分：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.prototype.toString.call([])  <span class="comment">//"[object Array]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(&#123;&#125;)  <span class="comment">//"[object Object]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">null</span>)  <span class="comment">//"[object Null]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="literal">NaN</span>)  <span class="comment">//"[object Number]"</span></div><div class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="number">1</span>)  <span class="comment">//"[object Number]"</span></div></pre></td></tr></table></figure>
<p>我们发现<code>NaN</code>和<code>1</code>还是无法区分，那么这个又怎么区分呢？<br>我们可以用一个专门用来辨别<code>NaN</code>的方法来区分：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">isNaN</span>(<span class="literal">NaN</span>)  <span class="comment">//true</span></div><div class="line"><span class="built_in">isNaN</span>(<span class="number">1</span>)  <span class="comment">//false</span></div></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Null类型"><a href="#Null类型" class="headerlink" title="Null类型"></a>Null类型</h4><ul>
<li><code>Null</code>类型只有一个值：<code>null</code></li>
<li><code>null</code>是一个空对象指针，用<code>typeof</code>检测返回object</li>
<li>当一个变量将来要储存为对象的时候，最好先将这个变量设置为<code>null</code></li>
<li>null == undefined</li>
</ul>
<h4 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h4><ul>
<li>Boolean类型只有true和false两个值</li>
<li><code>true == 1</code>，<code>false == 0</code>，但是true不一定等于1，false也不一定等于0</li>
<li>JavaScript中的任何一个值都可以通过<code>Boolean()</code>方法转换为Boolean值。<ul>
<li>转换为true的值有：<ul>
<li>Boolean类型的<strong>true</strong></li>
<li>String类型的<strong>任何非空字符串</strong></li>
<li>Number类型的<strong>任何非零数值，包括无穷大</strong></li>
<li>Object类型的<strong>任何对像</strong>，包括{}，从中可以看出{}与null不同</li>
</ul>
</li>
<li>转换为false的值的有：<ul>
<li>Boolean类型的<strong>flase</strong></li>
<li>String类型的<strong>空字符串</strong></li>
<li>Number类型的<strong>0和NaN</strong></li>
<li>Object类型的<strong>null</strong></li>
<li>Undefined类型的<strong>undefined</strong></li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="Number类型"><a href="#Number类型" class="headerlink" title="Number类型"></a>Number类型</h4><ul>
<li>Number类型可以用十进制表示，也可以用八进制和十六进制表示</li>
<li>用八进制表示时，如果含有数字超过8则会被解析成十进制</li>
<li>算数计算事八进制和十六进制都会被转换成十进制数值</li>
<li><p>浮点数，即带小数的数值</p>
<ul>
<li><p>浮点数的两种写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> floatNum1 = <span class="number">0.1</span>;</div><div class="line"><span class="keyword">var</span> floatNum2 = <span class="number">.1</span>;<span class="comment">//这种写法有效，但是不推荐</span></div></pre></td></tr></table></figure>
</li>
<li><p>下列两种情况下，浮点会被转换成整数保存</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> floatNum1 = <span class="number">1.</span>; <span class="comment">// 小数点后面没有数字——解析为 1 </span></div><div class="line"><span class="keyword">var</span> floatNum2 = <span class="number">10.0</span>; <span class="comment">// 整数——解析为 10</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>浮点数支持科学计数法表示</p>
</li>
<li>浮点数最高精确度是17位小数</li>
<li>JavaScript最小能表示的数值为<code>5e-324</code></li>
<li>JavaScript最大能表示的数值为<code>1.7976931348623157e+308</code>，如果超出这个范围会被转换成<code>Infinity</code>（正无穷），如果这个值是负的，那就被转换成<code>-Infinity</code>（负无穷）</li>
<li>0除以0会得到<code>NaN</code>，<strong>并且<code>NaN</code>不等于<code>NaN</code></strong></li>
<li><p><code>number()</code>、<code>parseInt()</code>、<code>parseFloat()</code>可以把非数值转换成数值</p>
<ul>
<li><code>number()</code>转换规则：<ul>
<li><code>Boolean</code>类型的<code>true</code>和<code>false</code>会被转换成0和1</li>
<li><code>Number</code>类型返回传入的值</li>
<li><code>Null</code>类型的<code>null</code>返回0</li>
<li><code>Undefined</code>类型的值返回NaN</li>
<li><code>String</code>类型的如果只有数字，包括浮点数、八进制表示的、十进制表示的，负数，都会被转换成对应的十进制数值，如果包含其他字符，则返回NaN，空字符串返回0</li>
</ul>
</li>
<li><p><code>parseInt()</code>转换规则</p>
<ul>
<li><p><code>parseInt()</code>可用来提取字符串中的有效数字</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"1234blue"</span>);  <span class="comment">// 1234</span></div><div class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">""</span>);  <span class="comment">// NaN</span></div><div class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseInt</span>(<span class="string">"0xA"</span>);  <span class="comment">// 10(十六进制数)</span></div><div class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseInt</span>(<span class="number">22.5</span>);  <span class="comment">// 22  小数点不是数字，所以遇到小数点停止解析</span></div><div class="line"><span class="keyword">var</span> num5 = <span class="built_in">parseInt</span>(<span class="string">"070"</span>);<span class="comment">// 56(八进制数)</span></div><div class="line"><span class="keyword">var</span> num6 = <span class="built_in">parseInt</span>(<span class="string">"70"</span>);  <span class="comment">// 70(十进制数)</span></div><div class="line"><span class="keyword">var</span> num7 = <span class="built_in">parseInt</span>(<span class="string">"0xf"</span>);  <span class="comment">// 15(十六进制数)</span></div><div class="line"><span class="keyword">var</span> num8 = <span class="built_in">parseInt</span>(<span class="string">"a123"</span>)  <span class="comment">//NaN  遇到非数字就停止解析</span></div><div class="line"><span class="keyword">var</span> num8 = <span class="built_in">parseInt</span>(<span class="string">"  123"</span>)  <span class="comment">//123  前面空格会被忽略</span></div></pre></td></tr></table></figure>
</li>
<li><p><code>parseInt()</code>可以指定传入的数字的进制</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseInt</span>(<span class="string">"AF"</span>, <span class="number">16</span>);  <span class="comment">//175</span></div><div class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseInt</span>(<span class="string">"AF"</span>);  <span class="comment">//NaN</span></div><div class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">2</span>);  <span class="comment">//2 (按二进制解析)</span></div><div class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">8</span>);  <span class="comment">//8 (按八进制解析)</span></div><div class="line"><span class="keyword">var</span> num5 = <span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">10</span>);  <span class="comment">//10(按十进制解析)</span></div><div class="line"><span class="keyword">var</span> num6 = <span class="built_in">parseInt</span>(<span class="string">"10"</span>, <span class="number">16</span>);  <span class="comment">//16(按十六进制解析)</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>parseFloat()</code>转换规则</p>
<ul>
<li><code>parseFloat()</code>只能解析十进制</li>
<li>十六进制格式的字符串始终会被转换成0</li>
<li><code>parseFloat()</code>转换<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num1 = <span class="built_in">parseFloat</span>(<span class="string">"1234blue"</span>);  <span class="comment">//1234 (整数)</span></div><div class="line"><span class="keyword">var</span> num2 = <span class="built_in">parseFloat</span>(<span class="string">"0xA"</span>);  <span class="comment">//0</span></div><div class="line"><span class="keyword">var</span> num3 = <span class="built_in">parseFloat</span>(<span class="string">"22.5"</span>);  <span class="comment">//22.5</span></div><div class="line"><span class="keyword">var</span> num4 = <span class="built_in">parseFloat</span>(<span class="string">"22.34.5"</span>);  <span class="comment">//22.34</span></div><div class="line"><span class="keyword">var</span> num5 = <span class="built_in">parseFloat</span>(<span class="string">"0908.5"</span>);  <span class="comment">//908.5</span></div><div class="line"><span class="keyword">var</span> num6 = <span class="built_in">parseFloat</span>(<span class="string">"3.125e7"</span>);  <span class="comment">//31250000</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h4><ul>
<li>String 类型用于表示由零或多个 16 位 Unicode 字符组成的字符序列，即字符串</li>
<li>字符串可以由单引号(‘)或者双引号(“)表示，但是前后引号必须对应</li>
<li>\用于转义</li>
<li>字符串创建后是不可变的，要改变某个字符串的内容，必须先销毁原字符串</li>
<li><p><code>toString()</code>方法用于将其他类型的值转换为字符串类型，除了<code>null</code>和<code>undefined</code></p>
<ul>
<li>例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">(<span class="number">11</span>).toString();  <span class="comment">//"11"  使用()将数字包裹起来</span></div><div class="line"><span class="number">11.</span>.toString();  <span class="comment">//"11"  因为第一个点会被解析为小数点，第二个点才是调用方法</span></div><div class="line"><span class="literal">true</span>.toString();  <span class="comment">//"true"</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>toString()</code>可以传入参数，但是只有在对数字使用<code>toString()</code>时才可以传入参数，传的参数是返回的字符串中的数字用什么进制数表示</p>
<ul>
<li>例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</div><div class="line">num.toString();  <span class="comment">//"10"</span></div><div class="line">num.toString(<span class="number">2</span>);  <span class="comment">//"1010"</span></div><div class="line">num.toString(<span class="number">8</span>);  <span class="comment">//"12"</span></div><div class="line">num.toString(<span class="number">10</span>);  <span class="comment">//"10"</span></div><div class="line">num.toString(<span class="number">16</span>);  <span class="comment">//"a"</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p><code>String()</code>方法可以将包括null和undefined在在内的所有数据类型转换为字符串类型。</p>
<ul>
<li>如果值有 <code>toString()</code>方法，则调用该方法(没有参数)并返回相应的结果;</li>
<li>如果值是 <code>null</code>，则返回”null”;</li>
<li>如果值时 <code>undefined</code>，则返回”undefined”;</li>
</ul>
</li>
</ul>
<h4 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h4><ul>
<li><p>创建对象</p>
<ul>
<li>例：<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj1 = <span class="keyword">new</span> <span class="built_in">Object</span>();</div><div class="line"><span class="keyword">var</span> obj2 = <span class="keyword">new</span> <span class="built_in">Object</span>;  <span class="comment">//不推荐这种方法</span></div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Object是所有对象的基础<code>Object</code>的每个实例都具有下列属性和方法</p>
<ul>
<li><code>constructor</code>:保存着用于创建当前对象的函数。对于前面的例子而言，构造函数(<code>constructor</code>)就是 <code>Object()</code>。</li>
<li><code>hasOwnProperty(propertyName)</code>:用于检查给定的属性在当前对象实例中(而不是在实例 的原型中)是否存在。其中，作为参数的属性名(<code>propertyName</code>)必须以字符串形式指定(例 如:<code>o.hasOwnProperty(&quot;name&quot;)</code>)</li>
<li><code>isPrototypeOf(object)</code>:用于检查传入的对象是否是传入对象的原型</li>
<li><code>toLocaleString()</code>:返回对象的字符串表示，该字符串与执行环境的地区对应</li>
<li><code>toString()</code>:返回对象的字符串表示</li>
<li><code>valueOf()</code>:返回对象的字符、串布尔值、或数值。</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「JavaScript高级程序」这本书知道的不用说太多。但是这书厚得跟板砖一样，而且长时间阅读又枯燥无味，啃下来的确很难。这段时间打算把JS原生捡起来复习一遍，因为jQuery用的太多导致原生都快忘光了。以后笔记可能会做的比较精炼，这里就记一些比较重点的东西。&lt;/p&gt;
&lt;h4 id=&quot;完整的JavaScript组成&quot;&gt;&lt;a href=&quot;#完整的JavaScript组成&quot; class=&quot;headerlink&quot; title=&quot;完整的JavaScript组成&quot;&gt;&lt;/a&gt;完整的JavaScript组成&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ECMAScript&lt;/code&gt;（核心）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DOM&lt;/code&gt;（文档对象模型）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;BOM&lt;/code&gt;（浏览器对象模型）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但在通常人们口中所说的JavaScript常常指的是ECMAScript。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端笔记" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E7%AC%94%E8%AE%B0/"/>
    
      <category term="高程笔记" scheme="http://yoursite.com/tags/%E9%AB%98%E7%A8%8B%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>apply和call的区别</title>
    <link href="http://yoursite.com/2017/03/03/23.apply-and-call/"/>
    <id>http://yoursite.com/2017/03/03/23.apply-and-call/</id>
    <published>2017-03-03T12:01:15.000Z</published>
    <updated>2017-12-22T13:44:24.533Z</updated>
    
    <content type="html"><![CDATA[<p>今天看原生js的时候看到了<code>call</code>和<code>apply</code>,对这两个方法印象不是很清楚，只记得这两个方法很相似，作用大概是让A通过<code>call</code>或<code>apply</code>能够调用B独有的方法，但是具体的使用方法已经模糊，所以网上查了资料重新理了一遍。</p>
<p>先看代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Createpeople</span>(<span class="params">name, age</span>) </span>&#123;</div><div class="line">            <span class="keyword">this</span>.name = name;</div><div class="line">            <span class="keyword">this</span>.age = age;</div><div class="line">        &#125;</div><div class="line">Createpeople.prototype.say = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">            <span class="built_in">console</span>.log(<span class="string">'Hello!My name is '</span> + <span class="keyword">this</span>.name);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> Amy = <span class="keyword">new</span> Createpeople(<span class="string">'Amy'</span>, <span class="number">18</span>);</div><div class="line">Amy.say();  <span class="comment">//Hello!My name is Amy</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> john = &#123;</div><div class="line">    <span class="attr">name</span>: <span class="string">'john'</span>,</div><div class="line">    <span class="attr">age</span>: <span class="number">20</span></div><div class="line">        &#125;</div><div class="line">john.say();  <span class="comment">//john.say is not a function</span></div><div class="line">Amy.say.call(john);  <span class="comment">//Hello!My name is john</span></div><div class="line">Amy.say.apply(john);  <span class="comment">//Hello!My name is john</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p><code>Createpeople</code>是一个构造函数，并且在原型中写入了一个<code>say</code>方法。我们用<code>Createpeople</code>创造了<code>Amy</code>对象，所以<code>Amy</code>理所当然地可以调用<code>say</code>方法。而<code>john</code>是我们手动创建的一个对象，所以<code>john</code>调用<code>say</code>方法理所应当会报错。那么如何让<code>john</code>能够调用<code>say</code>方法呢？那就要通过<code>call</code>方法或<code>apply</code>方法了。通过<code>Amy.say.call(john)</code>，从输出结果来看<code>john</code>正确的调用了<code>say</code>方法,<code>apply</code>也同样。</p>
<p>为什么呢？原因就在于<code>call</code>和<code>apply</code>在调用的时候会传入一个调用对象，即<code>this</code>，它们能将原来不指向传入对象的函数的<code>this</code>强行指向传入对象。可能这样说不是很明白，下面我来解释一下：</p>
<p>在其他方法执行的时候会默认传入一个调用对象，比如在<code>Amy</code>调用<code>say</code>方法的时候，默认传入的调用对象为<code>Amy</code>，<code>say</code>方法作为<code>Amy</code>的一部分正常情况下因为正常情况下<code>this</code>只能指向<code>Amy</code>，但是通过<code>call</code>和<code>apply</code>方法能让<code>say</code>方法的<code>this</code>强行指向传入的<code>john</code>，<code>this</code>变成了<code>john</code>，理所当然，<code>say</code>方法就能正常执行了。</p>
<h4 id="那么call和apply有什么区别呢？"><a href="#那么call和apply有什么区别呢？" class="headerlink" title="那么call和apply有什么区别呢？"></a><strong>那么<code>call</code>和<code>apply</code>有什么区别呢？</strong></h4><p>区别在于<strong>参数</strong>的传入方式不同。<br>举个例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.log(a + b);</div><div class="line">        &#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sub</span>(<span class="params">c, d</span>) </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="built_in">console</span>.log(c - d);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">sub.apply(add, [<span class="number">2</span>, <span class="number">3</span>]);  <span class="comment">//-1</span></div><div class="line">sub.call(add, <span class="number">2</span>, <span class="number">3</span>);  <span class="comment">//-1</span></div><div class="line">add.apply(sub, [<span class="number">1</span>, <span class="number">2</span>]);  <span class="comment">//3</span></div><div class="line">add.call(sub, <span class="number">1</span>, <span class="number">2</span>);  <span class="comment">//3</span></div></pre></td></tr></table></figure></p>
<p><code>call</code>方法参数是一个一个传的，而<code>apply</code>方法，除了<code>this</code>，其他参数是用数组的方式传的。<br>由于<code>apply</code>传数组这个特点，我们可以很方便地对数组进行某些操作，比如拼接两个数组：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> list1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">var</span> list2 = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line">[].push.apply(list1, list2);  <span class="comment">//6</span></div><div class="line"><span class="built_in">console</span>.log(list1);  <span class="comment">//[1, 2, 3, 4, 5, 6]</span></div></pre></td></tr></table></figure></p>
<p><code>push</code>方法可以传很多参数，但是不能传数组，正常情况下凭借数组只能够通过循环一个一个添加，但是<code>apply</code>正好需要把多个传入的参数打包成数组，所以正好满足了条件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天看原生js的时候看到了&lt;code&gt;call&lt;/code&gt;和&lt;code&gt;apply&lt;/code&gt;,对这两个方法印象不是很清楚，只记得这两个方法很相似，作用大概是让A通过&lt;code&gt;call&lt;/code&gt;或&lt;code&gt;apply&lt;/code&gt;能够调用B独有的方法，但是具体的使用方法已经模糊，所以网上查了资料重新理了一遍。&lt;/p&gt;
&lt;p&gt;先看代码：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Createpeople&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name, age&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name = name;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.age = age;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Createpeople.prototype.say = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Hello!My name is &#39;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.name);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Amy = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Createpeople(&lt;span class=&quot;string&quot;&gt;&#39;Amy&#39;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;18&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Amy.say();  &lt;span class=&quot;comment&quot;&gt;//Hello!My name is Amy&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; john = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;: &lt;span class=&quot;string&quot;&gt;&#39;john&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;age&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;20&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;john.say();  &lt;span class=&quot;comment&quot;&gt;//john.say is not a function&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Amy.say.call(john);  &lt;span class=&quot;comment&quot;&gt;//Hello!My name is john&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Amy.say.apply(john);  &lt;span class=&quot;comment&quot;&gt;//Hello!My name is john&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习笔记" scheme="http://yoursite.com/tags/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>一个前端面试题引发的思考</title>
    <link href="http://yoursite.com/2017/03/03/22.code_majorization/"/>
    <id>http://yoursite.com/2017/03/03/22.code_majorization/</id>
    <published>2017-03-03T05:12:09.000Z</published>
    <updated>2017-12-22T13:43:00.365Z</updated>
    
    <content type="html"><![CDATA[<p>昨晚群上有个小伙伴扔出了一个前端面试题，内容是这样的：</p>
<blockquote>
<p>写个js函数func(str)，传参str为一个字符串，实现把这个字符串语句中的单词（空格隔开的）次序逆序。比如把 I am a coder变成 coder a am I，不允许使用reverse，join，substring，split。</p>
</blockquote>
<a id="more"></a>
<p>如果没有附加条件实现起来很容易，当然加了条件做出这题也不是很难。这都不是重点。重点是我从这个题引发出来的想法，当然这些想法只代表我个人。</p>
<p>昨晚看到题目的时候手上没有电脑，所以不了了之，今天就做了一下。</p>
<p>我写完后的代码是下面这个样子的：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">str2</span>(<span class="params">str</span>) </span>&#123;</div><div class="line">            <span class="keyword">var</span> arr = [];</div><div class="line">            <span class="keyword">var</span> words = <span class="string">''</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; length = str.length, i &lt; length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (str[i] != <span class="string">" "</span> &amp;&amp; i != length - <span class="number">1</span>) &#123;</div><div class="line">                    words += str[i];</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] === <span class="string">" "</span>) &#123;</div><div class="line">                    arr.unshift(words);</div><div class="line">                    arr.unshift(str[i]);</div><div class="line">                    words = <span class="string">""</span>;</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (str[i] != <span class="string">" "</span> &amp;&amp; i === length - <span class="number">1</span>) &#123;</div><div class="line">                    words += str[i];</div><div class="line">                    arr.unshift(words);</div><div class="line">                    words = <span class="string">""</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">var</span> result = <span class="string">""</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; length2 = arr.length, j &lt; length2; j++) &#123;</div><div class="line">                result += arr[j];</div><div class="line">            &#125;</div><div class="line">            <span class="keyword">return</span> result;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>我的思路是循环传入的字符串，然后根据空格开分割字符串，将空格之间的单词拼成新的小字符串，然后添加到一个数组中，空格单独添加为一个数组元素，最后循环数组，将数组中的元素拼成一个新的字符串。</p>
<p>然后我将自己的代码发到了群上，然后有个人默默的发了个自己的代码的截图出来，看到后我愣了一下，第一反应是：这么短？！然后看了下他的思路，自己敲了一遍，没啥毛病。</p>
<p>这是他的代码：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">strr</span>(<span class="params">start</span>) </span>&#123;</div><div class="line">            <span class="keyword">let</span> temp = <span class="string">''</span>;</div><div class="line">            <span class="keyword">let</span> re = <span class="string">''</span>;</div><div class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; start.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (start[i] !== <span class="string">' '</span>) &#123;</div><div class="line">                    temp = temp + start[i];</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    re = temp + <span class="string">' '</span> + re;</div><div class="line">                    temp = <span class="string">''</span>;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            re = temp + <span class="string">' '</span> + re;</div><div class="line">            <span class="keyword">return</span> re;</div><div class="line">        &#125;</div></pre></td></tr></table></figure></p>
<p>他的思路和我差不多，也是根据空格判断，但他是遇到空格直接拼成字符串了，而不是像我一样要经过数组，所以就少了一个循环，节省了时间。</p>
<p>虽然两个函数在字符串较短的情况下运行时间差不多，但是一旦字符串变长或者处理大量字符串的时候，运行速度上的差距就会体现出来。我觉得这不是代码能力上的问题，而是思维上的问题。实现一个效果、功能可以有很多种方法，但是能立马想到用一种比较好的方法就不是每个人能做到的了。这就需要拓展自己的思维，多看别人的代码，从别人的代码中学习他人的思维，或者不断地积累，从项目中总结。</p>
<p><strong>仍需努力,你我共勉。</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨晚群上有个小伙伴扔出了一个前端面试题，内容是这样的：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;写个js函数func(str)，传参str为一个字符串，实现把这个字符串语句中的单词（空格隔开的）次序逆序。比如把 I am a coder变成 coder a am I，不允许使用reverse，join，substring，split。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="前端总结" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
</feed>
