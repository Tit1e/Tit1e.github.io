<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Tit1e</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/Tit1e/"/>
  <updated>2019-04-15T14:59:59.983Z</updated>
  <id>https://github.com/Tit1e/</id>
  
  <author>
    <name>Tit1e</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>埃隆·马斯克的冒险人生</title>
    <link href="https://github.com/Tit1e/2019/04/15/78-Elon-Musk/"/>
    <id>https://github.com/Tit1e/2019/04/15/78-Elon-Musk/</id>
    <published>2019-04-15T14:15:23.000Z</published>
    <updated>2019-04-15T14:59:59.983Z</updated>
    
    <content type="html"><![CDATA[<p>昨天白天我姐与外甥女来了杭州，跟她们一起去玩了一天，去了动物园。其实我不喜欢去这种地方，包括马戏团，与杂技团。因为我一想到动物门被关在这些狭小的地方，每天要面对成千上万的人，我把自己代入进去（我经常这么做，而且不光是代入动物，也会代入他人，或一个物体），光想想就觉得呼吸困难。我讨厌这种束缚。</p><p>上面是题外话，下午 5 点多到家后，觉得在外面玩了一天有点”虚度”这一天，所以想做点”有意义”的事情。于是我拿出 kindle，在网上下了一本 「埃隆·马斯克的冒险人生」，至于为什么偏偏是这本，大概是因为今天看的新闻里有好几条特斯拉的新闻，加上这本书本来就在我的待看书单里。昨天从傍晚直接看到了晚上 1 点多（6点多的时候由于太累中途睡着了几十分钟），由于第二天上班，而且实在太困才放下睡了。今天把剩下的看完了。</p><p>这本书相比「乔布斯传」，我更喜欢后者。可能是乔布斯给我的感觉更加亲近，毕竟乔布斯留下来的东西与我们的生活密切相关，而马斯克的目标却是带着人类移民火星。这对我来说太过遥远，但他的目标的确是伟大的，是造福全人类的，这一点不容置疑。</p><p>看完其实并没有过多的感想，毕竟这是他们的经历，而对于现在的我来说，通过学习他们来改变自己人生是不切实际的，况且人的经历是不可复制的，人与人也是不同的，接纳自己非常重要，我们必须承认自己是个普通人，我这辈子基本连马斯克第一次创业时的高度都达不到，但这又怎样。相对来说我有更重要的目标在等着我去实现。那才是能让我觉得没白过此生的事。</p><p>但不想达到这些巨人的高度并不意味着就可以放纵自己。对我来说，提升自己是不能停止的事情，只是可能我再怎么提升自己都看不到这些巨人的影子罢了。</p><p><strong>注：书下的是盗版。由于某些原因，目前手上的 Kindle 并不是我自己的，所以先下本盗版看完，等我的 Kindle 回来了再补票。支持正版人人有责。</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天白天我姐与外甥女来了杭州，跟她们一起去玩了一天，去了动物园。其实我不喜欢去这种地方，包括马戏团，与杂技团。因为我一想到动物门被关在这些狭小的地方，每天要面对成千上万的人，我把自己代入进去（我经常这么做，而且不光是代入动物，也会代入他人，或一个物体），光想想就觉得呼吸困难
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://github.com/Tit1e/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>alfred 使用 workflows 快速进行图片压缩</title>
    <link href="https://github.com/Tit1e/2019/04/12/77-alfred-gallery/"/>
    <id>https://github.com/Tit1e/2019/04/12/77-alfred-gallery/</id>
    <published>2019-04-12T13:29:00.000Z</published>
    <updated>2019-04-13T13:39:34.948Z</updated>
    
    <content type="html"><![CDATA[<p>图片压缩是我平时经常用到的操作，一开始是去 <a href="https://tinypng.com/" target="_blank" rel="noopener">tinypng</a> 使用网页版压缩，后来在逛 Github 时发现了 <a href="https://github.com/kyleduo/TinyPNG4Mac">TinyPNG4Mac</a> 这个小工具，相比之前的网页操作已经方便了不少，今天在逛 Twitter 时又发现了一个 alfred 的 workflows 工作流，可以在本地快速进行图片压缩。下载地址在 <a href="https://github.com/BlackwinMin/alfred-gallery/tree/master/image%20Compressor">image Compressor</a>。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>使用这个工具的时候需要先安装以下三个项目：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 压缩 png</span></span><br><span class="line">brew install pngquant</span><br><span class="line"><span class="comment"># 压缩 jpg</span></span><br><span class="line">brew install jpegoptim</span><br><span class="line"><span class="comment"># 压缩 gif</span></span><br><span class="line">brew install gifsicle</span><br></pre></td></tr></table></figure><p><a href="https://github.com/BlackwinMin/alfred-gallery/blob/master/image%20Compressor/image%20Compressor.alfredworkflow">文件下载地址</a></p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-12-Xnip2019-04-12_22-24-26.png" alt></p><p>下载完成后打开下载好的文件，点击 import 将工作流导入就安装完成。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-12-Xnip2019-04-12_21-41-31.png" alt></p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>我由于之前没使用 workflows 处理过文件，都是使用热键类型的 workflows，因此我不知道怎么选择文件进行操作，在一通瞎按外加 一通 Google 后终于了解了。一开始我连如何执行这个压缩命令都不知道。</p><ul><li><p>对单个文件进行操作</p><ul><li>选择一个文件后按 <code>control</code> 出现操作选项，执行 <code>image Compressor</code></li></ul><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-12-Xnip2019-04-12_21-51-34.png" alt></p></li><li><p>在 Alfred 中选择多个文件后进行操作</p><ul><li>选择一个文件后按 <code>option</code> + <code>↑</code> 可以将文件加入缓冲区，可以将多个文件加入缓冲区， <code>option</code> + <code>←</code>可以删除最近添加的文件， <code>option</code> + <code>→</code> 可以对这些选中的文件进行批量操作。</li></ul></li><li><p>在 Finder 中选好文件直接使用 Alfred 操作文件</p><ul><li><p>对于压缩图片来说这应该是最好的操作方式：在 Finder 中批量选中图片后，按 <code>option</code> + <code>commend</code> + <code>\</code> 调出操作列表进行操作。如果无法调出可能是快捷键被修改了，可以从下图出查看具体快捷键。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-12-Xnip2019-04-12_21-46-08.png" alt></p></li></ul></li></ul><p>在找的过程中我还发现一个使用 TinyPNG 压缩的 workflows <a href="http://www.packal.org/workflow/tinypng" target="_blank" rel="noopener">Compress with TinyPNG</a>，应该与 TinyPNGMac 用的是同一个接口吧。使用方式同 image Compressor。</p><p> 注：使用的时候需要去 <a href="https://tinypng.com/developers" target="_blank" rel="noopener">这里</a> 注册一个 API Key，然后在 Alfred 执行 <code>tinypng_config</code> ，输入 API Key 后回车。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-12-Xnip2019-04-12_22-17-07.png" alt></p><p>压缩效果有点差异，相差不多，但是压缩速度差非常多。TinyPNG 还会出现丢图现象，下图右侧其实应该有三张图片，但是压缩只为了我两种张，而且速度非常慢，从修改日期可以看出两张图的创建时间相差了一分钟。image Compressor 由于使用的是本地的工具库，因此几张图压缩只要几秒就可完成。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-12-Xnip2019-04-12_22-21-59.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;图片压缩是我平时经常用到的操作，一开始是去 &lt;a href=&quot;https://tinypng.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;tinypng&lt;/a&gt; 使用网页版压缩，后来在逛 Github 时发现了 &lt;a href=&quot;https:/
      
    
    </summary>
    
    
      <category term="mac" scheme="https://github.com/Tit1e/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>0411 碎碎念</title>
    <link href="https://github.com/Tit1e/2019/04/11/76-2019-04-11/"/>
    <id>https://github.com/Tit1e/2019/04/11/76-2019-04-11/</id>
    <published>2019-04-11T14:13:11.000Z</published>
    <updated>2019-04-11T14:36:25.852Z</updated>
    
    <content type="html"><![CDATA[<p>昨天去交考核的时候碰到老大在研究小程序，我知道最近有个小程序要开发，可能这个活会落到我头上，但我不知道老大研究这个干什么。出于学习的目的我昨天试用了一下 <a href="https://github.com/Meituan-Dianping/mpvue">mpvue</a>，因为自身是使用 vue 进行开发的，也知道美团发布了个 vue 转制小程序的工具，于是趁此机会研究一下，万一到时候要我开发我也能兜住。结果今天老大就发我原型来让我评估工作量了。</p><p>到目前为止，我分析了下原型里的功能在开发过程中可能会遇到的坑：</p><ul><li>M3u8 的播放</li><li>图表展示</li><li>字体图标</li><li>用户登录状态管理</li><li>Vuex 的使用</li></ul><ol><li>m3u8 的播放今天测试了，在小程序中十分方便，<code>&lt;video&gt;</code> 标签就支持播放，比 网页上方便许多。</li><li>图表主要是柱状图跟饼图，我打算使用 <a href="https://github.com/F-loat/mpvue-echarts">mpvue-echarts</a>，这里还有个问题就是 echarts 需要去官网<a href="https://echarts.baidu.com/builder.html" target="_blank" rel="noopener">定制</a>。因为整个 echarts 引入会超出小程序限制的代码大小 2M，因此需要根据项目中用到的图表及组件进行定制。</li><li>字体图标 我在 <a href="https://evolly.one/2019/04/10/75.mini-program-use-iconfont/" target="_blank" rel="noopener">上一篇博客</a> 中已经说过了，其实这个在很早以前我也尝试过，已经是可以实现了的，这次为了保险起见再次确认下。</li><li>因为没有写过小程序，而这个项目又需要使用其他账户登录，因此这一块我需要找找成熟的方案。</li><li>Vuex 的话是因为我在查 mpvue 的时候看到有人说使用 Vuex 的时候有点怪，不知道是不是他的使用有问题，我需要亲自验证一下。</li></ol><p>目前想到的只有以上几点，其他的坑可能会在开发过程中陆续出现，到时候再做记录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;昨天去交考核的时候碰到老大在研究小程序，我知道最近有个小程序要开发，可能这个活会落到我头上，但我不知道老大研究这个干什么。出于学习的目的我昨天试用了一下 &lt;a href=&quot;https://github.com/Meituan-Dianping/mpvue&quot;&gt;mpvue&lt;/a
      
    
    </summary>
    
    
      <category term="碎碎念" scheme="https://github.com/Tit1e/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>小程序开发使用 iconfont</title>
    <link href="https://github.com/Tit1e/2019/04/10/75-mini-program-use-iconfont/"/>
    <id>https://github.com/Tit1e/2019/04/10/75-mini-program-use-iconfont/</id>
    <published>2019-04-10T14:22:42.000Z</published>
    <updated>2019-04-11T14:14:14.120Z</updated>
    
    <content type="html"><![CDATA[<ol><li>将选择好的图标生成在线链接</li></ol><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-11-image-20190410223602633.png" alt></p><ol start="2"><li><p>在新标签页打开在线链接</p></li><li><p>复制页面中的所有 css 代码至 <code>app.wxss</code> 文件中，保存</p></li></ol><p>这样就可以在项目中使用 iconfont 了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;将选择好的图标生成在线链接&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-11-image-20190410223602633.pn
      
    
    </summary>
    
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Mac 使用终端执行弹出式消息通知</title>
    <link href="https://github.com/Tit1e/2019/04/08/64-send-an-alert-to-notification-center-from-the-command/"/>
    <id>https://github.com/Tit1e/2019/04/08/64-send-an-alert-to-notification-center-from-the-command/</id>
    <published>2019-04-08T12:29:12.000Z</published>
    <updated>2019-04-08T12:34:26.423Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装-terminal-notifier"><a href="#安装-terminal-notifier" class="headerlink" title="安装 terminal-notifier"></a>安装 terminal-notifier</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 不能直接执行 sudo gem <span class="keyword">install</span> terminal-notifier，安装会报错，/usr/<span class="keyword">bin</span> 目录不允许写入，因此得安装至 /usr/<span class="keyword">local</span>/<span class="keyword">bin</span> 目录下</span><br><span class="line">sudo gem <span class="keyword">install</span> terminal-notifier -n /usr/<span class="keyword">local</span>/<span class="keyword">bin</span></span><br></pre></td></tr></table></figure><h3 id="执行"><a href="#执行" class="headerlink" title="执行"></a>执行</h3><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">terminal</span>-notifier -message <span class="string">"Hello, this is my message"</span> -<span class="built_in">title</span> <span class="string">"Message Title"</span></span><br></pre></td></tr></table></figure><p><a href="http://landcareweb.com/questions/3689/ru-he-zhi-zuo-maczhong-duan-dan-chu-jing-bao-applescriptde" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装-terminal-notifier&quot;&gt;&lt;a href=&quot;#安装-terminal-notifier&quot; class=&quot;headerlink&quot; title=&quot;安装 terminal-notifier&quot;&gt;&lt;/a&gt;安装 terminal-notifier&lt;/h3&gt;&lt;
      
    
    </summary>
    
    
      <category term="mac" scheme="https://github.com/Tit1e/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>vue-mark-calendar</title>
    <link href="https://github.com/Tit1e/2019/04/06/63-vue-mark-calendar/"/>
    <id>https://github.com/Tit1e/2019/04/06/63-vue-mark-calendar/</id>
    <published>2019-04-06T13:26:23.000Z</published>
    <updated>2019-04-13T13:39:12.210Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/Tit1e/vue-mark-calendar">vue-mark-calendar</a> 是基于 <a href="https://github.com/zwhGithub/vue-calendar">vue-calendar</a> 改造的插件，出于公司业务需求，在原有基础上进行了功能的增加与样式的调整。样式是尽量根据 <a href="http://element-cn.eleme.io/#/zh-CN/component/installation" target="_blank" rel="noopener">element-ui</a> 的样式写的，因为公司用的是 element-iu + Vue 的技术栈，希望系统的界面上比较统一。</p><p>功能上新增了一下几个参数：</p><ol><li>borderRadius：调整日历组件的圆角大小</li><li>showToday：是否在日历中高亮今天的日期</li><li>canChoose：是否禁用日历选择，只作展示用。</li></ol><p>其他说明可看 <a href="https://github.com/Tit1e/vue-mark-calendar">Github</a></p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-05-084559.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://github.com/Tit1e/vue-mark-calendar&quot;&gt;vue-mark-calendar&lt;/a&gt; 是基于 &lt;a href=&quot;https://github.com/zwhGithub/vue-calendar&quot;&gt;vue-ca
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>Mac 使用 Alfred 执行终端命令</title>
    <link href="https://github.com/Tit1e/2019/04/04/62-alfred-workflow/"/>
    <id>https://github.com/Tit1e/2019/04/04/62-alfred-workflow/</id>
    <published>2019-04-04T13:05:45.000Z</published>
    <updated>2019-04-13T13:39:05.326Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p>Mac 上有个叫 Alfred 的软件，堪称神器。想了解的可以去网上搜搜，一大把，这软件从来不缺人夸。</p><p>其实我平时用到这个软件的功能才一小部分，但是已经给我带来了极大的便利，现在我已经无法习惯没有它的电脑。</p><p>之前用的一些搜索，计算器，打开软件这些用途其实 Mac 自带的聚焦也可以做到，但是 Alfred 特有的 Workflow 工作流聚焦可没有。Workflow 能做很多事情，我还是贴个少数派的 Workflow 专区 <a href="https://sspai.com/tag/Alfred" target="_blank" rel="noopener">链接</a> 吧，里面有很多关于它的介绍及使用技巧。</p><p>我今天要说的是用它来执行终端命令，因为工作中终端是必不可少的东西，其他比如还有 hexo 博客的部署什么的也是通过命令行，但是一般情况下终端都需要一连串的 cd 进入目录，然后执行命令，当次数多了就开始觉得好烦，Workflow 不是正好可以执行脚本么，于是就去淘宝买了个授权，不知道是官方给的批量授权还是申请来的测试授权码，反正还是花了我 100+ 大洋，之前一直用的免费版，无法使用 Workflow。</p><h3 id="不是必要的准备工作"><a href="#不是必要的准备工作" class="headerlink" title="不是必要的准备工作"></a>不是必要的准备工作</h3><p>Alfred 默认用的是 Mac 自带的终端，如如果使用的 iTerm 可以根据下图设置：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-Xnip2019-04-04_21-41-25.png" alt></p><p>输入的代码为</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">on alfred_script(q)</span><br><span class="line">    tell application "iTerm"</span><br><span class="line">        <span class="keyword">set</span> _length <span class="keyword">to</span> <span class="keyword">count</span> <span class="keyword">window</span></span><br><span class="line">    <span class="keyword">if</span> _length = <span class="number">0</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">create</span> <span class="keyword">window</span> <span class="keyword">with</span> <span class="keyword">default</span> profile</span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">    <span class="keyword">set</span> aa <span class="keyword">to</span> (<span class="keyword">get</span> miniaturized <span class="keyword">of</span> <span class="keyword">current</span> <span class="keyword">window</span>)</span><br><span class="line">    <span class="keyword">if</span> aa <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> miniaturized <span class="keyword">of</span> <span class="keyword">current</span> <span class="keyword">window</span> <span class="keyword">to</span> <span class="literal">false</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">    <span class="keyword">set</span> bb <span class="keyword">to</span> (<span class="keyword">get</span> <span class="keyword">visible</span> <span class="keyword">of</span> <span class="keyword">current</span> <span class="keyword">window</span>)</span><br><span class="line">    <span class="keyword">if</span> bb <span class="keyword">is</span> <span class="literal">false</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">set</span> <span class="keyword">visible</span> <span class="keyword">of</span> <span class="keyword">current</span> <span class="keyword">window</span> <span class="keyword">to</span> <span class="literal">true</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">    <span class="keyword">set</span> cc <span class="keyword">to</span> frontmost</span><br><span class="line">    <span class="keyword">if</span> cc <span class="keyword">is</span> <span class="literal">false</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">activate</span></span><br><span class="line">    <span class="keyword">end</span> <span class="keyword">if</span></span><br><span class="line">        (*<span class="keyword">if</span> _length = <span class="number">0</span> <span class="keyword">then</span>*)</span><br><span class="line">            <span class="keyword">set</span> theResult <span class="keyword">to</span> <span class="keyword">current</span> tab <span class="keyword">of</span> <span class="keyword">current</span> <span class="keyword">window</span></span><br><span class="line">        (*<span class="keyword">else</span></span><br><span class="line">            <span class="keyword">set</span> theResult <span class="keyword">to</span> (<span class="keyword">create</span> tab <span class="keyword">with</span> <span class="keyword">default</span> profile) <span class="keyword">of</span> <span class="keyword">current</span> <span class="keyword">window</span></span><br><span class="line">        <span class="keyword">end</span> <span class="keyword">if</span>*)</span><br><span class="line">        write <span class="keyword">session</span> <span class="keyword">of</span> theResult <span class="built_in">text</span> q</span><br><span class="line"><span class="keyword">end</span> tell</span><br><span class="line"><span class="keyword">end</span> alfred_script</span><br></pre></td></tr></table></figure><p>这样 Alfred 在执行命令是就会调用 iTerm。</p><h3 id="编写脚本"><a href="#编写脚本" class="headerlink" title="编写脚本"></a>编写脚本</h3><p>先添加一个初试模板：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-Xnip2019-04-04_21-44-57.png" alt></p><p>填写 Workflow 的名称，也可以将图片拖到右侧框内，即可当作图标：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-Xnip2019-04-04_21-46-51.png" alt></p><p>双击左侧的模块设置触发关键词：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-134948.png" alt></p><p>在左侧输入框输入触发的关键词，右侧的第一个选项是还可以输入其他信息，并且在执行脚本的时候可以通过 <code>{query}</code> 获取到输入内容，第二个我没了解过，第三个就是输入完关键字 回车直接触发。我以部署博客为例编写两个 Workflow。第一个是新建一篇文章，第二个是一件部署。这个例子就写生成新文章的。因为生成新文章需要输入文件名（当然不填其实也有默认的名字），因此需要选择第一项。下方的 Title 是 必填项。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-135110.png" alt></p><p>之后编辑右边的模块：</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-135912.png" alt></p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-140100.png" alt></p><p>输入你想执行的命令并保存就可以了。我这里的命令行执行的分别是，先 cd 至博客目录，然后执行 新建文章的命令，然后打开 Typora，我的 Typora 目录就是文章目录。最后退出终端。因为我 iTerm 设置使用快捷键从顶部呼出，但 Workflow 执行的时候会打开一下终端的窗口，因此执行的时候并不后影响我原有的窗口，所以我用了 exit 命令，执行完毕直接退出终端，不然的话每次执行都会有一个终端窗口遗留，会很乱。</p><p>执行时只要呼出 Alfred  然后输入之前设置的关键字，再输入文件名就可以了。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-04-04-140726.png" alt></p><p>部署的话，也差不多，就是在设置关键字的时候选择 No Argument 项就可以了，然后在脚本部分写：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd ~<span class="regexp">/Public/</span>Myblog &amp;&amp; hexo g &amp;&amp; hexo d &amp;&amp; <span class="keyword">exit</span></span><br></pre></td></tr></table></figure><p> 完。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;Mac 上有个叫 Alfred 的软件，堪称神器。想了解的可以去网上搜搜，一大把，这软件从来不缺人夸。&lt;/p&gt;
&lt;p&gt;其实我平时用到这个软件的功能才一小部分，但是已经给我带来了极大的便利，现在我已经无法习惯没有它的电脑。&lt;/p&gt;
&lt;p&gt;之
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="mac" scheme="https://github.com/Tit1e/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>0402 碎碎念</title>
    <link href="https://github.com/Tit1e/2019/04/02/61-2019-04-02/"/>
    <id>https://github.com/Tit1e/2019/04/02/61-2019-04-02/</id>
    <published>2019-04-02T12:44:27.000Z</published>
    <updated>2019-04-02T13:06:40.592Z</updated>
    
    <content type="html"><![CDATA[<p>今天依旧是不停接需求改需求的一天，但自从前几天调整心态后，今天接到需求心态平稳了许多。现在做需求前会好好想想，做的时候也会想什么地方可能会被提出修改建议，虽然进度慢了点，但是质量上升了不少。希望这种心态能一直保持下去，相信这种心态会让我更加喜欢这个世界。</p><p>最近生活好像又恢复了”正常”，每天被安排得满满当当，包括下班后的空闲时间。这种充实的感觉非常好，希望继续保持。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天依旧是不停接需求改需求的一天，但自从前几天调整心态后，今天接到需求心态平稳了许多。现在做需求前会好好想想，做的时候也会想什么地方可能会被提出修改建议，虽然进度慢了点，但是质量上升了不少。希望这种心态能一直保持下去，相信这种心态会让我更加喜欢这个世界。&lt;/p&gt;
&lt;p&gt;最近
      
    
    </summary>
    
    
      <category term="碎碎念" scheme="https://github.com/Tit1e/tags/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>斐讯 k2p 在已刷 Breed 情况下刷入其他固件</title>
    <link href="https://github.com/Tit1e/2019/04/01/60-k2p-breed/"/>
    <id>https://github.com/Tit1e/2019/04/01/60-k2p-breed/</id>
    <published>2019-04-01T13:19:17.000Z</published>
    <updated>2019-04-13T13:38:48.375Z</updated>
    
    <content type="html"><![CDATA[<ol><li>网线连接电脑与 k2p 任一 <strong>LAN</strong> 口，网卡设置为自动获取 ip。</li><li>拔掉 k2p 电源，按住 k2p 背后 reset 键不放，然后插入 k2p 电源通电，保持按住 reset 键几秒直至 k2p 前面板 灯颜色交替闪烁后放开。</li><li>浏览器访问 192.168.1.1，如成功则出现 Breed 不死控制台。</li><li>备份：在「固件备份」标签，选择备份「EEEPROM」和「编程器固件」。</li><li>在刷之前需执行：「恢复出厂设置」-&gt;「Config 区 (公版)」-&gt;「执行」。</li><li>刷入：点击「固件更新」标签，选中「固件」选项，选择固件，点击「上传」。</li></ol><p>然后等待刷入完毕并重启就可通过浏览器访问控制台。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ol&gt;
&lt;li&gt;网线连接电脑与 k2p 任一 &lt;strong&gt;LAN&lt;/strong&gt; 口，网卡设置为自动获取 ip。&lt;/li&gt;
&lt;li&gt;拔掉 k2p 电源，按住 k2p 背后 reset 键不放，然后插入 k2p 电源通电，保持按住 reset 键几秒直至 k2p 前面板 灯
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>0331 一周总结</title>
    <link href="https://github.com/Tit1e/2019/03/31/59-2019-03-31-week-summary/"/>
    <id>https://github.com/Tit1e/2019/03/31/59-2019-03-31-week-summary/</id>
    <published>2019-03-31T15:06:37.000Z</published>
    <updated>2019-04-02T13:07:22.435Z</updated>
    
    <content type="html"><![CDATA[<h3 id="碎碎念"><a href="#碎碎念" class="headerlink" title="碎碎念"></a>碎碎念</h3><p>最近的开发任务很重，前端我一个人得负责系统的视觉、交互和前端的开发。<br><a id="more"></a><br>由于是后台管理平台，对视觉的要求相对来说会低一点，但是如何将系统布局得合理，能让用户以最快的方式获取到想要的信息还是得下一番功夫。</p><p>交互这块比较重要，旧的平台其实也是我开发的，但是由于当初缺少项目经验，系统中存在大量的不合理的地方，给运维人员带来了许多不方便。趁着这次系统的重新开发，将功补过。</p><p>系统开发的话，最近在写一个为公司系统定制，基于 <a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">element-ui</a> 二次封装的库 <a href="https://www.npmjs.com/package/hzsj-components" target="_blank" rel="noopener">hzsj-component</a>。因为公司内部有多个系统，但是系统之间又多多少少有相似的业务模块，因此为了提高开发的效率，就决定封装一个库。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最近都比较忙，所以时间一直都不够用，忙着忙着一周就过去了。这周将手头上零碎的事情处理得差不多了，下周应该可以将大部分经历放在新版系统的开发上。希望不要出什么岔子。</p><p>这周与一位同事一同开发一个功能模块，闹的我心里有点不愉快，一个东西经常改来改去，让我很暴躁，因为我这周事情本来就比较多，而这个同事喜欢扣细节，时不时提出点建议来，当然有些也是客户那的要求，但对我来说没什么区别。不过回过头想想，自己也是有责任的，一个需求给我，我就真的只做了那个需求描述的功能，但其实这样做出来的功能完全经不起推敲，根本就是在写 bug。所以在开发方面，还是得静下心来，将需求分析得透彻之后再进行开发，切记不可毛躁。</p><p>还有就是将手头上的事情排个轻重缓急，公司目前只有我一个前端，事情杂是免不了的，但事情又只能一件一件来，因此，合理安排开发顺序非常重要，不然只会在思维切换过程中浪费大量时间。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;碎碎念&quot;&gt;&lt;a href=&quot;#碎碎念&quot; class=&quot;headerlink&quot; title=&quot;碎碎念&quot;&gt;&lt;/a&gt;碎碎念&lt;/h3&gt;&lt;p&gt;最近的开发任务很重，前端我一个人得负责系统的视觉、交互和前端的开发。&lt;br&gt;
    
    </summary>
    
    
      <category term="一周总结" scheme="https://github.com/Tit1e/tags/%E4%B8%80%E5%91%A8%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>hexo rss 报错解决方案</title>
    <link href="https://github.com/Tit1e/2019/03/30/58-hexo-rss-error/"/>
    <id>https://github.com/Tit1e/2019/03/30/58-hexo-rss-error/</id>
    <published>2019-03-30T01:24:37.000Z</published>
    <updated>2019-04-13T13:38:35.456Z</updated>
    
    <content type="html"><![CDATA[<p>这几天一直在折腾博客主题，原来用的 <a href="https://github.com/pinggod/hexo-theme-apollo">hexo-theme-apollo</a> 去看了下作者已经停止维护了，apollo 主题本身已经是一个比较简洁的主题了，配色来源于 <a href="https://cn.vuejs.org/" target="_blank" rel="noopener">Vue</a> 的官网，但看久了还是觉得审美疲劳，我有个关注的博主 <a href="https://ky0n.xyz/" target="_blank" rel="noopener">ky0n</a> 的博客主题我挺喜欢的，非常简洁，所以我就想照着他的主题修改一个，但改的过程中发现，他主题里面的 class 命名，dom结构跟 apollo 的非常相似，所以我猜他可能也是在 apollo 基础上改的。</p><p>改样式过程很顺利，但这次我想把 RSS 功能给放出来，这就出现问题了，RSS 页面出现了错误：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">This<span class="built_in"> page </span>contains the following errors:</span><br><span class="line"><span class="builtin-name">error</span> on line 264 at column 238: PCDATA invalid Char value 8</span><br><span class="line">Below is a rendering of the<span class="built_in"> page </span>up <span class="keyword">to</span> the first error.</span><br></pre></td></tr></table></figure><p>这个问题其实是由于文章中的隐藏字符 <code>^H</code> 导致的，这个字符在 VS Code 跟 Typora 下并不会显示，但在 vim 下会显示。</p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2019-03-30-%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202019-03-28%2023.45.15.png" alt></p><h3 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h3><p>用编辑器打开 <code>/public/atom.xml</code>，定位到报错的行，看看报错是在哪篇文章中，然后用 vim 打开这篇文章，查看有没有 删掉文章里的 <code>^H</code> 字符，当然保险起见你可以过一遍所有文章，然后再执行 <code>hexo g &amp;&amp; hexo d</code> 部署到线上，就不会有错误信息了。</p><p><a href="https://www.leejia.me/code/id_rss_vscode_bug.html" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这几天一直在折腾博客主题，原来用的 &lt;a href=&quot;https://github.com/pinggod/hexo-theme-apollo&quot;&gt;hexo-theme-apollo&lt;/a&gt; 去看了下作者已经停止维护了，apollo 主题本身已经是一个比较简洁的主题了，配色来
      
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>element-ui 树形控件使用右键菜单</title>
    <link href="https://github.com/Tit1e/2019/03/29/57-el-tree-contextmenu/"/>
    <id>https://github.com/Tit1e/2019/03/29/57-el-tree-contextmenu/</id>
    <published>2019-03-29T13:16:20.000Z</published>
    <updated>2019-04-13T13:38:28.094Z</updated>
    
    <content type="html"><![CDATA[<p>element-ui 的树形控件本身是不支持右键的，官方文档上推荐把操作按钮展示在对应的项上，但是如果操作项比较多，或者本身就有信息需要展示在项上，再加上这些操作按钮就会比较凌乱。正好公司业务上有这个需求，因此我在网上搜了一圈，找到比较好的解决方式。</p><p>整体思路就是：当右键时，调用左键的 <code>node-click</code> 方法，通过 <code>node-click</code> 将获取到的数据储存起来，然后展示右键菜单，获取到数据后，怎么处理就可以自由发挥了。</p><p>右键菜单我使用了 <a href="https://github.com/xunleif2e/vue-context-menu">vue-context-menu</a> 插件，引入方式可看 <code>README</code>。</p><p><a href="https://evolly.one/demos/57.el-tree-contextmenu/dist/" target="_blank" rel="noopener">Demo</a></p><p>下面是具体代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-tree</span> <span class="attr">:data</span>=<span class="string">"data"</span> <span class="attr">id</span>=<span class="string">"el-tree"</span> <span class="attr">:props</span>=<span class="string">"defaultProps"</span> @<span class="attr">node-click</span>=<span class="string">"handleNodeClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-tree</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">context-menu</span> <span class="attr">class</span>=<span class="string">"right-menu"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:target</span>=<span class="string">"contextMenuTarget"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">:show</span>=<span class="string">"contextMenuVisible"</span></span></span><br><span class="line"><span class="tag">      @<span class="attr">update:show</span>=<span class="string">"(show) =&gt; contextMenuVisible = show"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>操作1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>操作2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> @<span class="attr">click</span>=<span class="string">"handleClick"</span>&gt;</span>操作3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">context-menu</span>&gt;</span></span><br><span class="line">  当前右键获取到的节点为：&#123;&#123;JSON.stringify(nodeData)&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  data() &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      contextMenuTarget: <span class="literal">null</span>,</span><br><span class="line">      contextMenuVisible: <span class="literal">false</span>,</span><br><span class="line">      nodeData: &#123;&#125;,</span><br><span class="line">      data: [&#123;</span><br><span class="line">        label: <span class="string">'一级 1'</span>,</span><br><span class="line">        children: [&#123;</span><br><span class="line">          label: <span class="string">'二级 1-1'</span>,</span><br><span class="line">          children: [&#123;</span><br><span class="line">            label: <span class="string">'三级 1-1-1'</span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        label: <span class="string">'一级 2'</span>,</span><br><span class="line">        children: [&#123;</span><br><span class="line">          label: <span class="string">'二级 2-1'</span>,</span><br><span class="line">          children: [&#123;</span><br><span class="line">            label: <span class="string">'三级 2-1-1'</span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          label: <span class="string">'二级 2-2'</span>,</span><br><span class="line">          children: [&#123;</span><br><span class="line">            label: <span class="string">'三级 2-2-1'</span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;, &#123;</span><br><span class="line">        label: <span class="string">'一级 3'</span>,</span><br><span class="line">        children: [&#123;</span><br><span class="line">          label: <span class="string">'二级 3-1'</span>,</span><br><span class="line">          children: [&#123;</span><br><span class="line">            label: <span class="string">'三级 3-1-1'</span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;, &#123;</span><br><span class="line">          label: <span class="string">'二级 3-2'</span>,</span><br><span class="line">          children: [&#123;</span><br><span class="line">            label: <span class="string">'三级 3-2-1'</span></span><br><span class="line">          &#125;]</span><br><span class="line">        &#125;]</span><br><span class="line">      &#125;],</span><br><span class="line">      defaultProps: &#123;</span><br><span class="line">        children: <span class="string">'children'</span>,</span><br><span class="line">        label: <span class="string">'label'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted() &#123;</span><br><span class="line">    <span class="keyword">this</span>.$nextTick(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="comment">// vue-context-menu 需要传入一个触发右键事件的元素，等页面 dom 渲染完毕后才可获取</span></span><br><span class="line">      <span class="keyword">this</span>.contextMenuTarget = <span class="built_in">document</span>.querySelector(<span class="string">'#el-tree'</span>)</span><br><span class="line">      <span class="comment">// 获取所有的 treeitem，循环监听右键事件</span></span><br><span class="line">      <span class="keyword">const</span> tree = <span class="built_in">document</span>.querySelectorAll(<span class="string">'#el-tree [role="treeitem"]'</span>)</span><br><span class="line">      tree.forEach(<span class="function"><span class="params">i</span> =&gt;</span> &#123;</span><br><span class="line">        i.addEventListener(<span class="string">'contextmenu'</span>,event =&gt; &#123;</span><br><span class="line">          <span class="comment">// 如果右键了，则模拟点击这个treeitem</span></span><br><span class="line">          event.target.click()</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleNodeClick(data) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(data)</span><br><span class="line">      <span class="keyword">this</span>.nodeData = data</span><br><span class="line">    &#125;,</span><br><span class="line">    handleClick()&#123;</span><br><span class="line">      <span class="keyword">this</span>.contextMenuVisible = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,</span><br><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">14px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#app</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">font-family</span>: <span class="string">'Microsoft Yahei'</span>, <span class="string">'Avenir'</span>, Helvetica, Arial, sans-serif;</span><br><span class="line">  <span class="attribute">-webkit-font-smoothing</span>: antialiased;</span><br><span class="line">  <span class="attribute">-moz-osx-font-smoothing</span>: grayscale;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#2c3e50</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 右键会选中文字，为了美观将它禁用</span><br><span class="line"><span class="selector-id">#el-tree</span>&#123;</span><br><span class="line">  <span class="attribute">user-select</span>:none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-menu</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">border</span>: solid <span class="number">1px</span> <span class="built_in">rgba</span>(0, 0, 0, .2);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">999</span>;</span><br><span class="line">  <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">75px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">28px</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1a1a1a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-menu</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#eee</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-menu</span> &#123;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span><br><span class="line">    <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0.5em</span> <span class="number">1em</span> <span class="number">0</span> <span class="built_in">rgba</span>(0,0,0,.1);</span><br><span class="line">    <span class="attribute">border-radius</span>: <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-menu</span> <span class="selector-tag">a</span> &#123;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right-menu</span> <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#42b983</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是完整代码。</p><p>当然还有另外一种思路。el-tree 自带有 <code>node-contextmenu</code> 事件，如果使用了这个事件，原生的右键事件都会被阻止，因此上面方法不能与这个事件一起使用，会造成右键插件无法正常显示。但是 <code>node-contextmenu</code> 事件返回了非常详细的参数：依次为 event、传递给 <code>data</code> 属性的数组中该节点所对应的对象、节点对应的 Node、节点组件本身。由于可以获取到 event，里面带有鼠标右击的坐标，因此完全可以自己写一个右键菜单，而且这个事件的回调参数更为丰富。</p><p><a href="https://segmentfault.com/q/1010000012940760" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;element-ui 的树形控件本身是不支持右键的，官方文档上推荐把操作按钮展示在对应的项上，但是如果操作项比较多，或者本身就有信息需要展示在项上，再加上这些操作按钮就会比较凌乱。正好公司业务上有这个需求，因此我在网上搜了一圈，找到比较好的解决方式。&lt;/p&gt;
&lt;p&gt;整体思路
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>编写一个全局 SVG 图标组件</title>
    <link href="https://github.com/Tit1e/2019/03/27/56-global-icon-component/"/>
    <id>https://github.com/Tit1e/2019/03/27/56-global-icon-component/</id>
    <published>2019-03-27T04:30:06.000Z</published>
    <updated>2019-04-13T13:38:24.144Z</updated>
    
    <content type="html"><![CDATA[<p>在现在网站开发中， icon 是必不可少的元素，它可以使页面更加美观，内容更加丰富，某些场景也能更加直观地表达含义。icon 也分好多种类型，以前是使用图片，后来有了字体图标，SVG。由于占用空间大以及使用不方便（比如不同终端需要不同尺寸的图片），用图片做图标的方式已经渐渐被淘汰了，取而代之的是字体图标以及 SVG，这两种都是矢量图形，光放大不失真这个特点就很让人心动，并且体积还比图片小。</p><p>字体图标顾名思义就是这个图标就是一个字体，只是它显示的是个图标。因此 CSS 能对字体设置的属性，对字体图标也同样适用。</p><p>缺点的话可能只是想使用这个图标库的某几个图标，但是却必须把整个图标库引入，造成了资源浪费。不过现在这个问题在 <a href="https://www.iconfont.cn/" target="_blank" rel="noopener">阿里妈妈</a> 图标管理平台得到了很好的解决，可以自己定义需要用到的图标，然后系统会帮你生成一个图标库，可以在线引入，也可以下载到本地，可以说是造福了广大前端工程师和设计师。</p><p>虽然阿里的这个平台已经做得很好了，但是就我而言，在实际项目开发中还是遇到了不方便的问题：</p><ul><li>之前没考虑周全，或者后来来了新的需求，需要增加新图标，而要更新图标库是需要账号的，更新一个图标可能会涉及到根很多人沟通。</li><li>更新完图标库后还需去更新在线引用地址或更新本地文件。</li></ul><p>SVG，以下是 <a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E7%B8%AE%E6%94%BE%E5%90%91%E9%87%8F%E5%9C%96%E5%BD%A2" target="_blank" rel="noopener">维基百科</a> 对它的描述：</p><blockquote><p><strong>可缩放矢量图形</strong>（英语：<strong>Scalable Vector Graphics</strong>，<strong>SVG</strong>）是一种基于 <a href="https://zh.wikipedia.org/wiki/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">可扩展标记语言</a> （<a href="https://zh.wikipedia.org/wiki/XML" target="_blank" rel="noopener">XML</a>），用于描述二维 <a href="https://zh.wikipedia.org/wiki/%E7%9F%A2%E9%87%8F%E5%9B%BE%E5%BD%A2" target="_blank" rel="noopener">矢量图形</a> 的图形格式。SVG由 <a href="https://zh.wikipedia.org/wiki/W3C" target="_blank" rel="noopener">W3C</a> 制定，是一个 <a href="https://zh.wikipedia.org/wiki/%E5%BC%80%E6%94%BE%E6%A0%87%E5%87%86" target="_blank" rel="noopener">开放标准</a>。</p></blockquote><p>SVG 其实是 XML格式的文件，因此你可以直接使用编辑器打开 .svg 文件，并且可对它进行编辑。它的优点在于：</p><ul><li>一个图标就是一个文件，灵活性高。</li><li>不同区域可以使用不同颜色，也就是说可以用它绘制彩色图标。</li><li>矢量图形，放大不失真。</li></ul><p>SVG 文件的使用可以分为很多种，你可以把它当作图片直接在 <code>img</code> 标签或 CSS 的 <code>background-image</code> 属性中使用，也可使用 <code>svg</code> 标签中使用。但是这样使用会很麻烦，避免不了一串很长的地址，如果只要写一个标签，并传入一个图标名字就可直接使用，那就完美了。</p><p>我在  <a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a> 项目中发现了这种使用方式，因此把它提取了出来。</p><p>首先参考 <a href="https://evolly.one/2019/03/12/53.vue-cli3-use-svg-sprite-loader/" target="_blank" rel="noopener">在 Vue CLI 3 中配置 svg-sprite-loader</a> 在 webpack 添加 SVG 的 loader。并建好相应的目录，文章中我的目录建在 <code>src/icons</code>。</p><p>在 <code>icons</code> 文件夹下新建 <code>svg</code> 文件夹用来存放图标，在同级目录下新建 <code>index.js</code>。</p><p>然后我们去编写组件，名字就命名为 <code>SvgIcon</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">// SvgIcon.vue</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;svg :class=&quot;svgClass&quot; aria-hidden=&quot;true&quot; v-on=&quot;$listeners&quot;&gt;</span><br><span class="line">    &lt;use :xlink:href=&quot;iconName&quot; /&gt;</span><br><span class="line">  &lt;/svg&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;SvgIcon&apos;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    iconClass: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      required: true</span><br><span class="line">    &#125;,</span><br><span class="line">    className: &#123;</span><br><span class="line">      type: String,</span><br><span class="line">      default: &apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    iconName() &#123;</span><br><span class="line">      return `#icon-$&#123;this.iconClass&#125;`</span><br><span class="line">    &#125;,</span><br><span class="line">    svgClass() &#123;</span><br><span class="line">      if (this.className) &#123;</span><br><span class="line">        return &apos;svg-icon &apos; + this.className</span><br><span class="line">      &#125; else &#123;</span><br><span class="line">        return &apos;svg-icon&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">.svg-icon &#123;</span><br><span class="line">  width: 1em;</span><br><span class="line">  height: 1em;</span><br><span class="line">  vertical-align: -0.15em;</span><br><span class="line">  fill: currentColor;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>然后继续编写 <code>src/icons/index.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/icons/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> SvgIcon <span class="keyword">from</span> <span class="string">'@/components/SvgIcon'</span><span class="comment">// svg组件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注册为全局组件</span></span><br><span class="line">Vue.component(<span class="string">'svg-icon'</span>, SvgIcon)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> req = <span class="built_in">require</span>.context(<span class="string">'./svg'</span>, <span class="literal">false</span>, /\.svg$/)</span><br><span class="line"><span class="keyword">const</span> requireAll = <span class="function"><span class="params">requireContext</span> =&gt;</span> requireContext.keys().map(requireContext)</span><br><span class="line">requireAll(req)</span><br></pre></td></tr></table></figure><p>最后，在 <code>main.js</code> 中引入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">'@/icons'</span></span><br></pre></td></tr></table></figure><p>这样你就可以在系统任何地方使用 <code>&lt;svg-icon icon-name=&quot;svg名称&quot; /&gt;</code> 引入图标了，当你想增加图标时，只要往 <code>src/icons/svg</code> 中添加图标就可以了。</p><p>结合 <a href="https://evolly.one/2019/03/26/54.vuecl3-npm-publish/" target="_blank" rel="noopener">使用 Vue CLI3 编写组件库并发布至 npm</a>，你就可以拥有一个属于自己的图标库。你只要维护这个图标库，然后在其他项目中安装与更新它就可以了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在现在网站开发中， icon 是必不可少的元素，它可以使页面更加美观，内容更加丰富，某些场景也能更加直观地表达含义。icon 也分好多种类型，以前是使用图片，后来有了字体图标，SVG。由于占用空间大以及使用不方便（比如不同终端需要不同尺寸的图片），用图片做图标的方式已经渐渐
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>网页打印指定区域内容</title>
    <link href="https://github.com/Tit1e/2019/03/26/55-web-print/"/>
    <id>https://github.com/Tit1e/2019/03/26/55-web-print/</id>
    <published>2019-03-26T14:26:32.000Z</published>
    <updated>2019-04-13T13:38:16.840Z</updated>
    
    <content type="html"><![CDATA[<p>公司业务上有打印需求，但打印内容在一个弹窗中，在网上找了一圈，找到了解决办法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> dom = <span class="built_in">document</span>.getElementById(<span class="string">'content'</span>)</span><br><span class="line"><span class="keyword">let</span> win = <span class="built_in">window</span>.open(<span class="string">''</span>)</span><br><span class="line">win.document.write(dom.outerHTML)</span><br><span class="line">win.print()</span><br></pre></td></tr></table></figure><p>以上代码就实现了指定区域的打印功能。</p><p><a href="https://www.zhihu.com/question/20108278/answer/14142503" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;公司业务上有打印需求，但打印内容在一个弹窗中，在网上找了一圈，找到了解决办法。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>使用 Vue CLI3 编写组件库并发布至 npm</title>
    <link href="https://github.com/Tit1e/2019/03/26/54-vuecl3-npm-publish/"/>
    <id>https://github.com/Tit1e/2019/03/26/54-vuecl3-npm-publish/</id>
    <published>2019-03-25T16:05:29.000Z</published>
    <updated>2019-04-13T13:38:12.719Z</updated>
    
    <content type="html"><![CDATA[<p>前几天研发部老大来跟我说，由于现在公司业务中台化，基本上公司所有的系统都要进行迁移，并将原来使用的jQuery + Bootstrap 技术栈更新为 Vue + Element。既然统一了技术栈，那么在开发过程中肯定会有很多组件是可以共用的，甚至登录页。因此要求我开发一个公共组件库，以避免开发过程中写重复代码，提高开发效率。我也正好趁此机会了解一下相关的知识。</p><p>先放上组件地址：<a href="https://www.npmjs.com/package/hzsj-components" target="_blank" rel="noopener">hzsj-components</a>。因为不涉及公司业务，所以就把它发布到了 npm 上。</p><p>这个组件库是在  <a href="http://element-cn.eleme.io/#/zh-CN" target="_blank" rel="noopener">Element</a> 的基础上进行开发的，而且是第一次开发，不了解如何合理配置目录，因此我的组件库目录部分参考了 <a href="https://github.com/ElemeFE/element">element-ui</a> 的结构。</p><a id="more"></a><p>以  <code>HzCopy</code> 组件为例：</p><p>所有组件都放置在 <code>/packages</code> 目录下，<code>/packages/index.js</code> 用于整合所有组件，导出整个组件库。而 <code>/packages/copy/index.js</code> 用于导出单个组件，比如需要按需引入组件时。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /packages/index.js</span></span><br><span class="line"><span class="keyword">import</span> Copy <span class="keyword">from</span> <span class="string">'./copy'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储组件列表</span></span><br><span class="line"><span class="keyword">const</span> components = [</span><br><span class="line">  Copy</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义 install 方法，接收 Vue 作为参数。如果使用 use 注册插件，则所有的组件都将被注册</span></span><br><span class="line"><span class="keyword">const</span> install = <span class="function"><span class="keyword">function</span> (<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 判断是否安装</span></span><br><span class="line">  <span class="keyword">if</span> (install.installed) <span class="keyword">return</span></span><br><span class="line">  <span class="comment">// 遍历注册全局组件</span></span><br><span class="line">  components.map(<span class="function"><span class="params">component</span> =&gt;</span> Vue.component(component.name, component))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断是否是直接引入文件</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">window</span> !== <span class="string">'undefined'</span> &amp;&amp; <span class="built_in">window</span>.Vue) &#123;</span><br><span class="line">  install(<span class="built_in">window</span>.Vue)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  install,</span><br><span class="line">  Copy</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// /packages/copy/index.js</span></span><br><span class="line"><span class="comment">// 导入组件，组件必须声明 name</span></span><br><span class="line"><span class="keyword">import</span> HzCopy <span class="keyword">from</span> <span class="string">'./src'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 为组件提供 install 安装方法，供按需引入</span></span><br><span class="line">HzCopy.install = <span class="function"><span class="keyword">function</span>(<span class="params">Vue</span>) </span>&#123;</span><br><span class="line">  Vue.component(HzCopy.name, HzCopy)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认导出组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> HzCopy</span><br></pre></td></tr></table></figure><p>这样就编写完了一个组件，但要发布还得做一些其他工作。</p><p>完善 <code>package.json</code>：</p><ul><li><p>name：包名，就是  <code>npm install</code>  的时候输入的包名</p></li><li><p>version：版本</p></li><li><p>description：对包的描述，有利于用户搜索</p></li><li><p>keywords：关键字，以空格分离，有利于搜索</p></li><li><p>private：是否私有，必须修改为 false</p></li><li><p>author：作者</p></li><li><p>license：开源协议</p></li><li><p>repository：在 npm 介绍页面显示项目入口，参考格式</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"repository": &#123;</span><br><span class="line">  "type": "git",</span><br><span class="line">  "url": "https://github.com/xxxx/xxxx.git"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>scripts：新增一条打包库的命令</p><ul><li><code>--target</code>： 构建目标，默认为应用模式。这里修改为 <code>lib</code> 启用库模式。</li><li><code>--dest</code>：输出目录，默认 <code>dist</code>。这里我们改成 <code>lib</code>。</li><li><code>[entry]</code>： 最后一个参数为入口文件，默认为  <code>src/App.vue</code>。这里我们指定编译  <code>packages/</code>  组件库目录。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"scripts": &#123;</span><br><span class="line">  "lib": "vue-cli-service build --target lib --name hzsj-components --dest lib packages/index.js"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>main：定义包的入口文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">"main": "lib/hzsj-components.umd.min.js"</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>engines：告诉用户运行你的包对 NodeJs 版本的要求</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">"engines": &#123;</span><br><span class="line">  "node": "v11.8.0"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>修改好  <code>package.json</code> 后就可以准备发布包了。</p><p>首先如果使用了淘宝或其他镜像需先设置回 npm 镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry http://registry.npmjs.org</span><br></pre></td></tr></table></figure><p>或者如果使用 <a href="https://www.npmjs.com/package/nrm" target="_blank" rel="noopener">nrm</a> 可使用：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nrm use npm</span><br></pre></td></tr></table></figure><p>然后去 <a href="https://www.npmjs.com/" target="_blank" rel="noopener">npm</a> 注册一个账号，注册完了在终端登录</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm login</span><br></pre></td></tr></table></figure><p>发布</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish</span><br></pre></td></tr></table></figure><p>如果你的包名以 @ 开头，用上面命令可能会发布失败，需要用以下命令发布</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm publish --access public</span><br></pre></td></tr></table></figure><p><a href="https://juejin.im/post/5bbab9de5188255c8c0cb0e3" target="_blank" rel="noopener">参考文章</a></p><p><a href="https://juejin.im/post/5b231f6ff265da595f0d2540" target="_blank" rel="noopener">参考文章2</a></p><p><a href="https://blog.csdn.net/u013727805/article/details/80849329" target="_blank" rel="noopener">参考文章3</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前几天研发部老大来跟我说，由于现在公司业务中台化，基本上公司所有的系统都要进行迁移，并将原来使用的jQuery + Bootstrap 技术栈更新为 Vue + Element。既然统一了技术栈，那么在开发过程中肯定会有很多组件是可以共用的，甚至登录页。因此要求我开发一个公共组件库，以避免开发过程中写重复代码，提高开发效率。我也正好趁此机会了解一下相关的知识。&lt;/p&gt;
&lt;p&gt;先放上组件地址：&lt;a href=&quot;https://www.npmjs.com/package/hzsj-components&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;hzsj-components&lt;/a&gt;。因为不涉及公司业务，所以就把它发布到了 npm 上。&lt;/p&gt;
&lt;p&gt;这个组件库是在  &lt;a href=&quot;http://element-cn.eleme.io/#/zh-CN&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Element&lt;/a&gt; 的基础上进行开发的，而且是第一次开发，不了解如何合理配置目录，因此我的组件库目录部分参考了 &lt;a href=&quot;https://github.com/ElemeFE/element&quot;&gt;element-ui&lt;/a&gt; 的结构。&lt;/p&gt;
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>在 Vue CLI 3 中配置 svg-sprite-loader</title>
    <link href="https://github.com/Tit1e/2019/03/12/53-vue-cli3-use-svg-sprite-loader/"/>
    <id>https://github.com/Tit1e/2019/03/12/53-vue-cli3-use-svg-sprite-loader/</id>
    <published>2019-03-12T06:25:46.000Z</published>
    <updated>2019-04-13T13:38:05.731Z</updated>
    
    <content type="html"><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install svg-sprite-loader --save-dev</span><br></pre></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>在 Vue.config.js 中加入如下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">'path'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">resolve</span>(<span class="params">dir</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> path.join(__dirname, <span class="string">'.'</span>, dir)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    chainWebpack: <span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 删除默认配置中处理svg</span></span><br><span class="line">        config.module.rules.delete(<span class="string">'svg'</span>)</span><br><span class="line">        config.module</span><br><span class="line">            .rule(<span class="string">'svg-sprite-loader'</span>)</span><br><span class="line">            .test(<span class="regexp">/\.svg$/</span>)</span><br><span class="line">            .include</span><br><span class="line">            .add(resolve(<span class="string">'src/icons'</span>)) <span class="comment">// 处理svg目录,根据实际情况修改</span></span><br><span class="line">            .end()</span><br><span class="line">            .use(<span class="string">'svg-sprite-loader'</span>)</span><br><span class="line">            .loader(<span class="string">'svg-sprite-loader'</span>)</span><br><span class="line">            .options(&#123;</span><br><span class="line">            symbolId: <span class="string">'[name]'</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然其他的 webpack 配置也可以在 Vue.config.js 中配置，包括反向代理等等。具体可查看<a href="https://cli.vuejs.org/zh/guide/webpack.html" target="_blank" rel="noopener">这里</a>。</p><p><a href="https://juejin.im/post/5bc93881f265da0aea69ae2e" target="_blank" rel="noopener">参考文章</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;安装&quot;&gt;&lt;a href=&quot;#安装&quot; class=&quot;headerlink&quot; title=&quot;安装&quot;&gt;&lt;/a&gt;安装&lt;/h3&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span c
      
    
    </summary>
    
    
      <category term="学习" scheme="https://github.com/Tit1e/tags/%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="vue" scheme="https://github.com/Tit1e/tags/vue/"/>
    
  </entry>
  
  <entry>
    <title>一条狗的使命 A Dog&#39;s Purpose (2017)</title>
    <link href="https://github.com/Tit1e/2019/01/01/74-A-Dog&#39;s-Purpose/"/>
    <id>https://github.com/Tit1e/2019/01/01/74-A-Dog&#39;s-Purpose/</id>
    <published>2018-12-31T16:00:00.000Z</published>
    <updated>2019-04-09T09:08:26.694Z</updated>
    
    <content type="html"><![CDATA[<p>电影讲述了一条狗的五世，第一世它是一条流浪狗，很快就被抓结束了一生。第二世它被电影的男主人公收养，度过了美好的一生。第三世它是一条警犬，在一次追捕中被凶手的枪击中，失血过多而死。第四世它成了一条柯基，与一名女子度过了一生。第五世，它被一个女生收养，但她男朋友并不喜欢狗，一直把它拴在树上，只给他吃饭，从来不陪它玩，最后把它丢弃了。它并没有回去，而是选择流浪。最终它找到了第二世的主人，帮他找回了爱情，也让他相信是第二世的自己回来了。 </p><p>电影是以狗为第一人称来讲述的，电影中有很多狗心理活动的独白，实际上狗狗是不是会这么想，我们并不知道。整部电影下来还是有两处引发了我的泪点，一处是第二世的它死去的时候，第二处是男主认出第五世的它的时候。其他几世我并没有太多的感触，可能第二世完整的讲述了它的一生，给了我先入为主的感觉吧。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;电影讲述了一条狗的五世，第一世它是一条流浪狗，很快就被抓结束了一生。第二世它被电影的男主人公收养，度过了美好的一生。第三世它是一条警犬，在一次追捕中被凶手的枪击中，失血过多而死。第四世它成了一条柯基，与一名女子度过了一生。第五世，它被一个女生收养，但她男朋友并不喜欢狗，一直
      
    
    </summary>
    
    
      <category term="观影感想" scheme="https://github.com/Tit1e/tags/%E8%A7%82%E5%BD%B1%E6%84%9F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>你好呀，2019</title>
    <link href="https://github.com/Tit1e/2018/12/31/52-hello-2019/"/>
    <id>https://github.com/Tit1e/2018/12/31/52-hello-2019/</id>
    <published>2018-12-31T15:15:58.000Z</published>
    <updated>2019-04-13T13:37:59.467Z</updated>
    
    <content type="html"><![CDATA[<h4 id="2018-计划"><a href="#2018-计划" class="headerlink" title="2018 计划"></a>2018 计划</h4><ol><li>前端技能上能有大的提升（如何衡量大呢？我也不知道） ❓</li><li>增重到130斤（是增肌，不是增脂！） ❎</li><li>一定要买个 switch（塞尔达天下第一！） ✅</li><li>薪水上涨 30% ✅</li><li>攒钱 ✅</li><li>希望认识更多的人？（这个太难了） ✅</li></ol><a id="more"></a><p>增重很明显失败了，18 年几乎没去健身房吧，放弃一件事实在是太容易了。开年的时候就开始忙，连着加了好几个月的班，之后后面又不确定性的日常加班，导致后来已经完全没了去健身房的兴致，当然我不是把锅甩在加班头上，毕竟后面不忙了，周末我也没去健身房了。</p><p>switch 的话已经买了，也有大半年了吧，玩倒也断断续续一直在玩，玩得最疯的就是当初肝《异度之刃2》的时候了，很久没有游戏能这样吸引我了，确实是个好游戏。</p><p>18 年也认识了两个可爱的同事，他们是我晋公司以来最处得来的同事，大概是因为都是逗比吧。</p><p>明年就不立计划了，只希望家人，我在意的以及在意我的人能快乐，身体能健康吧。与家人的关系也能更近一步，小时候不怎么跟家人交流，现在大了，事情多了，爸妈也会跟我来说一些事情了，与爸妈之间的话说的也就多了，但我希望还能更近一步吧。已经能明显感觉到爸妈在变老了，时间不等人呀。以前觉得“祝你身体健康”只是客套话，但是随着年龄变大，经历的事情增多，我越来越觉得这不是客套话。随着年龄的增大，这句话也将变得弥足珍贵。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;2018-计划&quot;&gt;&lt;a href=&quot;#2018-计划&quot; class=&quot;headerlink&quot; title=&quot;2018 计划&quot;&gt;&lt;/a&gt;2018 计划&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;前端技能上能有大的提升（如何衡量大呢？我也不知道） ❓&lt;/li&gt;
&lt;li&gt;增重到130斤（是增肌，不是增脂！） ❎&lt;/li&gt;
&lt;li&gt;一定要买个 switch（塞尔达天下第一！） ✅&lt;/li&gt;
&lt;li&gt;薪水上涨 30% ✅&lt;/li&gt;
&lt;li&gt;攒钱 ✅&lt;/li&gt;
&lt;li&gt;希望认识更多的人？（这个太难了） ✅&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="随笔" scheme="https://github.com/Tit1e/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>从零开始：Ubuntu 部署 Node 环境</title>
    <link href="https://github.com/Tit1e/2018/12/14/51-ubuntu-node/"/>
    <id>https://github.com/Tit1e/2018/12/14/51-ubuntu-node/</id>
    <published>2018-12-14T12:29:48.000Z</published>
    <updated>2019-04-13T13:37:53.944Z</updated>
    
    <content type="html"><![CDATA[<p>最近注册了一个亚马逊的 AWS 账号，有一年的免费体验时间，于是打算这次机会来折腾折腾服务器方面的东西，顺便学学 Node。折腾过程中遇到了挺多问题，我都会一一记录下来。</p><p>这次记录的是我在 Ubuntu 下安装了 mysql 时，没提醒我输入密码，Google 了一圈解决，在这里做个记录。</p><a id="more"></a><p>……</p><p>……</p><p>……</p><p>本来这篇文章叫做“Ubuntu 安装 mysql 未提示输入密码”，但在我想去服务器上执行命令验证下命令是否正确的时候，发现 AWS 连不上了……然后我折腾了一个多小时，放弃了原来的服务器，重新新建了一个实例，又从头到尾折腾了一遍，所以这篇文章也正式更名为“从零开始：Ubuntu 部署 Node 环境”。</p><h3 id="基本说明"><a href="#基本说明" class="headerlink" title="基本说明"></a>基本说明</h3><ul><li>服务器：<a href="https://aws.amazon.com/cn/" target="_blank" rel="noopener">Amazon Web Services</a> EC2（新用户免费体验 1 年）</li><li>服务器系统：Ubuntu 16.04.5 LTS</li><li>操作环境：mac OS Mojave 10.14.2</li><li>终端：iterm2</li></ul><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><h4 id="一、创建实例"><a href="#一、创建实例" class="headerlink" title="一、创建实例"></a>一、创建实例</h4><p>1、登录控制台，开始创建<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-14_23-35-09.png" alt><br>2、选择系统（免费用户只能选择带有“符合条件的免费套餐”字样的项）<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-14_23-37-31.png" alt><br>3、选择实例类型<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-14_23-37-57.png" alt><br>4、启动<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-14_23-38-26.png" alt><br>5、创建密钥<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-14_23-41-35.png" alt></p><p>密钥需要保管好，因为通过 SSH 连接服务器的时候需要用到。我将密钥存在 <code>~/.ssh/</code> 路径下。</p><p>注：新建的实例默认情况下是 ping 不通的，因为它默认只允许 SSH 流量，需要设置一下<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-15_01-36-33.png" alt></p><p><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-15_01-39-26.png" alt></p><h4 id="二、SSH-连接服务器"><a href="#二、SSH-连接服务器" class="headerlink" title="二、SSH 连接服务器"></a>二、SSH 连接服务器</h4><p>打开终端，输入命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ip 或 公有 DNS 可在创建实例的第一步图中的列表中找到</span></span><br><span class="line">sudo ssh -i ~/.ssh/zyd.pem ubuntu@[ip 或 公有 DNS]</span><br></pre></td></tr></table></figure></p><h4 id="三、安装-node-js"><a href="#三、安装-node-js" class="headerlink" title="三、安装 node.js"></a>三、安装 node.js</h4><p>Ubuntu 下直接执行 <code>sudo apt install nodejs</code> 安装的 node 版本回会非常低，所以不推荐直接用这个命令安装。<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">更新软件</span></span><br><span class="line">sudo apt update</span><br><span class="line">sudo apt upgrade</span><br><span class="line"><span class="meta">#</span><span class="bash">添加 node 源</span></span><br><span class="line">curl -sL https://deb.nodesource.com/setup_9.x | sudo -E shell -</span><br><span class="line"><span class="meta">#</span><span class="bash">安装</span></span><br><span class="line">sudo apt install -y nodejs</span><br></pre></td></tr></table></figure></p><p>安装完后安装 node 版本管理工具，我用的是 n ：<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm <span class="keyword">install</span> n -g</span><br></pre></td></tr></table></figure></p><p>n 的使用方法可参考 <a href="https://www.npmjs.com/package/n" target="_blank" rel="noopener">这里</a>。</p><h4 id="四、Nginx-服务器代理设置"><a href="#四、Nginx-服务器代理设置" class="headerlink" title="四、Nginx 服务器代理设置"></a>四、Nginx 服务器代理设置</h4><p>1、安装 Nginx，安装完通过 <code>nginx -v</code> 查看版本号来看是否安装成功<br><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt <span class="keyword">install</span> nginx</span><br><span class="line">nginx -v</span><br></pre></td></tr></table></figure></p><p>2、配置代理<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/nginx/conf.d/</span><br><span class="line"><span class="meta">#</span><span class="bash">文件名自定义</span></span><br><span class="line">sudo vi test-3000.conf</span><br></pre></td></tr></table></figure></p><p>按 <code>i</code> 进入 vim 的编辑模式，粘贴如下内容：</p><p>粘贴前把注释内容删除<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">这里需要对应域名</span></span><br><span class="line">upstream test &#123;</span><br><span class="line">    #端口需要根据之后 node 服务运行后的实际端口来配置，Express 的默认端口为 3000</span><br><span class="line">    server 127.0.0.1:3000;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    #绑定的完整域名</span><br><span class="line">    server_name test.evolly.one;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header Host  $http_host;</span><br><span class="line">        proxy_set_header X-Real-IP  $remote_addr;  </span><br><span class="line">        proxy_set_header X-Forwarded-For  $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Nginx-proxy true;</span><br><span class="line">        #这里需要对应域名</span><br><span class="line">        proxy_pass http://test;</span><br><span class="line">        proxy_redirect off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>按 <code>esc</code> 并直接在用键盘输出 <code>:wq</code> ，回车，保存并关闭文件。终端输入 <code>ls</code> 可查看当前目录下的文件列表。</p><p>将域名解析至服务器，我的域名是在 GoDaddy 上买的，域名解析都差不多，添加一条 A 类型的解析。<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-15_00-30-50.png" alt></p><p>然后输入运行 <code>sudo nginx -t</code> 查看是否配置成功<br>成功终端会打印如下信息：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">nginx: the configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> <span class="keyword">syntax</span> <span class="keyword">is</span> ok</span><br><span class="line">nginx: configuration <span class="keyword">file</span> /etc/nginx/nginx.<span class="keyword">conf</span> test <span class="keyword">is</span> successful</span><br></pre></td></tr></table></figure></p><p>重启 nginx<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo nginx -s reload</span><br></pre></td></tr></table></figure></p><h4 id="五、创建和部署-hello-world"><a href="#五、创建和部署-hello-world" class="headerlink" title="五、创建和部署 hello world"></a>五、创建和部署 hello world</h4><p>到根目录创建 <code>www</code> 目录并进入目录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /</span><br><span class="line">sudo mkdir www</span><br><span class="line">cd www</span><br></pre></td></tr></table></figure></p><p>创建 hello.js<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi hello.js</span><br></pre></td></tr></table></figure></p><p>写入以下内容：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req,res</span>) </span>&#123;</span><br><span class="line">res.writeHead(<span class="number">200</span>,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;)</span><br><span class="line">res.end(<span class="string">'hello world'</span>)</span><br><span class="line">&#125;).listen(<span class="number">3000</span>) <span class="comment">//端口对应之前 nginx 配置中配置的端口</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'server test'</span>)</span><br></pre></td></tr></table></figure></p><p>运行<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node hello.js</span><br></pre></td></tr></table></figure></p><p>现在访问之前解析的域名，就能在页面上看到 <code>hello world</code> 字样。<br>那么有个问题，现在 node 服务是启动了，但是终端被占用了，无法执行其他操作了。这时候我们就需要 pm2，pm2 是 node 进程管理工具，有了它，node 就不会占用你的终端了，当然它的功能不止只一个，还有如性能监控、自动重启、负载均衡等功能。</p><p>安装<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo npm install -g pm2</span><br></pre></td></tr></table></figure></p><p>运行 node 服务<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pm2 start hello.js</span><br></pre></td></tr></table></figure></p><p>如果你使用了框架，如 Express，那你可以 cd 至项目跟目录，运行 <code>pm2 start &#39;./bin/WWW&#39;</code>。或者你可以看 <code>package.json</code> 中运行项目的实际命令是什么。</p><p>运行后可以看到终端打印出了所有进程状态，并且终端没有被占用。pm2 的其他用法可以 <a href="https://www.npmjs.com/package/pm2" target="_blank" rel="noopener">参考这里</a></p><h4 id="六、安装-mysql"><a href="#六、安装-mysql" class="headerlink" title="六、安装 mysql"></a>六、安装 mysql</h4><p>1、执行安装命令：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mysql-server</span><br><span class="line">sudo apt install mysql-client</span><br><span class="line">sudo apt install libmysqlclient-dev</span><br></pre></td></tr></table></figure></p><p>正常情况下安装过程中会让你输入两次初始密码</p><p>通过 <code>sudo netstat -tap | grep mysql</code> 测试是否安装成功，如果成功则显示如下：<br><img src="https://personal-1251959693.cos.ap-chengdu.myqcloud.com/2018-12-14-Xnip2018-12-15_01-05-52.png" alt></p><p>2、设置 mysql 允许远程访问，否则数据库工具无法远程连接<br>编辑文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/mysql/mysql.conf.d/mysqld.cnf</span><br></pre></td></tr></table></figure></p><p>注释掉 bind-address = 127.0.0.1 行（最前面加<code>#</code>）</p><p>保存退出</p><p>连接 mysql,执行以下命令后，输入密码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure></p><p>执行授权命令并退出（命令中的 <code>；</code> 也要复制）：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">grant</span> <span class="keyword">all</span> <span class="keyword">on</span> *.* <span class="keyword">to</span> root@<span class="string">'%'</span> <span class="keyword">identified</span> <span class="keyword">by</span> <span class="string">'你的密码'</span> <span class="keyword">with</span> <span class="keyword">grant</span> <span class="keyword">option</span>;</span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br><span class="line">quit</span><br></pre></td></tr></table></figure></p><p>重启 mysql<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure></p><p>现在你就可以通过 Navicat 工具连接 mysql 了。</p><h4 id="mysql-安装过程中没有提示输入初始密码"><a href="#mysql-安装过程中没有提示输入初始密码" class="headerlink" title="mysql 安装过程中没有提示输入初始密码"></a>mysql 安装过程中没有提示输入初始密码</h4><p>如果遇到这种情况，可以打开该文件查看默认密码<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/mysql/debian.cnf</span><br></pre></td></tr></table></figure></p><p>在这个文件里面有着 MySQL 默认的用户名和用户密码<br>正常情况下该文件中的 <code>user</code> 为 <code>debian-sys-maint</code>，而密码是由比较复杂的大小写数字构成，我们先通过这个账户连接 mysql,然后执行修改密码命令给 root 用户修改密码：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u debian-sys-maint -p</span><br></pre></td></tr></table></figure></p><p>输入密码后连接 mysql ,执行：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">'重置的密码'</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span><span class="keyword">and</span> Host = <span class="string">'localhost'</span>;</span><br></pre></td></tr></table></figure></p><p>如果显示以下内容则说明修改成功：<br><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Query OK, <span class="number">1</span> <span class="built_in">row</span> affected, <span class="number">1</span> warning (<span class="number">0.00</span> <span class="built_in">sec</span>)</span><br><span class="line"><span class="built_in">Rows</span> <span class="built_in">match</span><span class="symbol">ed:</span> <span class="number">1</span>  Chang<span class="symbol">ed:</span> <span class="number">1</span>  Warnin<span class="symbol">gs:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>重启 mysql<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service mysql restart</span><br></pre></td></tr></table></figure></p><p>这样 root 用户的密码就被重置了。</p><p>教程到此结束，最后感谢下面这几位作者提供的参考：</p><ul><li><a href="https://segmentfault.com/a/1190000010098126" target="_blank" rel="noopener">nodejs 服务器部署教程</a></li><li><a href="https://blog.csdn.net/xiangwanpeng/article/details/54562362" target="_blank" rel="noopener">在 Ubuntu16.04 下安装 mysql</a></li><li><a href="https://blog.csdn.net/sinat_21302587/article/details/76870457" target="_blank" rel="noopener">ubuntu 安装 mysql 时未提示输入密码</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近注册了一个亚马逊的 AWS 账号，有一年的免费体验时间，于是打算这次机会来折腾折腾服务器方面的东西，顺便学学 Node。折腾过程中遇到了挺多问题，我都会一一记录下来。&lt;/p&gt;
&lt;p&gt;这次记录的是我在 Ubuntu 下安装了 mysql 时，没提醒我输入密码，Google 了一圈解决，在这里做个记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="折腾" scheme="https://github.com/Tit1e/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title>遮蔽的天空 [美]保罗·鲍尔斯</title>
    <link href="https://github.com/Tit1e/2018/11/13/108-The-Sheltering-Sky/"/>
    <id>https://github.com/Tit1e/2018/11/13/108-The-Sheltering-Sky/</id>
    <published>2018-11-12T16:00:00.000Z</published>
    <updated>2019-04-15T15:32:51.131Z</updated>
    
    <content type="html"><![CDATA[<p>这本书看完之后压抑的感觉一直挥之不去,本书开始的时候给我的感觉还是挺正常的,虽然一开始书中的环境描写就非常压抑,但是波特,姬特,特纳的行为思想还是正常的,但是从波特生病后,整本书变得更加压抑起来,无论是对环境的描写还是对人物的描写,波特死后姬特一系列的遭遇更是让我难受,我甚至有点没反应过来.因为前后差异太大了。整本书看完后我说不上给我什么感觉,姬特最后被人送回欧洲后我心里是一阵庆幸的,但是最后她无法面对特纳,但我一直无法理解她为什么一直无法面对特纳,如果只是因为火车上那一晚跟他发生了关系的话,她在骆驼队的经历比那一晚不知道疯狂多少倍,不过那一晚可能是后面这一切的开端。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这本书看完之后压抑的感觉一直挥之不去,本书开始的时候给我的感觉还是挺正常的,虽然一开始书中的环境描写就非常压抑,但是波特,姬特,特纳的行为思想还是正常的,但是从波特生病后,整本书变得更加压抑起来,无论是对环境的描写还是对人物的描写,波特死后姬特一系列的遭遇更是让我难受,我甚
      
    
    </summary>
    
    
      <category term="读书笔记" scheme="https://github.com/Tit1e/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
</feed>
